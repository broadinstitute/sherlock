/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockEnvironmentV3,
  SherlockEnvironmentV3Create,
  SherlockEnvironmentV3Edit,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockEnvironmentV3FromJSON,
    SherlockEnvironmentV3ToJSON,
    SherlockEnvironmentV3CreateFromJSON,
    SherlockEnvironmentV3CreateToJSON,
    SherlockEnvironmentV3EditFromJSON,
    SherlockEnvironmentV3EditToJSON,
} from '../models/index';

export interface ApiEnvironmentsV3GetRequest {
    autoPopulateChartReleases?: boolean;
    base?: string;
    baseDomain?: string;
    createdAt?: Date;
    defaultCluster?: string;
    defaultNamespace?: string;
    deleteAfter?: Date;
    description?: string;
    helmfileRef?: string;
    id?: number;
    lifecycle?: string;
    name?: string;
    namePrefixesDomain?: boolean;
    offline?: boolean;
    offlineScheduleBeginEnabled?: boolean;
    offlineScheduleBeginTime?: Date;
    offlineScheduleEndEnabled?: boolean;
    offlineScheduleEndTime?: Date;
    offlineScheduleEndWeekends?: boolean;
    owner?: string;
    pactIdentifier?: string;
    pagerdutyIntegration?: string;
    preventDeletion?: boolean;
    requiresSuitability?: boolean;
    templateEnvironment?: string;
    uniqueResourcePrefix?: string;
    updatedAt?: Date;
    valuesName?: string;
    limit?: number;
    offset?: number;
}

export interface ApiEnvironmentsV3PostRequest {
    environment: SherlockEnvironmentV3Create;
}

export interface ApiEnvironmentsV3SelectorDeleteRequest {
    selector: string;
}

export interface ApiEnvironmentsV3SelectorGetRequest {
    selector: string;
}

export interface ApiEnvironmentsV3SelectorPatchRequest {
    selector: string;
    environment: SherlockEnvironmentV3Edit;
}

/**
 * 
 */
export class EnvironmentsApi extends runtime.BaseAPI {

    /**
     * List Environments matching a filter.
     * List Environments matching a filter
     */
    async apiEnvironmentsV3GetRaw(requestParameters: ApiEnvironmentsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockEnvironmentV3>>> {
        const queryParameters: any = {};

        if (runtime.exists(requestParameters, 'autoPopulateChartReleases')) {
            queryParameters['autoPopulateChartReleases'] = requestParameters['autoPopulateChartReleases'];
        }

        if (runtime.exists(requestParameters, 'base')) {
            queryParameters['base'] = requestParameters['base'];
        }

        if (runtime.exists(requestParameters, 'baseDomain')) {
            queryParameters['baseDomain'] = requestParameters['baseDomain'];
        }

        if (runtime.exists(requestParameters, 'createdAt')) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'defaultCluster')) {
            queryParameters['defaultCluster'] = requestParameters['defaultCluster'];
        }

        if (runtime.exists(requestParameters, 'defaultNamespace')) {
            queryParameters['defaultNamespace'] = requestParameters['defaultNamespace'];
        }

        if (runtime.exists(requestParameters, 'deleteAfter')) {
            queryParameters['deleteAfter'] = (requestParameters['deleteAfter'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'description')) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (runtime.exists(requestParameters, 'helmfileRef')) {
            queryParameters['helmfileRef'] = requestParameters['helmfileRef'];
        }

        if (runtime.exists(requestParameters, 'id')) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (runtime.exists(requestParameters, 'lifecycle')) {
            queryParameters['lifecycle'] = requestParameters['lifecycle'];
        }

        if (runtime.exists(requestParameters, 'name')) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (runtime.exists(requestParameters, 'namePrefixesDomain')) {
            queryParameters['namePrefixesDomain'] = requestParameters['namePrefixesDomain'];
        }

        if (runtime.exists(requestParameters, 'offline')) {
            queryParameters['offline'] = requestParameters['offline'];
        }

        if (runtime.exists(requestParameters, 'offlineScheduleBeginEnabled')) {
            queryParameters['offlineScheduleBeginEnabled'] = requestParameters['offlineScheduleBeginEnabled'];
        }

        if (runtime.exists(requestParameters, 'offlineScheduleBeginTime')) {
            queryParameters['offlineScheduleBeginTime'] = (requestParameters['offlineScheduleBeginTime'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'offlineScheduleEndEnabled')) {
            queryParameters['offlineScheduleEndEnabled'] = requestParameters['offlineScheduleEndEnabled'];
        }

        if (runtime.exists(requestParameters, 'offlineScheduleEndTime')) {
            queryParameters['offlineScheduleEndTime'] = (requestParameters['offlineScheduleEndTime'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'offlineScheduleEndWeekends')) {
            queryParameters['offlineScheduleEndWeekends'] = requestParameters['offlineScheduleEndWeekends'];
        }

        if (runtime.exists(requestParameters, 'owner')) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (runtime.exists(requestParameters, 'pactIdentifier')) {
            queryParameters['PactIdentifier'] = requestParameters['pactIdentifier'];
        }

        if (runtime.exists(requestParameters, 'pagerdutyIntegration')) {
            queryParameters['pagerdutyIntegration'] = requestParameters['pagerdutyIntegration'];
        }

        if (runtime.exists(requestParameters, 'preventDeletion')) {
            queryParameters['preventDeletion'] = requestParameters['preventDeletion'];
        }

        if (runtime.exists(requestParameters, 'requiresSuitability')) {
            queryParameters['requiresSuitability'] = requestParameters['requiresSuitability'];
        }

        if (runtime.exists(requestParameters, 'templateEnvironment')) {
            queryParameters['templateEnvironment'] = requestParameters['templateEnvironment'];
        }

        if (runtime.exists(requestParameters, 'uniqueResourcePrefix')) {
            queryParameters['uniqueResourcePrefix'] = requestParameters['uniqueResourcePrefix'];
        }

        if (runtime.exists(requestParameters, 'updatedAt')) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'valuesName')) {
            queryParameters['valuesName'] = requestParameters['valuesName'];
        }

        if (runtime.exists(requestParameters, 'limit')) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (runtime.exists(requestParameters, 'offset')) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/environments/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockEnvironmentV3FromJSON));
    }

    /**
     * List Environments matching a filter.
     * List Environments matching a filter
     */
    async apiEnvironmentsV3Get(requestParameters: ApiEnvironmentsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockEnvironmentV3>> {
        const response = await this.apiEnvironmentsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a Environment.
     * Create a Environment
     */
    async apiEnvironmentsV3PostRaw(requestParameters: ApiEnvironmentsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockEnvironmentV3>> {
        if (!runtime.exists(requestParameters, 'environment')) {
            throw new runtime.RequiredError(
                'environment',
                'Required parameter "environment" was null or undefined when calling apiEnvironmentsV3Post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/environments/v3`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockEnvironmentV3CreateToJSON(requestParameters['environment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockEnvironmentV3FromJSON(jsonValue));
    }

    /**
     * Create a Environment.
     * Create a Environment
     */
    async apiEnvironmentsV3Post(requestParameters: ApiEnvironmentsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockEnvironmentV3> {
        const response = await this.apiEnvironmentsV3PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an individual Environment by its ID.
     * Delete an individual Environment
     */
    async apiEnvironmentsV3SelectorDeleteRaw(requestParameters: ApiEnvironmentsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockEnvironmentV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiEnvironmentsV3SelectorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/environments/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockEnvironmentV3FromJSON(jsonValue));
    }

    /**
     * Delete an individual Environment by its ID.
     * Delete an individual Environment
     */
    async apiEnvironmentsV3SelectorDelete(requestParameters: ApiEnvironmentsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockEnvironmentV3> {
        const response = await this.apiEnvironmentsV3SelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual Environment.
     * Get an individual Environment
     */
    async apiEnvironmentsV3SelectorGetRaw(requestParameters: ApiEnvironmentsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockEnvironmentV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiEnvironmentsV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/environments/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockEnvironmentV3FromJSON(jsonValue));
    }

    /**
     * Get an individual Environment.
     * Get an individual Environment
     */
    async apiEnvironmentsV3SelectorGet(requestParameters: ApiEnvironmentsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockEnvironmentV3> {
        const response = await this.apiEnvironmentsV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an individual Environment.
     * Edit an individual Environment
     */
    async apiEnvironmentsV3SelectorPatchRaw(requestParameters: ApiEnvironmentsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockEnvironmentV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiEnvironmentsV3SelectorPatch().'
            );
        }

        if (!runtime.exists(requestParameters, 'environment')) {
            throw new runtime.RequiredError(
                'environment',
                'Required parameter "environment" was null or undefined when calling apiEnvironmentsV3SelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/environments/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockEnvironmentV3EditToJSON(requestParameters['environment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockEnvironmentV3FromJSON(jsonValue));
    }

    /**
     * Edit an individual Environment.
     * Edit an individual Environment
     */
    async apiEnvironmentsV3SelectorPatch(requestParameters: ApiEnvironmentsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockEnvironmentV3> {
        const response = await this.apiEnvironmentsV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
