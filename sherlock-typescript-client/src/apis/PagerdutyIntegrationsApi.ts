/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  PagerdutyAlertSummary,
  PagerdutySendAlertResponse,
  SherlockPagerdutyIntegrationV3,
  SherlockPagerdutyIntegrationV3Create,
  SherlockPagerdutyIntegrationV3Edit,
  V2controllersCreatablePagerdutyIntegration,
  V2controllersEditablePagerdutyIntegration,
  V2controllersPagerdutyIntegration,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    PagerdutyAlertSummaryFromJSON,
    PagerdutyAlertSummaryToJSON,
    PagerdutySendAlertResponseFromJSON,
    PagerdutySendAlertResponseToJSON,
    SherlockPagerdutyIntegrationV3FromJSON,
    SherlockPagerdutyIntegrationV3ToJSON,
    SherlockPagerdutyIntegrationV3CreateFromJSON,
    SherlockPagerdutyIntegrationV3CreateToJSON,
    SherlockPagerdutyIntegrationV3EditFromJSON,
    SherlockPagerdutyIntegrationV3EditToJSON,
    V2controllersCreatablePagerdutyIntegrationFromJSON,
    V2controllersCreatablePagerdutyIntegrationToJSON,
    V2controllersEditablePagerdutyIntegrationFromJSON,
    V2controllersEditablePagerdutyIntegrationToJSON,
    V2controllersPagerdutyIntegrationFromJSON,
    V2controllersPagerdutyIntegrationToJSON,
} from '../models/index';

export interface ApiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRequest {
    selector: string;
    summary: PagerdutyAlertSummary;
}

export interface ApiPagerdutyIntegrationsV3GetRequest {
    createdAt?: Date;
    id?: number;
    name?: string;
    pagerdutyID?: string;
    type?: string;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiPagerdutyIntegrationsV3PostRequest {
    pagerdutyIntegration: SherlockPagerdutyIntegrationV3Create;
}

export interface ApiPagerdutyIntegrationsV3SelectorDeleteRequest {
    selector: string;
}

export interface ApiPagerdutyIntegrationsV3SelectorGetRequest {
    selector: string;
}

export interface ApiPagerdutyIntegrationsV3SelectorPatchRequest {
    selector: string;
    pagerdutyIntegration: SherlockPagerdutyIntegrationV3Edit;
}

export interface ApiV2PagerdutyIntegrationsGetRequest {
    createdAt?: Date;
    id?: number;
    name?: string;
    pagerdutyID?: string;
    type?: string;
    updatedAt?: Date;
    limit?: number;
}

export interface ApiV2PagerdutyIntegrationsPostRequest {
    pagerdutyIntegration: V2controllersCreatablePagerdutyIntegration;
}

export interface ApiV2PagerdutyIntegrationsSelectorDeleteRequest {
    selector: string;
}

export interface ApiV2PagerdutyIntegrationsSelectorGetRequest {
    selector: string;
}

export interface ApiV2PagerdutyIntegrationsSelectorPatchRequest {
    selector: string;
    pagerdutyIntegration: V2controllersEditablePagerdutyIntegration;
}

export interface ApiV2PagerdutyIntegrationsSelectorPutRequest {
    selector: string;
    pagerdutyIntegration: V2controllersCreatablePagerdutyIntegration;
}

export interface ApiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPostRequest {
    selector: string;
    summary: PagerdutyAlertSummary;
}

export interface ApiV2SelectorsPagerdutyIntegrationsSelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class PagerdutyIntegrationsApi extends runtime.BaseAPI {

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRaw(requestParameters: ApiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagerdutySendAlertResponse>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPost.');
        }

        if (requestParameters.summary === null || requestParameters.summary === undefined) {
            throw new runtime.RequiredError('summary','Required parameter requestParameters.summary was null or undefined when calling apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pagerduty-integrations/procedures/v3/trigger-incident/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagerdutyAlertSummaryToJSON(requestParameters.summary),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagerdutySendAlertResponseFromJSON(jsonValue));
    }

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPost(requestParameters: ApiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagerdutySendAlertResponse> {
        const response = await this.apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List PagerdutyIntegrations matching a filter.
     * List PagerdutyIntegrations matching a filter
     */
    async apiPagerdutyIntegrationsV3GetRaw(requestParameters: ApiPagerdutyIntegrationsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockPagerdutyIntegrationV3>>> {
        const queryParameters: any = {};

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.pagerdutyID !== undefined) {
            queryParameters['pagerdutyID'] = requestParameters.pagerdutyID;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pagerduty-integrations/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockPagerdutyIntegrationV3FromJSON));
    }

    /**
     * List PagerdutyIntegrations matching a filter.
     * List PagerdutyIntegrations matching a filter
     */
    async apiPagerdutyIntegrationsV3Get(requestParameters: ApiPagerdutyIntegrationsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockPagerdutyIntegrationV3>> {
        const response = await this.apiPagerdutyIntegrationsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a PagerdutyIntegration.
     * Create a PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3PostRaw(requestParameters: ApiPagerdutyIntegrationsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters.pagerdutyIntegration === null || requestParameters.pagerdutyIntegration === undefined) {
            throw new runtime.RequiredError('pagerdutyIntegration','Required parameter requestParameters.pagerdutyIntegration was null or undefined when calling apiPagerdutyIntegrationsV3Post.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pagerduty-integrations/v3`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockPagerdutyIntegrationV3CreateToJSON(requestParameters.pagerdutyIntegration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Create a PagerdutyIntegration.
     * Create a PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3Post(requestParameters: ApiPagerdutyIntegrationsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an individual PagerdutyIntegration by its ID.
     * Delete an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorDeleteRaw(requestParameters: ApiPagerdutyIntegrationsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiPagerdutyIntegrationsV3SelectorDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pagerduty-integrations/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Delete an individual PagerdutyIntegration by its ID.
     * Delete an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorDelete(requestParameters: ApiPagerdutyIntegrationsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3SelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorGetRaw(requestParameters: ApiPagerdutyIntegrationsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiPagerdutyIntegrationsV3SelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/pagerduty-integrations/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorGet(requestParameters: ApiPagerdutyIntegrationsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an individual PagerdutyIntegration.
     * Edit an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorPatchRaw(requestParameters: ApiPagerdutyIntegrationsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiPagerdutyIntegrationsV3SelectorPatch.');
        }

        if (requestParameters.pagerdutyIntegration === null || requestParameters.pagerdutyIntegration === undefined) {
            throw new runtime.RequiredError('pagerdutyIntegration','Required parameter requestParameters.pagerdutyIntegration was null or undefined when calling apiPagerdutyIntegrationsV3SelectorPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pagerduty-integrations/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockPagerdutyIntegrationV3EditToJSON(requestParameters.pagerdutyIntegration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Edit an individual PagerdutyIntegration.
     * Edit an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorPatch(requestParameters: ApiPagerdutyIntegrationsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List existing PagerdutyIntegration entries, ordered by most recently updated.
     * List PagerdutyIntegration entries
     */
    async apiV2PagerdutyIntegrationsGetRaw(requestParameters: ApiV2PagerdutyIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2controllersPagerdutyIntegration>>> {
        const queryParameters: any = {};

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.pagerdutyID !== undefined) {
            queryParameters['pagerdutyID'] = requestParameters.pagerdutyID;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/pagerduty-integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2controllersPagerdutyIntegrationFromJSON));
    }

    /**
     * List existing PagerdutyIntegration entries, ordered by most recently updated.
     * List PagerdutyIntegration entries
     */
    async apiV2PagerdutyIntegrationsGet(requestParameters: ApiV2PagerdutyIntegrationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2controllersPagerdutyIntegration>> {
        const response = await this.apiV2PagerdutyIntegrationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new PagerdutyIntegration entry. Note that fields are immutable after creation.
     * Create a new PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsPostRaw(requestParameters: ApiV2PagerdutyIntegrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersPagerdutyIntegration>> {
        if (requestParameters.pagerdutyIntegration === null || requestParameters.pagerdutyIntegration === undefined) {
            throw new runtime.RequiredError('pagerdutyIntegration','Required parameter requestParameters.pagerdutyIntegration was null or undefined when calling apiV2PagerdutyIntegrationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/pagerduty-integrations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatablePagerdutyIntegrationToJSON(requestParameters.pagerdutyIntegration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersPagerdutyIntegrationFromJSON(jsonValue));
    }

    /**
     * Create a new PagerdutyIntegration entry. Note that fields are immutable after creation.
     * Create a new PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsPost(requestParameters: ApiV2PagerdutyIntegrationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersPagerdutyIntegration> {
        const response = await this.apiV2PagerdutyIntegrationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing PagerdutyIntegration entry via one of its \"selectors\": \"pd-id/\" + Pagerduty ID or numeric Sherlock ID.
     * Delete a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorDeleteRaw(requestParameters: ApiV2PagerdutyIntegrationsSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersPagerdutyIntegration>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2PagerdutyIntegrationsSelectorDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/pagerduty-integrations/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersPagerdutyIntegrationFromJSON(jsonValue));
    }

    /**
     * Delete an existing PagerdutyIntegration entry via one of its \"selectors\": \"pd-id/\" + Pagerduty ID or numeric Sherlock ID.
     * Delete a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorDelete(requestParameters: ApiV2PagerdutyIntegrationsSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersPagerdutyIntegration> {
        const response = await this.apiV2PagerdutyIntegrationsSelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing PagerdutyIntegration entry via one its \"selectors\": \"pd-id/\" + Pagerduty ID or numeric Sherlock ID.
     * Get a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorGetRaw(requestParameters: ApiV2PagerdutyIntegrationsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersPagerdutyIntegration>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2PagerdutyIntegrationsSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/pagerduty-integrations/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersPagerdutyIntegrationFromJSON(jsonValue));
    }

    /**
     * Get an existing PagerdutyIntegration entry via one its \"selectors\": \"pd-id/\" + Pagerduty ID or numeric Sherlock ID.
     * Get a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorGet(requestParameters: ApiV2PagerdutyIntegrationsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersPagerdutyIntegration> {
        const response = await this.apiV2PagerdutyIntegrationsSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing PagerdutyIntegration entry via one its \"selectors\": \"pd-id/\" + Pagerduty ID or numeric Sherlock ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorPatchRaw(requestParameters: ApiV2PagerdutyIntegrationsSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersPagerdutyIntegration>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2PagerdutyIntegrationsSelectorPatch.');
        }

        if (requestParameters.pagerdutyIntegration === null || requestParameters.pagerdutyIntegration === undefined) {
            throw new runtime.RequiredError('pagerdutyIntegration','Required parameter requestParameters.pagerdutyIntegration was null or undefined when calling apiV2PagerdutyIntegrationsSelectorPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/pagerduty-integrations/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersEditablePagerdutyIntegrationToJSON(requestParameters.pagerdutyIntegration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersPagerdutyIntegrationFromJSON(jsonValue));
    }

    /**
     * Edit an existing PagerdutyIntegration entry via one its \"selectors\": \"pd-id/\" + Pagerduty ID or numeric Sherlock ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorPatch(requestParameters: ApiV2PagerdutyIntegrationsSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersPagerdutyIntegration> {
        const response = await this.apiV2PagerdutyIntegrationsSelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or edit a PagerdutyIntegration entry. Attempts to edit and will attempt to create upon an error. If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
     * Create or edit a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorPutRaw(requestParameters: ApiV2PagerdutyIntegrationsSelectorPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersPagerdutyIntegration>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2PagerdutyIntegrationsSelectorPut.');
        }

        if (requestParameters.pagerdutyIntegration === null || requestParameters.pagerdutyIntegration === undefined) {
            throw new runtime.RequiredError('pagerdutyIntegration','Required parameter requestParameters.pagerdutyIntegration was null or undefined when calling apiV2PagerdutyIntegrationsSelectorPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/pagerduty-integrations/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatablePagerdutyIntegrationToJSON(requestParameters.pagerdutyIntegration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersPagerdutyIntegrationFromJSON(jsonValue));
    }

    /**
     * Create or edit a PagerdutyIntegration entry. Attempts to edit and will attempt to create upon an error. If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
     * Create or edit a PagerdutyIntegration entry
     */
    async apiV2PagerdutyIntegrationsSelectorPut(requestParameters: ApiV2PagerdutyIntegrationsSelectorPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersPagerdutyIntegration> {
        const response = await this.apiV2PagerdutyIntegrationsSelectorPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger an alert via a PagerdutyIntegration itself.
     * Trigger a Pagerduty incident for a given PagerdutyIntegration
     */
    async apiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPostRaw(requestParameters: ApiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagerdutySendAlertResponse>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPost.');
        }

        if (requestParameters.summary === null || requestParameters.summary === undefined) {
            throw new runtime.RequiredError('summary','Required parameter requestParameters.summary was null or undefined when calling apiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/procedures/pagerduty-integrations/trigger-incident/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagerdutyAlertSummaryToJSON(requestParameters.summary),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagerdutySendAlertResponseFromJSON(jsonValue));
    }

    /**
     * Trigger an alert via a PagerdutyIntegration itself.
     * Trigger a Pagerduty incident for a given PagerdutyIntegration
     */
    async apiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPost(requestParameters: ApiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagerdutySendAlertResponse> {
        const response = await this.apiV2ProceduresPagerdutyIntegrationsTriggerIncidentSelectorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a given PagerdutyIntegration selector and provide any other selectors that would match the same PagerdutyIntegration.
     * List PagerdutyIntegration selectors
     */
    async apiV2SelectorsPagerdutyIntegrationsSelectorGetRaw(requestParameters: ApiV2SelectorsPagerdutyIntegrationsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2SelectorsPagerdutyIntegrationsSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/selectors/pagerduty-integrations/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a given PagerdutyIntegration selector and provide any other selectors that would match the same PagerdutyIntegration.
     * List PagerdutyIntegration selectors
     */
    async apiV2SelectorsPagerdutyIntegrationsSelectorGet(requestParameters: ApiV2SelectorsPagerdutyIntegrationsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2SelectorsPagerdutyIntegrationsSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
