/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  PagerdutyAlertSummary,
  PagerdutySendAlertResponse,
  SherlockPagerdutyIntegrationV3,
  SherlockPagerdutyIntegrationV3Create,
  SherlockPagerdutyIntegrationV3Edit,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    PagerdutyAlertSummaryFromJSON,
    PagerdutyAlertSummaryToJSON,
    PagerdutySendAlertResponseFromJSON,
    PagerdutySendAlertResponseToJSON,
    SherlockPagerdutyIntegrationV3FromJSON,
    SherlockPagerdutyIntegrationV3ToJSON,
    SherlockPagerdutyIntegrationV3CreateFromJSON,
    SherlockPagerdutyIntegrationV3CreateToJSON,
    SherlockPagerdutyIntegrationV3EditFromJSON,
    SherlockPagerdutyIntegrationV3EditToJSON,
} from '../models/index';

export interface ApiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRequest {
    selector: string;
    summary: PagerdutyAlertSummary;
}

export interface ApiPagerdutyIntegrationsV3GetRequest {
    createdAt?: Date;
    id?: number;
    name?: string;
    pagerdutyID?: string;
    type?: string;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiPagerdutyIntegrationsV3PostRequest {
    pagerdutyIntegration: SherlockPagerdutyIntegrationV3Create;
}

export interface ApiPagerdutyIntegrationsV3SelectorDeleteRequest {
    selector: string;
}

export interface ApiPagerdutyIntegrationsV3SelectorGetRequest {
    selector: string;
}

export interface ApiPagerdutyIntegrationsV3SelectorPatchRequest {
    selector: string;
    pagerdutyIntegration: SherlockPagerdutyIntegrationV3Edit;
}

/**
 * 
 */
export class PagerdutyIntegrationsApi extends runtime.BaseAPI {

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRaw(requestParameters: ApiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagerdutySendAlertResponse>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPost().'
            );
        }

        if (requestParameters['summary'] == null) {
            throw new runtime.RequiredError(
                'summary',
                'Required parameter "summary" was null or undefined when calling apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/pagerduty-integrations/procedures/v3/trigger-incident/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagerdutyAlertSummaryToJSON(requestParameters['summary']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagerdutySendAlertResponseFromJSON(jsonValue));
    }

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPost(requestParameters: ApiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagerdutySendAlertResponse> {
        const response = await this.apiPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List PagerdutyIntegrations matching a filter.
     * List PagerdutyIntegrations matching a filter
     */
    async apiPagerdutyIntegrationsV3GetRaw(requestParameters: ApiPagerdutyIntegrationsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockPagerdutyIntegrationV3>>> {
        const queryParameters: any = {};

        if (requestParameters['createdAt'] != null) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['pagerdutyID'] != null) {
            queryParameters['pagerdutyID'] = requestParameters['pagerdutyID'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagerduty-integrations/v3`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockPagerdutyIntegrationV3FromJSON));
    }

    /**
     * List PagerdutyIntegrations matching a filter.
     * List PagerdutyIntegrations matching a filter
     */
    async apiPagerdutyIntegrationsV3Get(requestParameters: ApiPagerdutyIntegrationsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockPagerdutyIntegrationV3>> {
        const response = await this.apiPagerdutyIntegrationsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a PagerdutyIntegration. Duplicate Pagerduty IDs will be gracefully handled by editing the existing entry. This is partially opaque because some fields are writable but not readable.
     * Create a PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3PostRaw(requestParameters: ApiPagerdutyIntegrationsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters['pagerdutyIntegration'] == null) {
            throw new runtime.RequiredError(
                'pagerdutyIntegration',
                'Required parameter "pagerdutyIntegration" was null or undefined when calling apiPagerdutyIntegrationsV3Post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/pagerduty-integrations/v3`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockPagerdutyIntegrationV3CreateToJSON(requestParameters['pagerdutyIntegration']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Create a PagerdutyIntegration. Duplicate Pagerduty IDs will be gracefully handled by editing the existing entry. This is partially opaque because some fields are writable but not readable.
     * Create a PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3Post(requestParameters: ApiPagerdutyIntegrationsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an individual PagerdutyIntegration by its ID.
     * Delete an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorDeleteRaw(requestParameters: ApiPagerdutyIntegrationsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiPagerdutyIntegrationsV3SelectorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagerduty-integrations/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Delete an individual PagerdutyIntegration by its ID.
     * Delete an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorDelete(requestParameters: ApiPagerdutyIntegrationsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3SelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorGetRaw(requestParameters: ApiPagerdutyIntegrationsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiPagerdutyIntegrationsV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/pagerduty-integrations/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Get an individual PagerdutyIntegration.
     * Get an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorGet(requestParameters: ApiPagerdutyIntegrationsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an individual PagerdutyIntegration.
     * Edit an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorPatchRaw(requestParameters: ApiPagerdutyIntegrationsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockPagerdutyIntegrationV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiPagerdutyIntegrationsV3SelectorPatch().'
            );
        }

        if (requestParameters['pagerdutyIntegration'] == null) {
            throw new runtime.RequiredError(
                'pagerdutyIntegration',
                'Required parameter "pagerdutyIntegration" was null or undefined when calling apiPagerdutyIntegrationsV3SelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/pagerduty-integrations/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockPagerdutyIntegrationV3EditToJSON(requestParameters['pagerdutyIntegration']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockPagerdutyIntegrationV3FromJSON(jsonValue));
    }

    /**
     * Edit an individual PagerdutyIntegration.
     * Edit an individual PagerdutyIntegration
     */
    async apiPagerdutyIntegrationsV3SelectorPatch(requestParameters: ApiPagerdutyIntegrationsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockPagerdutyIntegrationV3> {
        const response = await this.apiPagerdutyIntegrationsV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
