/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockChartReleaseV3,
  SherlockChartReleaseV3Create,
  SherlockChartReleaseV3Edit,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockChartReleaseV3FromJSON,
    SherlockChartReleaseV3ToJSON,
    SherlockChartReleaseV3CreateFromJSON,
    SherlockChartReleaseV3CreateToJSON,
    SherlockChartReleaseV3EditFromJSON,
    SherlockChartReleaseV3EditToJSON,
} from '../models/index';

export interface ApiChartReleasesV3GetRequest {
    appVersionBranch?: string;
    appVersionCommit?: string;
    appVersionExact?: string;
    appVersionFollowChartRelease?: string;
    appVersionReference?: string;
    appVersionResolver?: ApiChartReleasesV3GetAppVersionResolverEnum;
    chart?: string;
    chartVersionExact?: string;
    chartVersionFollowChartRelease?: string;
    chartVersionReference?: string;
    chartVersionResolver?: ApiChartReleasesV3GetChartVersionResolverEnum;
    cluster?: string;
    createdAt?: Date;
    destinationType?: string;
    environment?: string;
    helmfileRef?: string;
    helmfileRefEnabled?: boolean;
    id?: number;
    includedInBulkChangesets?: boolean;
    name?: string;
    namespace?: string;
    pagerdutyIntegration?: string;
    port?: number;
    protocol?: string;
    resolvedAt?: Date;
    subdomain?: string;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiChartReleasesV3PostRequest {
    chartRelease: SherlockChartReleaseV3Create;
}

export interface ApiChartReleasesV3SelectorDeleteRequest {
    selector: string;
}

export interface ApiChartReleasesV3SelectorGetRequest {
    selector: string;
}

export interface ApiChartReleasesV3SelectorPatchRequest {
    selector: string;
    chartRelease: SherlockChartReleaseV3Edit;
}

/**
 * 
 */
export class ChartReleasesApi extends runtime.BaseAPI {

    /**
     * List ChartReleases matching a filter.
     * List ChartReleases matching a filter
     */
    async apiChartReleasesV3GetRaw(requestParameters: ApiChartReleasesV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockChartReleaseV3>>> {
        const queryParameters: any = {};

        if (runtime.exists(requestParameters, 'appVersionBranch')) {
            queryParameters['appVersionBranch'] = requestParameters['appVersionBranch'];
        }

        if (runtime.exists(requestParameters, 'appVersionCommit')) {
            queryParameters['appVersionCommit'] = requestParameters['appVersionCommit'];
        }

        if (runtime.exists(requestParameters, 'appVersionExact')) {
            queryParameters['appVersionExact'] = requestParameters['appVersionExact'];
        }

        if (runtime.exists(requestParameters, 'appVersionFollowChartRelease')) {
            queryParameters['appVersionFollowChartRelease'] = requestParameters['appVersionFollowChartRelease'];
        }

        if (runtime.exists(requestParameters, 'appVersionReference')) {
            queryParameters['appVersionReference'] = requestParameters['appVersionReference'];
        }

        if (runtime.exists(requestParameters, 'appVersionResolver')) {
            queryParameters['appVersionResolver'] = requestParameters['appVersionResolver'];
        }

        if (runtime.exists(requestParameters, 'chart')) {
            queryParameters['chart'] = requestParameters['chart'];
        }

        if (runtime.exists(requestParameters, 'chartVersionExact')) {
            queryParameters['chartVersionExact'] = requestParameters['chartVersionExact'];
        }

        if (runtime.exists(requestParameters, 'chartVersionFollowChartRelease')) {
            queryParameters['chartVersionFollowChartRelease'] = requestParameters['chartVersionFollowChartRelease'];
        }

        if (runtime.exists(requestParameters, 'chartVersionReference')) {
            queryParameters['chartVersionReference'] = requestParameters['chartVersionReference'];
        }

        if (runtime.exists(requestParameters, 'chartVersionResolver')) {
            queryParameters['chartVersionResolver'] = requestParameters['chartVersionResolver'];
        }

        if (runtime.exists(requestParameters, 'cluster')) {
            queryParameters['cluster'] = requestParameters['cluster'];
        }

        if (runtime.exists(requestParameters, 'createdAt')) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'destinationType')) {
            queryParameters['destinationType'] = requestParameters['destinationType'];
        }

        if (runtime.exists(requestParameters, 'environment')) {
            queryParameters['environment'] = requestParameters['environment'];
        }

        if (runtime.exists(requestParameters, 'helmfileRef')) {
            queryParameters['helmfileRef'] = requestParameters['helmfileRef'];
        }

        if (runtime.exists(requestParameters, 'helmfileRefEnabled')) {
            queryParameters['helmfileRefEnabled'] = requestParameters['helmfileRefEnabled'];
        }

        if (runtime.exists(requestParameters, 'id')) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (runtime.exists(requestParameters, 'includedInBulkChangesets')) {
            queryParameters['includedInBulkChangesets'] = requestParameters['includedInBulkChangesets'];
        }

        if (runtime.exists(requestParameters, 'name')) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (runtime.exists(requestParameters, 'namespace')) {
            queryParameters['namespace'] = requestParameters['namespace'];
        }

        if (runtime.exists(requestParameters, 'pagerdutyIntegration')) {
            queryParameters['pagerdutyIntegration'] = requestParameters['pagerdutyIntegration'];
        }

        if (runtime.exists(requestParameters, 'port')) {
            queryParameters['port'] = requestParameters['port'];
        }

        if (runtime.exists(requestParameters, 'protocol')) {
            queryParameters['protocol'] = requestParameters['protocol'];
        }

        if (runtime.exists(requestParameters, 'resolvedAt')) {
            queryParameters['resolvedAt'] = (requestParameters['resolvedAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'subdomain')) {
            queryParameters['subdomain'] = requestParameters['subdomain'];
        }

        if (runtime.exists(requestParameters, 'updatedAt')) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'limit')) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (runtime.exists(requestParameters, 'offset')) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chart-releases/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockChartReleaseV3FromJSON));
    }

    /**
     * List ChartReleases matching a filter.
     * List ChartReleases matching a filter
     */
    async apiChartReleasesV3Get(requestParameters: ApiChartReleasesV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockChartReleaseV3>> {
        const response = await this.apiChartReleasesV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a ChartRelease.
     * Create a ChartRelease
     */
    async apiChartReleasesV3PostRaw(requestParameters: ApiChartReleasesV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockChartReleaseV3>> {
        if (!runtime.exists(requestParameters, 'chartRelease')) {
            throw new runtime.RequiredError(
                'chartRelease',
                'Required parameter "chartRelease" was null or undefined when calling apiChartReleasesV3Post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/chart-releases/v3`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockChartReleaseV3CreateToJSON(requestParameters['chartRelease']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockChartReleaseV3FromJSON(jsonValue));
    }

    /**
     * Create a ChartRelease.
     * Create a ChartRelease
     */
    async apiChartReleasesV3Post(requestParameters: ApiChartReleasesV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockChartReleaseV3> {
        const response = await this.apiChartReleasesV3PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an individual ChartRelease by its ID.
     * Delete an individual ChartRelease
     */
    async apiChartReleasesV3SelectorDeleteRaw(requestParameters: ApiChartReleasesV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockChartReleaseV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiChartReleasesV3SelectorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chart-releases/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockChartReleaseV3FromJSON(jsonValue));
    }

    /**
     * Delete an individual ChartRelease by its ID.
     * Delete an individual ChartRelease
     */
    async apiChartReleasesV3SelectorDelete(requestParameters: ApiChartReleasesV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockChartReleaseV3> {
        const response = await this.apiChartReleasesV3SelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual ChartRelease.
     * Get an individual ChartRelease
     */
    async apiChartReleasesV3SelectorGetRaw(requestParameters: ApiChartReleasesV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockChartReleaseV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiChartReleasesV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chart-releases/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockChartReleaseV3FromJSON(jsonValue));
    }

    /**
     * Get an individual ChartRelease.
     * Get an individual ChartRelease
     */
    async apiChartReleasesV3SelectorGet(requestParameters: ApiChartReleasesV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockChartReleaseV3> {
        const response = await this.apiChartReleasesV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an individual ChartRelease.
     * Edit an individual ChartRelease
     */
    async apiChartReleasesV3SelectorPatchRaw(requestParameters: ApiChartReleasesV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockChartReleaseV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiChartReleasesV3SelectorPatch().'
            );
        }

        if (!runtime.exists(requestParameters, 'chartRelease')) {
            throw new runtime.RequiredError(
                'chartRelease',
                'Required parameter "chartRelease" was null or undefined when calling apiChartReleasesV3SelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/chart-releases/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockChartReleaseV3EditToJSON(requestParameters['chartRelease']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockChartReleaseV3FromJSON(jsonValue));
    }

    /**
     * Edit an individual ChartRelease.
     * Edit an individual ChartRelease
     */
    async apiChartReleasesV3SelectorPatch(requestParameters: ApiChartReleasesV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockChartReleaseV3> {
        const response = await this.apiChartReleasesV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiChartReleasesV3GetAppVersionResolverEnum = {
    Branch: 'branch',
    Commit: 'commit',
    Exact: 'exact',
    Follow: 'follow',
    None: 'none'
} as const;
export type ApiChartReleasesV3GetAppVersionResolverEnum = typeof ApiChartReleasesV3GetAppVersionResolverEnum[keyof typeof ApiChartReleasesV3GetAppVersionResolverEnum];
/**
 * @export
 */
export const ApiChartReleasesV3GetChartVersionResolverEnum = {
    Latest: 'latest',
    Exact: 'exact',
    Follow: 'follow'
} as const;
export type ApiChartReleasesV3GetChartVersionResolverEnum = typeof ApiChartReleasesV3GetChartVersionResolverEnum[keyof typeof ApiChartReleasesV3GetChartVersionResolverEnum];
