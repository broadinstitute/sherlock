/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  PagerdutyAlertSummary,
  PagerdutySendAlertResponse,
  SherlockChartReleaseV3,
  V2controllersChartRelease,
  V2controllersCreatableChartRelease,
  V2controllersEditableChartRelease,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    PagerdutyAlertSummaryFromJSON,
    PagerdutyAlertSummaryToJSON,
    PagerdutySendAlertResponseFromJSON,
    PagerdutySendAlertResponseToJSON,
    SherlockChartReleaseV3FromJSON,
    SherlockChartReleaseV3ToJSON,
    V2controllersChartReleaseFromJSON,
    V2controllersChartReleaseToJSON,
    V2controllersCreatableChartReleaseFromJSON,
    V2controllersCreatableChartReleaseToJSON,
    V2controllersEditableChartReleaseFromJSON,
    V2controllersEditableChartReleaseToJSON,
} from '../models/index';

export interface ApiChartReleasesV3GetRequest {
    appVersionBranch?: string;
    appVersionCommit?: string;
    appVersionExact?: string;
    appVersionFollowChartRelease?: string;
    appVersionReference?: string;
    appVersionResolver?: ApiChartReleasesV3GetAppVersionResolverEnum;
    chart?: string;
    chartVersionExact?: string;
    chartVersionFollowChartRelease?: string;
    chartVersionReference?: string;
    chartVersionResolver?: ApiChartReleasesV3GetChartVersionResolverEnum;
    cluster?: string;
    createdAt?: Date;
    destinationType?: string;
    environment?: string;
    firecloudDevelopRef?: string;
    helmfileRef?: string;
    helmfileRefEnabled?: boolean;
    id?: number;
    includedInBulkChangesets?: boolean;
    name?: string;
    namespace?: string;
    pagerdutyIntegration?: string;
    port?: number;
    protocol?: string;
    resolvedAt?: Date;
    subdomain?: string;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiChartReleasesV3SelectorGetRequest {
    selector: string;
}

export interface ApiV2ChartReleasesGetRequest {
    appVersionBranch?: string;
    appVersionCommit?: string;
    appVersionExact?: string;
    appVersionFollowChartRelease?: string;
    appVersionReference?: string;
    appVersionResolver?: ApiV2ChartReleasesGetAppVersionResolverEnum;
    chart?: string;
    chartVersionExact?: string;
    chartVersionFollowChartRelease?: string;
    chartVersionReference?: string;
    chartVersionResolver?: ApiV2ChartReleasesGetChartVersionResolverEnum;
    cluster?: string;
    createdAt?: Date;
    destinationType?: string;
    environment?: string;
    firecloudDevelopRef?: string;
    helmfileRef?: string;
    helmfileRefEnabled?: boolean;
    id?: number;
    includedInBulkChangesets?: boolean;
    name?: string;
    namespace?: string;
    pagerdutyIntegration?: string;
    port?: number;
    protocol?: string;
    subdomain?: string;
    updatedAt?: Date;
    limit?: number;
}

export interface ApiV2ChartReleasesPostRequest {
    chartRelease: V2controllersCreatableChartRelease;
}

export interface ApiV2ChartReleasesSelectorDeleteRequest {
    selector: string;
}

export interface ApiV2ChartReleasesSelectorGetRequest {
    selector: string;
}

export interface ApiV2ChartReleasesSelectorPatchRequest {
    selector: string;
    chartRelease: V2controllersEditableChartRelease;
}

export interface ApiV2ChartReleasesSelectorPutRequest {
    selector: string;
    chartRelease: V2controllersCreatableChartRelease;
}

export interface ApiV2ProceduresChartReleasesTriggerIncidentSelectorPostRequest {
    selector: string;
    summary: PagerdutyAlertSummary;
}

export interface ApiV2SelectorsChartReleasesSelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class ChartReleasesApi extends runtime.BaseAPI {

    /**
     * List ChartReleases matching a filter.
     * List ChartReleases matching a filter
     */
    async apiChartReleasesV3GetRaw(requestParameters: ApiChartReleasesV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockChartReleaseV3>>> {
        const queryParameters: any = {};

        if (requestParameters.appVersionBranch !== undefined) {
            queryParameters['appVersionBranch'] = requestParameters.appVersionBranch;
        }

        if (requestParameters.appVersionCommit !== undefined) {
            queryParameters['appVersionCommit'] = requestParameters.appVersionCommit;
        }

        if (requestParameters.appVersionExact !== undefined) {
            queryParameters['appVersionExact'] = requestParameters.appVersionExact;
        }

        if (requestParameters.appVersionFollowChartRelease !== undefined) {
            queryParameters['appVersionFollowChartRelease'] = requestParameters.appVersionFollowChartRelease;
        }

        if (requestParameters.appVersionReference !== undefined) {
            queryParameters['appVersionReference'] = requestParameters.appVersionReference;
        }

        if (requestParameters.appVersionResolver !== undefined) {
            queryParameters['appVersionResolver'] = requestParameters.appVersionResolver;
        }

        if (requestParameters.chart !== undefined) {
            queryParameters['chart'] = requestParameters.chart;
        }

        if (requestParameters.chartVersionExact !== undefined) {
            queryParameters['chartVersionExact'] = requestParameters.chartVersionExact;
        }

        if (requestParameters.chartVersionFollowChartRelease !== undefined) {
            queryParameters['chartVersionFollowChartRelease'] = requestParameters.chartVersionFollowChartRelease;
        }

        if (requestParameters.chartVersionReference !== undefined) {
            queryParameters['chartVersionReference'] = requestParameters.chartVersionReference;
        }

        if (requestParameters.chartVersionResolver !== undefined) {
            queryParameters['chartVersionResolver'] = requestParameters.chartVersionResolver;
        }

        if (requestParameters.cluster !== undefined) {
            queryParameters['cluster'] = requestParameters.cluster;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.destinationType !== undefined) {
            queryParameters['destinationType'] = requestParameters.destinationType;
        }

        if (requestParameters.environment !== undefined) {
            queryParameters['environment'] = requestParameters.environment;
        }

        if (requestParameters.firecloudDevelopRef !== undefined) {
            queryParameters['firecloudDevelopRef'] = requestParameters.firecloudDevelopRef;
        }

        if (requestParameters.helmfileRef !== undefined) {
            queryParameters['helmfileRef'] = requestParameters.helmfileRef;
        }

        if (requestParameters.helmfileRefEnabled !== undefined) {
            queryParameters['helmfileRefEnabled'] = requestParameters.helmfileRefEnabled;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.includedInBulkChangesets !== undefined) {
            queryParameters['includedInBulkChangesets'] = requestParameters.includedInBulkChangesets;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        if (requestParameters.pagerdutyIntegration !== undefined) {
            queryParameters['pagerdutyIntegration'] = requestParameters.pagerdutyIntegration;
        }

        if (requestParameters.port !== undefined) {
            queryParameters['port'] = requestParameters.port;
        }

        if (requestParameters.protocol !== undefined) {
            queryParameters['protocol'] = requestParameters.protocol;
        }

        if (requestParameters.resolvedAt !== undefined) {
            queryParameters['resolvedAt'] = (requestParameters.resolvedAt as any).toISOString();
        }

        if (requestParameters.subdomain !== undefined) {
            queryParameters['subdomain'] = requestParameters.subdomain;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chart-releases/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockChartReleaseV3FromJSON));
    }

    /**
     * List ChartReleases matching a filter.
     * List ChartReleases matching a filter
     */
    async apiChartReleasesV3Get(requestParameters: ApiChartReleasesV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockChartReleaseV3>> {
        const response = await this.apiChartReleasesV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual ChartRelease.
     * Get an individual ChartRelease
     */
    async apiChartReleasesV3SelectorGetRaw(requestParameters: ApiChartReleasesV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockChartReleaseV3>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiChartReleasesV3SelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chart-releases/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockChartReleaseV3FromJSON(jsonValue));
    }

    /**
     * Get an individual ChartRelease.
     * Get an individual ChartRelease
     */
    async apiChartReleasesV3SelectorGet(requestParameters: ApiChartReleasesV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockChartReleaseV3> {
        const response = await this.apiChartReleasesV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * List ChartRelease entries
     */
    async apiV2ChartReleasesGetRaw(requestParameters: ApiV2ChartReleasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2controllersChartRelease>>> {
        const queryParameters: any = {};

        if (requestParameters.appVersionBranch !== undefined) {
            queryParameters['appVersionBranch'] = requestParameters.appVersionBranch;
        }

        if (requestParameters.appVersionCommit !== undefined) {
            queryParameters['appVersionCommit'] = requestParameters.appVersionCommit;
        }

        if (requestParameters.appVersionExact !== undefined) {
            queryParameters['appVersionExact'] = requestParameters.appVersionExact;
        }

        if (requestParameters.appVersionFollowChartRelease !== undefined) {
            queryParameters['appVersionFollowChartRelease'] = requestParameters.appVersionFollowChartRelease;
        }

        if (requestParameters.appVersionReference !== undefined) {
            queryParameters['appVersionReference'] = requestParameters.appVersionReference;
        }

        if (requestParameters.appVersionResolver !== undefined) {
            queryParameters['appVersionResolver'] = requestParameters.appVersionResolver;
        }

        if (requestParameters.chart !== undefined) {
            queryParameters['chart'] = requestParameters.chart;
        }

        if (requestParameters.chartVersionExact !== undefined) {
            queryParameters['chartVersionExact'] = requestParameters.chartVersionExact;
        }

        if (requestParameters.chartVersionFollowChartRelease !== undefined) {
            queryParameters['chartVersionFollowChartRelease'] = requestParameters.chartVersionFollowChartRelease;
        }

        if (requestParameters.chartVersionReference !== undefined) {
            queryParameters['chartVersionReference'] = requestParameters.chartVersionReference;
        }

        if (requestParameters.chartVersionResolver !== undefined) {
            queryParameters['chartVersionResolver'] = requestParameters.chartVersionResolver;
        }

        if (requestParameters.cluster !== undefined) {
            queryParameters['cluster'] = requestParameters.cluster;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.destinationType !== undefined) {
            queryParameters['destinationType'] = requestParameters.destinationType;
        }

        if (requestParameters.environment !== undefined) {
            queryParameters['environment'] = requestParameters.environment;
        }

        if (requestParameters.firecloudDevelopRef !== undefined) {
            queryParameters['firecloudDevelopRef'] = requestParameters.firecloudDevelopRef;
        }

        if (requestParameters.helmfileRef !== undefined) {
            queryParameters['helmfileRef'] = requestParameters.helmfileRef;
        }

        if (requestParameters.helmfileRefEnabled !== undefined) {
            queryParameters['helmfileRefEnabled'] = requestParameters.helmfileRefEnabled;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.includedInBulkChangesets !== undefined) {
            queryParameters['includedInBulkChangesets'] = requestParameters.includedInBulkChangesets;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        if (requestParameters.pagerdutyIntegration !== undefined) {
            queryParameters['pagerdutyIntegration'] = requestParameters.pagerdutyIntegration;
        }

        if (requestParameters.port !== undefined) {
            queryParameters['port'] = requestParameters.port;
        }

        if (requestParameters.protocol !== undefined) {
            queryParameters['protocol'] = requestParameters.protocol;
        }

        if (requestParameters.subdomain !== undefined) {
            queryParameters['subdomain'] = requestParameters.subdomain;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-releases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2controllersChartReleaseFromJSON));
    }

    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * List ChartRelease entries
     */
    async apiV2ChartReleasesGet(requestParameters: ApiV2ChartReleasesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2controllersChartRelease>> {
        const response = await this.apiV2ChartReleasesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new ChartRelease entry
     */
    async apiV2ChartReleasesPostRaw(requestParameters: ApiV2ChartReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.chartRelease === null || requestParameters.chartRelease === undefined) {
            throw new runtime.RequiredError('chartRelease','Required parameter requestParameters.chartRelease was null or undefined when calling apiV2ChartReleasesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chart-releases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableChartReleaseToJSON(requestParameters.chartRelease),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new ChartRelease entry
     */
    async apiV2ChartReleasesPost(requestParameters: ApiV2ChartReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Delete a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorDeleteRaw(requestParameters: ApiV2ChartReleasesSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Delete a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorDelete(requestParameters: ApiV2ChartReleasesSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Get a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorGetRaw(requestParameters: ApiV2ChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Get a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorGet(requestParameters: ApiV2ChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorPatchRaw(requestParameters: ApiV2ChartReleasesSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorPatch.');
        }

        if (requestParameters.chartRelease === null || requestParameters.chartRelease === undefined) {
            throw new runtime.RequiredError('chartRelease','Required parameter requestParameters.chartRelease was null or undefined when calling apiV2ChartReleasesSelectorPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersEditableChartReleaseToJSON(requestParameters.chartRelease),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorPatch(requestParameters: ApiV2ChartReleasesSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or edit a ChartRelease entry. Attempts to edit and will attempt to create upon an error. If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
     * Create or edit a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorPutRaw(requestParameters: ApiV2ChartReleasesSelectorPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorPut.');
        }

        if (requestParameters.chartRelease === null || requestParameters.chartRelease === undefined) {
            throw new runtime.RequiredError('chartRelease','Required parameter requestParameters.chartRelease was null or undefined when calling apiV2ChartReleasesSelectorPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableChartReleaseToJSON(requestParameters.chartRelease),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Create or edit a ChartRelease entry. Attempts to edit and will attempt to create upon an error. If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
     * Create or edit a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorPut(requestParameters: ApiV2ChartReleasesSelectorPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger an alert for the Pagerduty integration configured for a given ChartRelease.
     * Trigger a Pagerduty incident for a given ChartRelease
     */
    async apiV2ProceduresChartReleasesTriggerIncidentSelectorPostRaw(requestParameters: ApiV2ProceduresChartReleasesTriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagerdutySendAlertResponse>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ProceduresChartReleasesTriggerIncidentSelectorPost.');
        }

        if (requestParameters.summary === null || requestParameters.summary === undefined) {
            throw new runtime.RequiredError('summary','Required parameter requestParameters.summary was null or undefined when calling apiV2ProceduresChartReleasesTriggerIncidentSelectorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/procedures/chart-releases/trigger-incident/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagerdutyAlertSummaryToJSON(requestParameters.summary),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagerdutySendAlertResponseFromJSON(jsonValue));
    }

    /**
     * Trigger an alert for the Pagerduty integration configured for a given ChartRelease.
     * Trigger a Pagerduty incident for a given ChartRelease
     */
    async apiV2ProceduresChartReleasesTriggerIncidentSelectorPost(requestParameters: ApiV2ProceduresChartReleasesTriggerIncidentSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagerdutySendAlertResponse> {
        const response = await this.apiV2ProceduresChartReleasesTriggerIncidentSelectorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * List ChartRelease selectors
     */
    async apiV2SelectorsChartReleasesSelectorGetRaw(requestParameters: ApiV2SelectorsChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2SelectorsChartReleasesSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/selectors/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * List ChartRelease selectors
     */
    async apiV2SelectorsChartReleasesSelectorGet(requestParameters: ApiV2SelectorsChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2SelectorsChartReleasesSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiChartReleasesV3GetAppVersionResolverEnum = {
    Branch: 'branch',
    Commit: 'commit',
    Exact: 'exact',
    Follow: 'follow',
    None: 'none'
} as const;
export type ApiChartReleasesV3GetAppVersionResolverEnum = typeof ApiChartReleasesV3GetAppVersionResolverEnum[keyof typeof ApiChartReleasesV3GetAppVersionResolverEnum];
/**
 * @export
 */
export const ApiChartReleasesV3GetChartVersionResolverEnum = {
    Latest: 'latest',
    Exact: 'exact',
    Follow: 'follow'
} as const;
export type ApiChartReleasesV3GetChartVersionResolverEnum = typeof ApiChartReleasesV3GetChartVersionResolverEnum[keyof typeof ApiChartReleasesV3GetChartVersionResolverEnum];
/**
 * @export
 */
export const ApiV2ChartReleasesGetAppVersionResolverEnum = {
    Branch: 'branch',
    Commit: 'commit',
    Exact: 'exact',
    Follow: 'follow',
    None: 'none'
} as const;
export type ApiV2ChartReleasesGetAppVersionResolverEnum = typeof ApiV2ChartReleasesGetAppVersionResolverEnum[keyof typeof ApiV2ChartReleasesGetAppVersionResolverEnum];
/**
 * @export
 */
export const ApiV2ChartReleasesGetChartVersionResolverEnum = {
    Latest: 'latest',
    Exact: 'exact',
    Follow: 'follow'
} as const;
export type ApiV2ChartReleasesGetChartVersionResolverEnum = typeof ApiV2ChartReleasesGetChartVersionResolverEnum[keyof typeof ApiV2ChartReleasesGetChartVersionResolverEnum];
