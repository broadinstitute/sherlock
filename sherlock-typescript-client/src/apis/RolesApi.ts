/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockRoleV3,
  SherlockRoleV3Edit,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockRoleV3FromJSON,
    SherlockRoleV3ToJSON,
    SherlockRoleV3EditFromJSON,
    SherlockRoleV3EditToJSON,
} from '../models/index';

export interface ApiRolesV3GetRequest {
    autoAssignAllUsers?: boolean;
    canBeGlassBrokenByRole?: number;
    createdAt?: Date;
    defaultGlassBreakDuration?: string;
    grantsBroadInstituteGroup?: string;
    grantsDevAzureAccount?: boolean;
    grantsDevAzureDirectoryRoles?: boolean;
    grantsDevAzureGroup?: string;
    grantsDevFirecloudFolderOwner?: string;
    grantsDevFirecloudGroup?: string;
    grantsProdAzureAccount?: boolean;
    grantsProdAzureDirectoryRoles?: boolean;
    grantsProdAzureGroup?: string;
    grantsProdFirecloudFolderOwner?: string;
    grantsProdFirecloudGroup?: string;
    grantsQaFirecloudFolderOwner?: string;
    grantsQaFirecloudGroup?: string;
    grantsSherlockSuperAdmin?: boolean;
    id?: number;
    name?: string;
    suspendNonSuitableUsers?: boolean;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiRolesV3PostRequest {
    role: SherlockRoleV3Edit;
}

export interface ApiRolesV3SelectorDeleteRequest {
    selector: string;
}

export interface ApiRolesV3SelectorGetRequest {
    selector: string;
}

export interface ApiRolesV3SelectorPatchRequest {
    selector: string;
    role: SherlockRoleV3Edit;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * List Roles matching a filter.
     * List Roles matching a filter
     */
    async apiRolesV3GetRaw(requestParameters: ApiRolesV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockRoleV3>>> {
        const queryParameters: any = {};

        if (requestParameters['autoAssignAllUsers'] != null) {
            queryParameters['autoAssignAllUsers'] = requestParameters['autoAssignAllUsers'];
        }

        if (requestParameters['canBeGlassBrokenByRole'] != null) {
            queryParameters['canBeGlassBrokenByRole'] = requestParameters['canBeGlassBrokenByRole'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['defaultGlassBreakDuration'] != null) {
            queryParameters['defaultGlassBreakDuration'] = requestParameters['defaultGlassBreakDuration'];
        }

        if (requestParameters['grantsBroadInstituteGroup'] != null) {
            queryParameters['grantsBroadInstituteGroup'] = requestParameters['grantsBroadInstituteGroup'];
        }

        if (requestParameters['grantsDevAzureAccount'] != null) {
            queryParameters['grantsDevAzureAccount'] = requestParameters['grantsDevAzureAccount'];
        }

        if (requestParameters['grantsDevAzureDirectoryRoles'] != null) {
            queryParameters['grantsDevAzureDirectoryRoles'] = requestParameters['grantsDevAzureDirectoryRoles'];
        }

        if (requestParameters['grantsDevAzureGroup'] != null) {
            queryParameters['grantsDevAzureGroup'] = requestParameters['grantsDevAzureGroup'];
        }

        if (requestParameters['grantsDevFirecloudFolderOwner'] != null) {
            queryParameters['grantsDevFirecloudFolderOwner'] = requestParameters['grantsDevFirecloudFolderOwner'];
        }

        if (requestParameters['grantsDevFirecloudGroup'] != null) {
            queryParameters['grantsDevFirecloudGroup'] = requestParameters['grantsDevFirecloudGroup'];
        }

        if (requestParameters['grantsProdAzureAccount'] != null) {
            queryParameters['grantsProdAzureAccount'] = requestParameters['grantsProdAzureAccount'];
        }

        if (requestParameters['grantsProdAzureDirectoryRoles'] != null) {
            queryParameters['grantsProdAzureDirectoryRoles'] = requestParameters['grantsProdAzureDirectoryRoles'];
        }

        if (requestParameters['grantsProdAzureGroup'] != null) {
            queryParameters['grantsProdAzureGroup'] = requestParameters['grantsProdAzureGroup'];
        }

        if (requestParameters['grantsProdFirecloudFolderOwner'] != null) {
            queryParameters['grantsProdFirecloudFolderOwner'] = requestParameters['grantsProdFirecloudFolderOwner'];
        }

        if (requestParameters['grantsProdFirecloudGroup'] != null) {
            queryParameters['grantsProdFirecloudGroup'] = requestParameters['grantsProdFirecloudGroup'];
        }

        if (requestParameters['grantsQaFirecloudFolderOwner'] != null) {
            queryParameters['grantsQaFirecloudFolderOwner'] = requestParameters['grantsQaFirecloudFolderOwner'];
        }

        if (requestParameters['grantsQaFirecloudGroup'] != null) {
            queryParameters['grantsQaFirecloudGroup'] = requestParameters['grantsQaFirecloudGroup'];
        }

        if (requestParameters['grantsSherlockSuperAdmin'] != null) {
            queryParameters['grantsSherlockSuperAdmin'] = requestParameters['grantsSherlockSuperAdmin'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['suspendNonSuitableUsers'] != null) {
            queryParameters['suspendNonSuitableUsers'] = requestParameters['suspendNonSuitableUsers'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/roles/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockRoleV3FromJSON));
    }

    /**
     * List Roles matching a filter.
     * List Roles matching a filter
     */
    async apiRolesV3Get(requestParameters: ApiRolesV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockRoleV3>> {
        const response = await this.apiRolesV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an individual Role with no one assigned to it. Only super-admins may mutate Roles. Propagation will be triggered after this operation.
     * Create a Role
     */
    async apiRolesV3PostRaw(requestParameters: ApiRolesV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleV3>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling apiRolesV3Post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/roles/v3`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockRoleV3EditToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleV3FromJSON(jsonValue));
    }

    /**
     * Create an individual Role with no one assigned to it. Only super-admins may mutate Roles. Propagation will be triggered after this operation.
     * Create a Role
     */
    async apiRolesV3Post(requestParameters: ApiRolesV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleV3> {
        const response = await this.apiRolesV3PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an individual Role. Only super-admins may mutate Roles. Propagation will NOT be triggered after this operation -- the grants will become un-managed by Sherlock and left as-is. Remove role assignments first to remove users from grants.
     * Delete a Role
     */
    async apiRolesV3SelectorDeleteRaw(requestParameters: ApiRolesV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiRolesV3SelectorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/roles/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleV3FromJSON(jsonValue));
    }

    /**
     * Delete an individual Role. Only super-admins may mutate Roles. Propagation will NOT be triggered after this operation -- the grants will become un-managed by Sherlock and left as-is. Remove role assignments first to remove users from grants.
     * Delete a Role
     */
    async apiRolesV3SelectorDelete(requestParameters: ApiRolesV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleV3> {
        const response = await this.apiRolesV3SelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual Role and the Users assigned to it.
     * Get a Role
     */
    async apiRolesV3SelectorGetRaw(requestParameters: ApiRolesV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiRolesV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/roles/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleV3FromJSON(jsonValue));
    }

    /**
     * Get an individual Role and the Users assigned to it.
     * Get a Role
     */
    async apiRolesV3SelectorGet(requestParameters: ApiRolesV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleV3> {
        const response = await this.apiRolesV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an individual Role. Only super-admins may mutate Roles. Propagation will be triggered after this operation.
     * Edit a Role
     */
    async apiRolesV3SelectorPatchRaw(requestParameters: ApiRolesV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiRolesV3SelectorPatch().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling apiRolesV3SelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/roles/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockRoleV3EditToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleV3FromJSON(jsonValue));
    }

    /**
     * Edit an individual Role. Only super-admins may mutate Roles. Propagation will be triggered after this operation.
     * Edit a Role
     */
    async apiRolesV3SelectorPatch(requestParameters: ApiRolesV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleV3> {
        const response = await this.apiRolesV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
