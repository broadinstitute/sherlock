/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockAppVersionV3,
  SherlockAppVersionV3ChangelogResponse,
  SherlockAppVersionV3Create,
  SherlockAppVersionV3Edit,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockAppVersionV3FromJSON,
    SherlockAppVersionV3ToJSON,
    SherlockAppVersionV3ChangelogResponseFromJSON,
    SherlockAppVersionV3ChangelogResponseToJSON,
    SherlockAppVersionV3CreateFromJSON,
    SherlockAppVersionV3CreateToJSON,
    SherlockAppVersionV3EditFromJSON,
    SherlockAppVersionV3EditToJSON,
} from '../models/index';

export interface ApiAppVersionsProceduresV3ChangelogGetRequest {
    child: string;
    parent: string;
}

export interface ApiAppVersionsV3GetRequest {
    appVersion?: string;
    authoredBy?: string;
    chart?: string;
    createdAt?: Date;
    description?: string;
    gitBranch?: string;
    gitCommit?: string;
    id?: number;
    parentAppVersion?: string;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiAppVersionsV3PutRequest {
    appVersion: SherlockAppVersionV3Create;
}

export interface ApiAppVersionsV3SelectorGetRequest {
    selector: string;
}

export interface ApiAppVersionsV3SelectorPatchRequest {
    selector: string;
    appVersion: SherlockAppVersionV3Edit;
}

/**
 * 
 */
export class AppVersionsApi extends runtime.BaseAPI {

    /**
     * Get the path through parent references from a child AppVersion (inclusive) to a parent AppVersion (exclusive), if possible. Because parent references point from newer children to older parents, the newer AppVersion should be the child. The result will always exclude the parent.
     * Get a changelog between two AppVersions
     */
    async apiAppVersionsProceduresV3ChangelogGetRaw(requestParameters: ApiAppVersionsProceduresV3ChangelogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockAppVersionV3ChangelogResponse>> {
        if (requestParameters['child'] == null) {
            throw new runtime.RequiredError(
                'child',
                'Required parameter "child" was null or undefined when calling apiAppVersionsProceduresV3ChangelogGet().'
            );
        }

        if (requestParameters['parent'] == null) {
            throw new runtime.RequiredError(
                'parent',
                'Required parameter "parent" was null or undefined when calling apiAppVersionsProceduresV3ChangelogGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['child'] != null) {
            queryParameters['child'] = requestParameters['child'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/app-versions/procedures/v3/changelog`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockAppVersionV3ChangelogResponseFromJSON(jsonValue));
    }

    /**
     * Get the path through parent references from a child AppVersion (inclusive) to a parent AppVersion (exclusive), if possible. Because parent references point from newer children to older parents, the newer AppVersion should be the child. The result will always exclude the parent.
     * Get a changelog between two AppVersions
     */
    async apiAppVersionsProceduresV3ChangelogGet(requestParameters: ApiAppVersionsProceduresV3ChangelogGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockAppVersionV3ChangelogResponse> {
        const response = await this.apiAppVersionsProceduresV3ChangelogGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List AppVersions matching a filter.
     * List AppVersions matching a filter
     */
    async apiAppVersionsV3GetRaw(requestParameters: ApiAppVersionsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockAppVersionV3>>> {
        const queryParameters: any = {};

        if (requestParameters['appVersion'] != null) {
            queryParameters['appVersion'] = requestParameters['appVersion'];
        }

        if (requestParameters['authoredBy'] != null) {
            queryParameters['authoredBy'] = requestParameters['authoredBy'];
        }

        if (requestParameters['chart'] != null) {
            queryParameters['chart'] = requestParameters['chart'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['gitBranch'] != null) {
            queryParameters['gitBranch'] = requestParameters['gitBranch'];
        }

        if (requestParameters['gitCommit'] != null) {
            queryParameters['gitCommit'] = requestParameters['gitCommit'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['parentAppVersion'] != null) {
            queryParameters['parentAppVersion'] = requestParameters['parentAppVersion'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/app-versions/v3`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockAppVersionV3FromJSON));
    }

    /**
     * List AppVersions matching a filter.
     * List AppVersions matching a filter
     */
    async apiAppVersionsV3Get(requestParameters: ApiAppVersionsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockAppVersionV3>> {
        const response = await this.apiAppVersionsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert a AppVersion.
     * Upsert a AppVersion
     */
    async apiAppVersionsV3PutRaw(requestParameters: ApiAppVersionsV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockAppVersionV3>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling apiAppVersionsV3Put().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/app-versions/v3`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockAppVersionV3CreateToJSON(requestParameters['appVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockAppVersionV3FromJSON(jsonValue));
    }

    /**
     * Upsert a AppVersion.
     * Upsert a AppVersion
     */
    async apiAppVersionsV3Put(requestParameters: ApiAppVersionsV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockAppVersionV3> {
        const response = await this.apiAppVersionsV3PutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual AppVersion.
     * Get an individual AppVersion
     */
    async apiAppVersionsV3SelectorGetRaw(requestParameters: ApiAppVersionsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockAppVersionV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiAppVersionsV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/app-versions/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockAppVersionV3FromJSON(jsonValue));
    }

    /**
     * Get an individual AppVersion.
     * Get an individual AppVersion
     */
    async apiAppVersionsV3SelectorGet(requestParameters: ApiAppVersionsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockAppVersionV3> {
        const response = await this.apiAppVersionsV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an individual AppVersion.
     * Edit an individual AppVersion
     */
    async apiAppVersionsV3SelectorPatchRaw(requestParameters: ApiAppVersionsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockAppVersionV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiAppVersionsV3SelectorPatch().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling apiAppVersionsV3SelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/app-versions/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockAppVersionV3EditToJSON(requestParameters['appVersion']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockAppVersionV3FromJSON(jsonValue));
    }

    /**
     * Edit an individual AppVersion.
     * Edit an individual AppVersion
     */
    async apiAppVersionsV3SelectorPatch(requestParameters: ApiAppVersionsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockAppVersionV3> {
        const response = await this.apiAppVersionsV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
