/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockGitCommitV3,
  SherlockGitCommitV3Upsert,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockGitCommitV3FromJSON,
    SherlockGitCommitV3ToJSON,
    SherlockGitCommitV3UpsertFromJSON,
    SherlockGitCommitV3UpsertToJSON,
} from '../models/index';

export interface ApiGitCommitsV3PutRequest {
    gitCommit: SherlockGitCommitV3Upsert;
}

/**
 * 
 */
export class GitCommitsApi extends runtime.BaseAPI {

    /**
     * Upsert a GitCommit.
     * Upsert a GitCommit
     */
    async apiGitCommitsV3PutRaw(requestParameters: ApiGitCommitsV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockGitCommitV3>> {
        if (requestParameters.gitCommit === null || requestParameters.gitCommit === undefined) {
            throw new runtime.RequiredError('gitCommit','Required parameter requestParameters.gitCommit was null or undefined when calling apiGitCommitsV3Put.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/git-commits/v3`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockGitCommitV3UpsertToJSON(requestParameters.gitCommit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockGitCommitV3FromJSON(jsonValue));
    }

    /**
     * Upsert a GitCommit.
     * Upsert a GitCommit
     */
    async apiGitCommitsV3Put(requestParameters: ApiGitCommitsV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockGitCommitV3> {
        const response = await this.apiGitCommitsV3PutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
