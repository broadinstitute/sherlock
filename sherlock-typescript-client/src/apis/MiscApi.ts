/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MiscConnectionCheckResponse,
  MiscStatusResponse,
  MiscVersionResponse,
} from '../models/index';
import {
    MiscConnectionCheckResponseFromJSON,
    MiscConnectionCheckResponseToJSON,
    MiscStatusResponseFromJSON,
    MiscStatusResponseToJSON,
    MiscVersionResponseFromJSON,
    MiscVersionResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class MiscApi extends runtime.BaseAPI {

    /**
     * Get a static response from Sherlock to verify connection through proxies like IAP.
     * Test the client\'s connection to Sherlock
     */
    async connectionCheckGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MiscConnectionCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/connection-check`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MiscConnectionCheckResponseFromJSON(jsonValue));
    }

    /**
     * Get a static response from Sherlock to verify connection through proxies like IAP.
     * Test the client\'s connection to Sherlock
     */
    async connectionCheckGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MiscConnectionCheckResponse> {
        const response = await this.connectionCheckGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Sherlock\'s current status. Right now, this endpoint always returned OK (if the server is online). This endpoint is acceptable to use for a readiness check.
     * Get Sherlock\'s current status
     */
    async statusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MiscStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MiscStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get Sherlock\'s current status. Right now, this endpoint always returned OK (if the server is online). This endpoint is acceptable to use for a readiness check.
     * Get Sherlock\'s current status
     */
    async statusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MiscStatusResponse> {
        const response = await this.statusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the build version of this Sherlock instance.
     * Get Sherlock\'s own current version
     */
    async versionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MiscVersionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MiscVersionResponseFromJSON(jsonValue));
    }

    /**
     * Get the build version of this Sherlock instance.
     * Get Sherlock\'s own current version
     */
    async versionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MiscVersionResponse> {
        const response = await this.versionGetRaw(initOverrides);
        return await response.value();
    }

}
