/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockServiceAlertV3,
  SherlockServiceAlertV3Create,
  SherlockServiceAlertV3EditableFields,
  SherlockServiceAlertV3SyncRequest,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockServiceAlertV3FromJSON,
    SherlockServiceAlertV3ToJSON,
    SherlockServiceAlertV3CreateFromJSON,
    SherlockServiceAlertV3CreateToJSON,
    SherlockServiceAlertV3EditableFieldsFromJSON,
    SherlockServiceAlertV3EditableFieldsToJSON,
    SherlockServiceAlertV3SyncRequestFromJSON,
    SherlockServiceAlertV3SyncRequestToJSON,
} from '../models/index';

export interface ApiServiceAlertsProceduresV3SyncPostRequest {
    environment: SherlockServiceAlertV3SyncRequest;
}

export interface ApiServiceAlertsV3GetRequest {
    createdAt?: Date;
    createdBy?: string;
    deltedBy?: string;
    id?: number;
    link?: string;
    message?: string;
    onEnvironment?: string;
    severity?: ApiServiceAlertsV3GetSeverityEnum;
    title?: string;
    updatedAt?: Date;
    updatedBy?: string;
    uuid?: string;
    limit?: number;
    offset?: number;
    includeDeleted?: boolean;
}

export interface ApiServiceAlertsV3PostRequest {
    serviceAlert: SherlockServiceAlertV3Create;
}

export interface ApiServiceAlertsV3SelectorDeleteRequest {
    selector: string;
}

export interface ApiServiceAlertsV3SelectorGetRequest {
    selector: string;
    includeDeleted?: boolean;
}

export interface ApiServiceAlertsV3SelectorPatchRequest {
    selector: string;
    serviceAlert: SherlockServiceAlertV3EditableFields;
}

/**
 * 
 */
export class ServiceAlertApi extends runtime.BaseAPI {

    /**
     * Method to get all currently active service alerts from Sherlock\'s DB and ensure that the service alert json files placed in Google Buckets for Terra match.
     * Sync service alerts
     */
    async apiServiceAlertsProceduresV3SyncPostRaw(requestParameters: ApiServiceAlertsProceduresV3SyncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockServiceAlertV3>>> {
        if (requestParameters['environment'] == null) {
            throw new runtime.RequiredError(
                'environment',
                'Required parameter "environment" was null or undefined when calling apiServiceAlertsProceduresV3SyncPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/service-alerts/procedures/v3/sync`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockServiceAlertV3SyncRequestToJSON(requestParameters['environment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockServiceAlertV3FromJSON));
    }

    /**
     * Method to get all currently active service alerts from Sherlock\'s DB and ensure that the service alert json files placed in Google Buckets for Terra match.
     * Sync service alerts
     */
    async apiServiceAlertsProceduresV3SyncPost(requestParameters: ApiServiceAlertsProceduresV3SyncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockServiceAlertV3>> {
        const response = await this.apiServiceAlertsProceduresV3SyncPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List ServiceAlerts matching a filter.
     * List ServiceAlerts matching a filter
     */
    async apiServiceAlertsV3GetRaw(requestParameters: ApiServiceAlertsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockServiceAlertV3>>> {
        const queryParameters: any = {};

        if (requestParameters['createdAt'] != null) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['createdBy'] = requestParameters['createdBy'];
        }

        if (requestParameters['deltedBy'] != null) {
            queryParameters['deltedBy'] = requestParameters['deltedBy'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['link'] != null) {
            queryParameters['link'] = requestParameters['link'];
        }

        if (requestParameters['message'] != null) {
            queryParameters['message'] = requestParameters['message'];
        }

        if (requestParameters['onEnvironment'] != null) {
            queryParameters['onEnvironment'] = requestParameters['onEnvironment'];
        }

        if (requestParameters['severity'] != null) {
            queryParameters['severity'] = requestParameters['severity'];
        }

        if (requestParameters['title'] != null) {
            queryParameters['title'] = requestParameters['title'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (requestParameters['updatedBy'] != null) {
            queryParameters['updatedBy'] = requestParameters['updatedBy'];
        }

        if (requestParameters['uuid'] != null) {
            queryParameters['uuid'] = requestParameters['uuid'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['includeDeleted'] != null) {
            queryParameters['include-deleted'] = requestParameters['includeDeleted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/service-alerts/v3`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockServiceAlertV3FromJSON));
    }

    /**
     * List ServiceAlerts matching a filter.
     * List ServiceAlerts matching a filter
     */
    async apiServiceAlertsV3Get(requestParameters: ApiServiceAlertsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockServiceAlertV3>> {
        const response = await this.apiServiceAlertsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a service alert to be displayed within terra.
     * Create a service alert
     */
    async apiServiceAlertsV3PostRaw(requestParameters: ApiServiceAlertsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockServiceAlertV3>> {
        if (requestParameters['serviceAlert'] == null) {
            throw new runtime.RequiredError(
                'serviceAlert',
                'Required parameter "serviceAlert" was null or undefined when calling apiServiceAlertsV3Post().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/service-alerts/v3`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockServiceAlertV3CreateToJSON(requestParameters['serviceAlert']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockServiceAlertV3FromJSON(jsonValue));
    }

    /**
     * Create a service alert to be displayed within terra.
     * Create a service alert
     */
    async apiServiceAlertsV3Post(requestParameters: ApiServiceAlertsV3PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockServiceAlertV3> {
        const response = await this.apiServiceAlertsV3PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an individual ServiceAlert.
     * Delete a ServiceAlert
     */
    async apiServiceAlertsV3SelectorDeleteRaw(requestParameters: ApiServiceAlertsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockServiceAlertV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiServiceAlertsV3SelectorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/service-alerts/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockServiceAlertV3FromJSON(jsonValue));
    }

    /**
     * Delete an individual ServiceAlert.
     * Delete a ServiceAlert
     */
    async apiServiceAlertsV3SelectorDelete(requestParameters: ApiServiceAlertsV3SelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockServiceAlertV3> {
        const response = await this.apiServiceAlertsV3SelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual Service Alert and it\'s metadata.
     * Get a Service Alert
     */
    async apiServiceAlertsV3SelectorGetRaw(requestParameters: ApiServiceAlertsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockServiceAlertV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiServiceAlertsV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeDeleted'] != null) {
            queryParameters['include-deleted'] = requestParameters['includeDeleted'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/service-alerts/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockServiceAlertV3FromJSON(jsonValue));
    }

    /**
     * Get an individual Service Alert and it\'s metadata.
     * Get a Service Alert
     */
    async apiServiceAlertsV3SelectorGet(requestParameters: ApiServiceAlertsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockServiceAlertV3> {
        const response = await this.apiServiceAlertsV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a service alert with new information.
     * Edit a service alert
     */
    async apiServiceAlertsV3SelectorPatchRaw(requestParameters: ApiServiceAlertsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockServiceAlertV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiServiceAlertsV3SelectorPatch().'
            );
        }

        if (requestParameters['serviceAlert'] == null) {
            throw new runtime.RequiredError(
                'serviceAlert',
                'Required parameter "serviceAlert" was null or undefined when calling apiServiceAlertsV3SelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/service-alerts/v3/{selector}`;
        urlPath = urlPath.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockServiceAlertV3EditableFieldsToJSON(requestParameters['serviceAlert']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockServiceAlertV3FromJSON(jsonValue));
    }

    /**
     * Update a service alert with new information.
     * Edit a service alert
     */
    async apiServiceAlertsV3SelectorPatch(requestParameters: ApiServiceAlertsV3SelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockServiceAlertV3> {
        const response = await this.apiServiceAlertsV3SelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiServiceAlertsV3GetSeverityEnum = {
    Blocker: 'blocker',
    Critical: ' critical',
    Minor: ' minor'
} as const;
export type ApiServiceAlertsV3GetSeverityEnum = typeof ApiServiceAlertsV3GetSeverityEnum[keyof typeof ApiServiceAlertsV3GetSeverityEnum];
