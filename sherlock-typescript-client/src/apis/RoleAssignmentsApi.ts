/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockRoleAssignmentV3,
  SherlockRoleAssignmentV3Edit,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockRoleAssignmentV3FromJSON,
    SherlockRoleAssignmentV3ToJSON,
    SherlockRoleAssignmentV3EditFromJSON,
    SherlockRoleAssignmentV3EditToJSON,
} from '../models/index';

export interface ApiRoleAssignmentsV3GetRequest {
    expiresAt?: Date;
    suspended?: boolean;
    limit?: number;
    offset?: number;
}

export interface ApiRoleAssignmentsV3RoleIdUserSelectorDeleteRequest {
    roleId: number;
    userSelector: string;
}

export interface ApiRoleAssignmentsV3RoleIdUserSelectorGetRequest {
    roleId: number;
    userSelector: string;
}

export interface ApiRoleAssignmentsV3RoleIdUserSelectorPatchRequest {
    roleId: number;
    userSelector: string;
    roleAssignment: SherlockRoleAssignmentV3Edit;
}

export interface ApiRoleAssignmentsV3RoleIdUserSelectorPostRequest {
    roleId: number;
    userSelector: string;
    roleAssignment: SherlockRoleAssignmentV3Edit;
}

/**
 * 
 */
export class RoleAssignmentsApi extends runtime.BaseAPI {

    /**
     * List RoleAssignments matching a filter. The correct way to list RoleAssignments for a particular Role or User is to get that Role or User specifically, not to use this endpoint.
     * List RoleAssignments matching a filter
     */
    async apiRoleAssignmentsV3GetRaw(requestParameters: ApiRoleAssignmentsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockRoleAssignmentV3>>> {
        const queryParameters: any = {};

        if (requestParameters['expiresAt'] != null) {
            queryParameters['expiresAt'] = (requestParameters['expiresAt'] as any).toISOString();
        }

        if (requestParameters['suspended'] != null) {
            queryParameters['suspended'] = requestParameters['suspended'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/role-assignments/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockRoleAssignmentV3FromJSON));
    }

    /**
     * List RoleAssignments matching a filter. The correct way to list RoleAssignments for a particular Role or User is to get that Role or User specifically, not to use this endpoint.
     * List RoleAssignments matching a filter
     */
    async apiRoleAssignmentsV3Get(requestParameters: ApiRoleAssignmentsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockRoleAssignmentV3>> {
        const response = await this.apiRoleAssignmentsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the RoleAssignment between a given Role and User. Non-super-admins may only mutate RoleAssignments for themselves, only for roles they can break-glass into, and only with an expiry no further than the role\'s default break-glass duration in the future.
     * Delete a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorDeleteRaw(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleAssignmentV3>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorDelete().'
            );
        }

        if (requestParameters['userSelector'] == null) {
            throw new runtime.RequiredError(
                'userSelector',
                'Required parameter "userSelector" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/role-assignments/v3/{role-id}/{user-selector}`.replace(`{${"role-id"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"user-selector"}}`, encodeURIComponent(String(requestParameters['userSelector']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleAssignmentV3FromJSON(jsonValue));
    }

    /**
     * Delete the RoleAssignment between a given Role and User. Non-super-admins may only mutate RoleAssignments for themselves, only for roles they can break-glass into, and only with an expiry no further than the role\'s default break-glass duration in the future.
     * Delete a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorDelete(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleAssignmentV3> {
        const response = await this.apiRoleAssignmentsV3RoleIdUserSelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the RoleAssignment between a given Role and User.
     * Get a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorGetRaw(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleAssignmentV3>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorGet().'
            );
        }

        if (requestParameters['userSelector'] == null) {
            throw new runtime.RequiredError(
                'userSelector',
                'Required parameter "userSelector" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/role-assignments/v3/{role-id}/{user-selector}`.replace(`{${"role-id"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"user-selector"}}`, encodeURIComponent(String(requestParameters['userSelector']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleAssignmentV3FromJSON(jsonValue));
    }

    /**
     * Get the RoleAssignment between a given Role and User.
     * Get a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorGet(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleAssignmentV3> {
        const response = await this.apiRoleAssignmentsV3RoleIdUserSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit the RoleAssignment between a given Role and User. Non-super-admins may only mutate RoleAssignments for themselves, only for roles they can break-glass into, and only with an expiry no further than the role\'s default break-glass duration in the future.
     * Edit a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorPatchRaw(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleAssignmentV3>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorPatch().'
            );
        }

        if (requestParameters['userSelector'] == null) {
            throw new runtime.RequiredError(
                'userSelector',
                'Required parameter "userSelector" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorPatch().'
            );
        }

        if (requestParameters['roleAssignment'] == null) {
            throw new runtime.RequiredError(
                'roleAssignment',
                'Required parameter "roleAssignment" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/role-assignments/v3/{role-id}/{user-selector}`.replace(`{${"role-id"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"user-selector"}}`, encodeURIComponent(String(requestParameters['userSelector']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockRoleAssignmentV3EditToJSON(requestParameters['roleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleAssignmentV3FromJSON(jsonValue));
    }

    /**
     * Edit the RoleAssignment between a given Role and User. Non-super-admins may only mutate RoleAssignments for themselves, only for roles they can break-glass into, and only with an expiry no further than the role\'s default break-glass duration in the future.
     * Edit a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorPatch(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleAssignmentV3> {
        const response = await this.apiRoleAssignmentsV3RoleIdUserSelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create the RoleAssignment between a given Role and User. Non-super-admins may only mutate RoleAssignments for themselves, only for roles they can break-glass into, and only with an expiry no further than the role\'s default break-glass duration in the future.
     * Create a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorPostRaw(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockRoleAssignmentV3>> {
        if (requestParameters['roleId'] == null) {
            throw new runtime.RequiredError(
                'roleId',
                'Required parameter "roleId" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorPost().'
            );
        }

        if (requestParameters['userSelector'] == null) {
            throw new runtime.RequiredError(
                'userSelector',
                'Required parameter "userSelector" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorPost().'
            );
        }

        if (requestParameters['roleAssignment'] == null) {
            throw new runtime.RequiredError(
                'roleAssignment',
                'Required parameter "roleAssignment" was null or undefined when calling apiRoleAssignmentsV3RoleIdUserSelectorPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/role-assignments/v3/{role-id}/{user-selector}`.replace(`{${"role-id"}}`, encodeURIComponent(String(requestParameters['roleId']))).replace(`{${"user-selector"}}`, encodeURIComponent(String(requestParameters['userSelector']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockRoleAssignmentV3EditToJSON(requestParameters['roleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockRoleAssignmentV3FromJSON(jsonValue));
    }

    /**
     * Create the RoleAssignment between a given Role and User. Non-super-admins may only mutate RoleAssignments for themselves, only for roles they can break-glass into, and only with an expiry no further than the role\'s default break-glass duration in the future.
     * Create a RoleAssignment
     */
    async apiRoleAssignmentsV3RoleIdUserSelectorPost(requestParameters: ApiRoleAssignmentsV3RoleIdUserSelectorPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockRoleAssignmentV3> {
        const response = await this.apiRoleAssignmentsV3RoleIdUserSelectorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
