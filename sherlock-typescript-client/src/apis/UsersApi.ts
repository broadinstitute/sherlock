/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockUserV3,
  SherlockUserV3Upsert,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockUserV3FromJSON,
    SherlockUserV3ToJSON,
    SherlockUserV3UpsertFromJSON,
    SherlockUserV3UpsertToJSON,
} from '../models/index';

export interface ApiUsersV3GetRequest {
    createdAt?: Date;
    email?: string;
    githubID?: string;
    githubUsername?: string;
    googleID?: string;
    id?: number;
    name?: string;
    nameFrom?: ApiUsersV3GetNameFromEnum;
    nameInferredFromGithub?: boolean;
    slackID?: string;
    slackUsername?: string;
    suitabilityDescription?: string;
    suitable?: boolean;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiUsersV3PutRequest {
    user?: SherlockUserV3Upsert;
}

export interface ApiUsersV3SelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * List Users matching a filter. The results will include suitability and other information. Note that the suitability info can\'t directly be filtered for at this time.
     * List Users matching a filter
     */
    async apiUsersV3GetRaw(requestParameters: ApiUsersV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockUserV3>>> {
        const queryParameters: any = {};

        if (runtime.exists(requestParameters, 'createdAt')) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'email')) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (runtime.exists(requestParameters, 'githubID')) {
            queryParameters['githubID'] = requestParameters['githubID'];
        }

        if (runtime.exists(requestParameters, 'githubUsername')) {
            queryParameters['githubUsername'] = requestParameters['githubUsername'];
        }

        if (runtime.exists(requestParameters, 'googleID')) {
            queryParameters['googleID'] = requestParameters['googleID'];
        }

        if (runtime.exists(requestParameters, 'id')) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (runtime.exists(requestParameters, 'name')) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (runtime.exists(requestParameters, 'nameFrom')) {
            queryParameters['nameFrom'] = requestParameters['nameFrom'];
        }

        if (runtime.exists(requestParameters, 'nameInferredFromGithub')) {
            queryParameters['nameInferredFromGithub'] = requestParameters['nameInferredFromGithub'];
        }

        if (runtime.exists(requestParameters, 'slackID')) {
            queryParameters['slackID'] = requestParameters['slackID'];
        }

        if (runtime.exists(requestParameters, 'slackUsername')) {
            queryParameters['slackUsername'] = requestParameters['slackUsername'];
        }

        if (runtime.exists(requestParameters, 'suitabilityDescription')) {
            queryParameters['suitabilityDescription'] = requestParameters['suitabilityDescription'];
        }

        if (runtime.exists(requestParameters, 'suitable')) {
            queryParameters['suitable'] = requestParameters['suitable'];
        }

        if (runtime.exists(requestParameters, 'updatedAt')) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (runtime.exists(requestParameters, 'limit')) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (runtime.exists(requestParameters, 'offset')) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockUserV3FromJSON));
    }

    /**
     * List Users matching a filter. The results will include suitability and other information. Note that the suitability info can\'t directly be filtered for at this time.
     * List Users matching a filter
     */
    async apiUsersV3Get(requestParameters: ApiUsersV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockUserV3>> {
        const response = await this.apiUsersV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the calling User\'s information. As with all authenticated Sherlock endpoints, newly-observed callers will have a User record added, meaning that this endpoint behaves like an upsert.
     * Update the calling User\'s information
     */
    async apiUsersV3PutRaw(requestParameters: ApiUsersV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockUserV3>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/v3`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockUserV3UpsertToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockUserV3FromJSON(jsonValue));
    }

    /**
     * Update the calling User\'s information. As with all authenticated Sherlock endpoints, newly-observed callers will have a User record added, meaning that this endpoint behaves like an upsert.
     * Update the calling User\'s information
     */
    async apiUsersV3Put(requestParameters: ApiUsersV3PutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockUserV3> {
        const response = await this.apiUsersV3PutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual User. As a special case, \"me\" or \"self\" can be passed as the selector to get the current user.
     * Get an individual User
     */
    async apiUsersV3SelectorGetRaw(requestParameters: ApiUsersV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockUserV3>> {
        if (!runtime.exists(requestParameters, 'selector')) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiUsersV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockUserV3FromJSON(jsonValue));
    }

    /**
     * Get an individual User. As a special case, \"me\" or \"self\" can be passed as the selector to get the current user.
     * Get an individual User
     */
    async apiUsersV3SelectorGet(requestParameters: ApiUsersV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockUserV3> {
        const response = await this.apiUsersV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiUsersV3GetNameFromEnum = {
    Sherlock: 'sherlock',
    Github: 'github',
    Slack: 'slack'
} as const;
export type ApiUsersV3GetNameFromEnum = typeof ApiUsersV3GetNameFromEnum[keyof typeof ApiUsersV3GetNameFromEnum];
