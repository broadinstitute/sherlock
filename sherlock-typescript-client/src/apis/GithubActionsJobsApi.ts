/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  SherlockGithubActionsJobV3,
  SherlockGithubActionsJobV3Create,
} from '../models/index';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    SherlockGithubActionsJobV3FromJSON,
    SherlockGithubActionsJobV3ToJSON,
    SherlockGithubActionsJobV3CreateFromJSON,
    SherlockGithubActionsJobV3CreateToJSON,
} from '../models/index';

export interface ApiGithubActionsJobsV3GetRequest {
    createdAt?: Date;
    githubActionsAttemptNumber?: number;
    githubActionsJobID?: number;
    githubActionsOwner?: string;
    githubActionsRepo?: string;
    githubActionsRunID?: number;
    id?: number;
    jobCreatedAt?: Date;
    jobStartedAt?: Date;
    jobTerminalAt?: Date;
    status?: string;
    updatedAt?: Date;
    limit?: number;
    offset?: number;
}

export interface ApiGithubActionsJobsV3PutRequest {
    githubActionsJob: SherlockGithubActionsJobV3Create;
}

export interface ApiGithubActionsJobsV3SelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class GithubActionsJobsApi extends runtime.BaseAPI {

    /**
     * List GithubActionsJobs matching a filter. Results are ordered by start time, starting at most recent.
     * List GithubActionsJobs matching a filter
     */
    async apiGithubActionsJobsV3GetRaw(requestParameters: ApiGithubActionsJobsV3GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SherlockGithubActionsJobV3>>> {
        const queryParameters: any = {};

        if (requestParameters['createdAt'] != null) {
            queryParameters['createdAt'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['githubActionsAttemptNumber'] != null) {
            queryParameters['githubActionsAttemptNumber'] = requestParameters['githubActionsAttemptNumber'];
        }

        if (requestParameters['githubActionsJobID'] != null) {
            queryParameters['githubActionsJobID'] = requestParameters['githubActionsJobID'];
        }

        if (requestParameters['githubActionsOwner'] != null) {
            queryParameters['githubActionsOwner'] = requestParameters['githubActionsOwner'];
        }

        if (requestParameters['githubActionsRepo'] != null) {
            queryParameters['githubActionsRepo'] = requestParameters['githubActionsRepo'];
        }

        if (requestParameters['githubActionsRunID'] != null) {
            queryParameters['githubActionsRunID'] = requestParameters['githubActionsRunID'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['jobCreatedAt'] != null) {
            queryParameters['jobCreatedAt'] = (requestParameters['jobCreatedAt'] as any).toISOString();
        }

        if (requestParameters['jobStartedAt'] != null) {
            queryParameters['jobStartedAt'] = (requestParameters['jobStartedAt'] as any).toISOString();
        }

        if (requestParameters['jobTerminalAt'] != null) {
            queryParameters['jobTerminalAt'] = (requestParameters['jobTerminalAt'] as any).toISOString();
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['updatedAt'] != null) {
            queryParameters['updatedAt'] = (requestParameters['updatedAt'] as any).toISOString();
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/github-actions-jobs/v3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SherlockGithubActionsJobV3FromJSON));
    }

    /**
     * List GithubActionsJobs matching a filter. Results are ordered by start time, starting at most recent.
     * List GithubActionsJobs matching a filter
     */
    async apiGithubActionsJobsV3Get(requestParameters: ApiGithubActionsJobsV3GetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SherlockGithubActionsJobV3>> {
        const response = await this.apiGithubActionsJobsV3GetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert GithubActionsJob.
     * Upsert GithubActionsJob
     */
    async apiGithubActionsJobsV3PutRaw(requestParameters: ApiGithubActionsJobsV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockGithubActionsJobV3>> {
        if (requestParameters['githubActionsJob'] == null) {
            throw new runtime.RequiredError(
                'githubActionsJob',
                'Required parameter "githubActionsJob" was null or undefined when calling apiGithubActionsJobsV3Put().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/github-actions-jobs/v3`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SherlockGithubActionsJobV3CreateToJSON(requestParameters['githubActionsJob']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockGithubActionsJobV3FromJSON(jsonValue));
    }

    /**
     * Upsert GithubActionsJob.
     * Upsert GithubActionsJob
     */
    async apiGithubActionsJobsV3Put(requestParameters: ApiGithubActionsJobsV3PutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockGithubActionsJobV3> {
        const response = await this.apiGithubActionsJobsV3PutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an individual GithubActionsJob.
     * Get an individual GithubActionsJob
     */
    async apiGithubActionsJobsV3SelectorGetRaw(requestParameters: ApiGithubActionsJobsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SherlockGithubActionsJobV3>> {
        if (requestParameters['selector'] == null) {
            throw new runtime.RequiredError(
                'selector',
                'Required parameter "selector" was null or undefined when calling apiGithubActionsJobsV3SelectorGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/github-actions-jobs/v3/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters['selector']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SherlockGithubActionsJobV3FromJSON(jsonValue));
    }

    /**
     * Get an individual GithubActionsJob.
     * Get an individual GithubActionsJob
     */
    async apiGithubActionsJobsV3SelectorGet(requestParameters: ApiGithubActionsJobsV3SelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SherlockGithubActionsJobV3> {
        const response = await this.apiGithubActionsJobsV3SelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
