/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockCiRunV3Upsert
 */
export interface SherlockCiRunV3Upsert {
    /**
     * Always appends; will eliminate duplicates.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    appVersions?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    argoWorkflowsName?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    argoWorkflowsNamespace?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    argoWorkflowsTemplate?: string;
    /**
     * Always appends; will eliminate duplicates. Spreads to associated chart releases, environments, and clusters.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    changesets?: Array<string>;
    /**
     * Always appends; will eliminate duplicates. Spreads to associated environments and clusters.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    chartReleases?: Array<string>;
    /**
     * Always appends; will eliminate duplicates.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    chartVersions?: Array<string>;
    /**
     * Always appends; will eliminate duplicates.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    charts?: Array<string>;
    /**
     * Always appends; will eliminate duplicates. Spreads to contained chart releases and their environments.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    clusters?: Array<string>;
    /**
     * Always appends; will eliminate duplicates. Spreads to contained chart releases and their clusters.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    environments?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsAttemptNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsOwner?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsRepo?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsRunID?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsWorkflowPath?: string;
    /**
     * If set to true, errors handling selectors for relations should be ignored. Normally, passing an unknown chart, cluster, etc. will abort the request, but they won't if this is true.
     * @type {boolean}
     * @memberof SherlockCiRunV3Upsert
     */
    ignoreBadSelectors?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    platform?: string;
    /**
     * Makes entries in the changesets field also spread to new app versions and chart versions deployed by the changeset. 'when-static' is the default and does this spreading only when the chart release is in a static environment.
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    relateToChangesetNewVersions?: SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    startedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    terminalAt?: string;
}


/**
 * @export
 */
export const SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum = {
    Always: 'always',
    WhenStatic: 'when-static',
    Never: 'never'
} as const;
export type SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum = typeof SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum[keyof typeof SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum];


/**
 * Check if a given object implements the SherlockCiRunV3Upsert interface.
 */
export function instanceOfSherlockCiRunV3Upsert(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SherlockCiRunV3UpsertFromJSON(json: any): SherlockCiRunV3Upsert {
    return SherlockCiRunV3UpsertFromJSONTyped(json, false);
}

export function SherlockCiRunV3UpsertFromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockCiRunV3Upsert {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appVersions': !exists(json, 'appVersions') ? undefined : json['appVersions'],
        'argoWorkflowsName': !exists(json, 'argoWorkflowsName') ? undefined : json['argoWorkflowsName'],
        'argoWorkflowsNamespace': !exists(json, 'argoWorkflowsNamespace') ? undefined : json['argoWorkflowsNamespace'],
        'argoWorkflowsTemplate': !exists(json, 'argoWorkflowsTemplate') ? undefined : json['argoWorkflowsTemplate'],
        'changesets': !exists(json, 'changesets') ? undefined : json['changesets'],
        'chartReleases': !exists(json, 'chartReleases') ? undefined : json['chartReleases'],
        'chartVersions': !exists(json, 'chartVersions') ? undefined : json['chartVersions'],
        'charts': !exists(json, 'charts') ? undefined : json['charts'],
        'clusters': !exists(json, 'clusters') ? undefined : json['clusters'],
        'environments': !exists(json, 'environments') ? undefined : json['environments'],
        'githubActionsAttemptNumber': !exists(json, 'githubActionsAttemptNumber') ? undefined : json['githubActionsAttemptNumber'],
        'githubActionsOwner': !exists(json, 'githubActionsOwner') ? undefined : json['githubActionsOwner'],
        'githubActionsRepo': !exists(json, 'githubActionsRepo') ? undefined : json['githubActionsRepo'],
        'githubActionsRunID': !exists(json, 'githubActionsRunID') ? undefined : json['githubActionsRunID'],
        'githubActionsWorkflowPath': !exists(json, 'githubActionsWorkflowPath') ? undefined : json['githubActionsWorkflowPath'],
        'ignoreBadSelectors': !exists(json, 'ignoreBadSelectors') ? undefined : json['ignoreBadSelectors'],
        'platform': !exists(json, 'platform') ? undefined : json['platform'],
        'relateToChangesetNewVersions': !exists(json, 'relateToChangesetNewVersions') ? undefined : json['relateToChangesetNewVersions'],
        'startedAt': !exists(json, 'startedAt') ? undefined : json['startedAt'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'terminalAt': !exists(json, 'terminalAt') ? undefined : json['terminalAt'],
    };
}

export function SherlockCiRunV3UpsertToJSON(value?: SherlockCiRunV3Upsert | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appVersions': value.appVersions,
        'argoWorkflowsName': value.argoWorkflowsName,
        'argoWorkflowsNamespace': value.argoWorkflowsNamespace,
        'argoWorkflowsTemplate': value.argoWorkflowsTemplate,
        'changesets': value.changesets,
        'chartReleases': value.chartReleases,
        'chartVersions': value.chartVersions,
        'charts': value.charts,
        'clusters': value.clusters,
        'environments': value.environments,
        'githubActionsAttemptNumber': value.githubActionsAttemptNumber,
        'githubActionsOwner': value.githubActionsOwner,
        'githubActionsRepo': value.githubActionsRepo,
        'githubActionsRunID': value.githubActionsRunID,
        'githubActionsWorkflowPath': value.githubActionsWorkflowPath,
        'ignoreBadSelectors': value.ignoreBadSelectors,
        'platform': value.platform,
        'relateToChangesetNewVersions': value.relateToChangesetNewVersions,
        'startedAt': value.startedAt,
        'status': value.status,
        'terminalAt': value.terminalAt,
    };
}

