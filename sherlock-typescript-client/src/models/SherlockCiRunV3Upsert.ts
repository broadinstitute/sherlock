/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockCiRunV3Upsert
 */
export interface SherlockCiRunV3Upsert {
    /**
     * Always appends; will eliminate duplicates.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    appVersions?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    argoWorkflowsName?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    argoWorkflowsNamespace?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    argoWorkflowsTemplate?: string;
    /**
     * Always appends; will eliminate duplicates. Spreads to associated chart releases, environments, and clusters.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    changesets?: Array<string>;
    /**
     * Keys treated like chartReleases. Values set resource-specific statuses for chart releases and associated changesets, new app versions, and new chart versions.
     * @type {{ [key: string]: string; }}
     * @memberof SherlockCiRunV3Upsert
     */
    chartReleaseStatuses?: { [key: string]: string; };
    /**
     * Always appends; will eliminate duplicates. Spreads to associated environments and clusters.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    chartReleases?: Array<string>;
    /**
     * Always appends; will eliminate duplicates.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    chartVersions?: Array<string>;
    /**
     * Always appends; will eliminate duplicates.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    charts?: Array<string>;
    /**
     * Always appends; will eliminate duplicates. Spreads to contained chart releases and their environments.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    clusters?: Array<string>;
    /**
     * Always appends; will eliminate duplicates. Spreads to contained chart releases and their clusters.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    environments?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsAttemptNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsOwner?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsRepo?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsRunID?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    githubActionsWorkflowPath?: string;
    /**
     * If set to true, errors handling selectors for relations should be ignored. Normally, passing an unknown chart, cluster, etc. will abort the request, but they won't if this is true.
     * @type {boolean}
     * @memberof SherlockCiRunV3Upsert
     */
    ignoreBadSelectors?: boolean;
    /**
     * Slack channels to notify if this CiRun fails. This field is always appended to when mutated.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    notifySlackChannelsUponFailure?: Array<string>;
    /**
     * Slack channels to notify if this CiRun is retried. This field is always appended to when mutated. It will de-dupe with the other notify fields.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    notifySlackChannelsUponRetry?: Array<string>;
    /**
     * Slack channels to notify if this CiRun succeeds. This field is always appended to when mutated.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3Upsert
     */
    notifySlackChannelsUponSuccess?: Array<string>;
    /**
     * Icon to use for success or failure Slack notifications. Can be given either as a URL to an image or as a Slack emoji (using colon shortcodes, like :smiley:).
     * An empty string is ignored to facilitate calling from GitHub Actions (where it's easier to pass an empty string than not send the field at all).
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    notifySlackCustomIcon?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    platform?: string;
    /**
     * Makes entries in the changesets field also spread to new app versions and chart versions deployed by the changeset. 'when-static' is the default and does this spreading only when the chart release is in a static environment.
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    relateToChangesetNewVersions?: SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    startedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3Upsert
     */
    terminalAt?: string;
}


/**
 * @export
 */
export const SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum = {
    Always: 'always',
    WhenStatic: 'when-static',
    Never: 'never'
} as const;
export type SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum = typeof SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum[keyof typeof SherlockCiRunV3UpsertRelateToChangesetNewVersionsEnum];


/**
 * Check if a given object implements the SherlockCiRunV3Upsert interface.
 */
export function instanceOfSherlockCiRunV3Upsert(value: object): value is SherlockCiRunV3Upsert {
    return true;
}

export function SherlockCiRunV3UpsertFromJSON(json: any): SherlockCiRunV3Upsert {
    return SherlockCiRunV3UpsertFromJSONTyped(json, false);
}

export function SherlockCiRunV3UpsertFromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockCiRunV3Upsert {
    if (json == null) {
        return json;
    }
    return {
        
        'appVersions': json['appVersions'] == null ? undefined : json['appVersions'],
        'argoWorkflowsName': json['argoWorkflowsName'] == null ? undefined : json['argoWorkflowsName'],
        'argoWorkflowsNamespace': json['argoWorkflowsNamespace'] == null ? undefined : json['argoWorkflowsNamespace'],
        'argoWorkflowsTemplate': json['argoWorkflowsTemplate'] == null ? undefined : json['argoWorkflowsTemplate'],
        'changesets': json['changesets'] == null ? undefined : json['changesets'],
        'chartReleaseStatuses': json['chartReleaseStatuses'] == null ? undefined : json['chartReleaseStatuses'],
        'chartReleases': json['chartReleases'] == null ? undefined : json['chartReleases'],
        'chartVersions': json['chartVersions'] == null ? undefined : json['chartVersions'],
        'charts': json['charts'] == null ? undefined : json['charts'],
        'clusters': json['clusters'] == null ? undefined : json['clusters'],
        'environments': json['environments'] == null ? undefined : json['environments'],
        'githubActionsAttemptNumber': json['githubActionsAttemptNumber'] == null ? undefined : json['githubActionsAttemptNumber'],
        'githubActionsOwner': json['githubActionsOwner'] == null ? undefined : json['githubActionsOwner'],
        'githubActionsRepo': json['githubActionsRepo'] == null ? undefined : json['githubActionsRepo'],
        'githubActionsRunID': json['githubActionsRunID'] == null ? undefined : json['githubActionsRunID'],
        'githubActionsWorkflowPath': json['githubActionsWorkflowPath'] == null ? undefined : json['githubActionsWorkflowPath'],
        'ignoreBadSelectors': json['ignoreBadSelectors'] == null ? undefined : json['ignoreBadSelectors'],
        'notifySlackChannelsUponFailure': json['notifySlackChannelsUponFailure'] == null ? undefined : json['notifySlackChannelsUponFailure'],
        'notifySlackChannelsUponRetry': json['notifySlackChannelsUponRetry'] == null ? undefined : json['notifySlackChannelsUponRetry'],
        'notifySlackChannelsUponSuccess': json['notifySlackChannelsUponSuccess'] == null ? undefined : json['notifySlackChannelsUponSuccess'],
        'notifySlackCustomIcon': json['notifySlackCustomIcon'] == null ? undefined : json['notifySlackCustomIcon'],
        'platform': json['platform'] == null ? undefined : json['platform'],
        'relateToChangesetNewVersions': json['relateToChangesetNewVersions'] == null ? undefined : json['relateToChangesetNewVersions'],
        'startedAt': json['startedAt'] == null ? undefined : json['startedAt'],
        'status': json['status'] == null ? undefined : json['status'],
        'terminalAt': json['terminalAt'] == null ? undefined : json['terminalAt'],
    };
}

export function SherlockCiRunV3UpsertToJSON(value?: SherlockCiRunV3Upsert | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'appVersions': value['appVersions'],
        'argoWorkflowsName': value['argoWorkflowsName'],
        'argoWorkflowsNamespace': value['argoWorkflowsNamespace'],
        'argoWorkflowsTemplate': value['argoWorkflowsTemplate'],
        'changesets': value['changesets'],
        'chartReleaseStatuses': value['chartReleaseStatuses'],
        'chartReleases': value['chartReleases'],
        'chartVersions': value['chartVersions'],
        'charts': value['charts'],
        'clusters': value['clusters'],
        'environments': value['environments'],
        'githubActionsAttemptNumber': value['githubActionsAttemptNumber'],
        'githubActionsOwner': value['githubActionsOwner'],
        'githubActionsRepo': value['githubActionsRepo'],
        'githubActionsRunID': value['githubActionsRunID'],
        'githubActionsWorkflowPath': value['githubActionsWorkflowPath'],
        'ignoreBadSelectors': value['ignoreBadSelectors'],
        'notifySlackChannelsUponFailure': value['notifySlackChannelsUponFailure'],
        'notifySlackChannelsUponRetry': value['notifySlackChannelsUponRetry'],
        'notifySlackChannelsUponSuccess': value['notifySlackChannelsUponSuccess'],
        'notifySlackCustomIcon': value['notifySlackCustomIcon'],
        'platform': value['platform'],
        'relateToChangesetNewVersions': value['relateToChangesetNewVersions'],
        'startedAt': value['startedAt'],
        'status': value['status'],
        'terminalAt': value['terminalAt'],
    };
}

