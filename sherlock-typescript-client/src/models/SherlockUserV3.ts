/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SherlockRoleAssignmentV3 } from './SherlockRoleAssignmentV3';
import {
    SherlockRoleAssignmentV3FromJSON,
    SherlockRoleAssignmentV3FromJSONTyped,
    SherlockRoleAssignmentV3ToJSON,
    SherlockRoleAssignmentV3ToJSONTyped,
} from './SherlockRoleAssignmentV3';

/**
 * 
 * @export
 * @interface SherlockUserV3
 */
export interface SherlockUserV3 {
    /**
     * 
     * @type {Array<SherlockRoleAssignmentV3>}
     * @memberof SherlockUserV3
     */
    assignments?: Array<SherlockRoleAssignmentV3>;
    /**
     * 
     * @type {Date}
     * @memberof SherlockUserV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    githubID?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    githubUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    googleID?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockUserV3
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    nameFrom?: SherlockUserV3NameFromEnum;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    slackID?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockUserV3
     */
    slackUsername?: string;
    /**
     * Available only in responses; describes the user's production-suitability
     * @type {string}
     * @memberof SherlockUserV3
     */
    suitabilityDescription?: string;
    /**
     * Available only in responses; indicates whether the user is production-suitable
     * @type {boolean}
     * @memberof SherlockUserV3
     */
    suitable?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SherlockUserV3
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const SherlockUserV3NameFromEnum = {
    Sherlock: 'sherlock',
    Github: 'github',
    Slack: 'slack'
} as const;
export type SherlockUserV3NameFromEnum = typeof SherlockUserV3NameFromEnum[keyof typeof SherlockUserV3NameFromEnum];


/**
 * Check if a given object implements the SherlockUserV3 interface.
 */
export function instanceOfSherlockUserV3(value: object): value is SherlockUserV3 {
    return true;
}

export function SherlockUserV3FromJSON(json: any): SherlockUserV3 {
    return SherlockUserV3FromJSONTyped(json, false);
}

export function SherlockUserV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockUserV3 {
    if (json == null) {
        return json;
    }
    return {
        
        'assignments': json['assignments'] == null ? undefined : ((json['assignments'] as Array<any>).map(SherlockRoleAssignmentV3FromJSON)),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'email': json['email'] == null ? undefined : json['email'],
        'githubID': json['githubID'] == null ? undefined : json['githubID'],
        'githubUsername': json['githubUsername'] == null ? undefined : json['githubUsername'],
        'googleID': json['googleID'] == null ? undefined : json['googleID'],
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'nameFrom': json['nameFrom'] == null ? undefined : json['nameFrom'],
        'slackID': json['slackID'] == null ? undefined : json['slackID'],
        'slackUsername': json['slackUsername'] == null ? undefined : json['slackUsername'],
        'suitabilityDescription': json['suitabilityDescription'] == null ? undefined : json['suitabilityDescription'],
        'suitable': json['suitable'] == null ? undefined : json['suitable'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

  export function SherlockUserV3ToJSON(json: any): SherlockUserV3 {
      return SherlockUserV3ToJSONTyped(json, false);
  }

  export function SherlockUserV3ToJSONTyped(value?: SherlockUserV3 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'assignments': value['assignments'] == null ? undefined : ((value['assignments'] as Array<any>).map(SherlockRoleAssignmentV3ToJSON)),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'email': value['email'],
        'githubID': value['githubID'],
        'githubUsername': value['githubUsername'],
        'googleID': value['googleID'],
        'id': value['id'],
        'name': value['name'],
        'nameFrom': value['nameFrom'],
        'slackID': value['slackID'],
        'slackUsername': value['slackUsername'],
        'suitabilityDescription': value['suitabilityDescription'],
        'suitable': value['suitable'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

