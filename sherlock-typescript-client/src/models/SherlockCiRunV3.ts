/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SherlockCiIdentifierV3 } from './SherlockCiIdentifierV3';
import {
    SherlockCiIdentifierV3FromJSON,
    SherlockCiIdentifierV3FromJSONTyped,
    SherlockCiIdentifierV3ToJSON,
} from './SherlockCiIdentifierV3';

/**
 * 
 * @export
 * @interface SherlockCiRunV3
 */
export interface SherlockCiRunV3 {
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    argoWorkflowsName?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    argoWorkflowsNamespace?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    argoWorkflowsTemplate?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockCiRunV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3
     */
    githubActionsAttemptNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    githubActionsOwner?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    githubActionsRepo?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3
     */
    githubActionsRunID?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    githubActionsWorkflowPath?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiRunV3
     */
    id?: number;
    /**
     * Slack channels to notify if this CiRun fails. This field is always appended to when mutated.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3
     */
    notifySlackChannelsUponFailure?: Array<string>;
    /**
     * Slack channels to notify if this CiRun succeeds. This field is always appended to when mutated.
     * @type {Array<string>}
     * @memberof SherlockCiRunV3
     */
    notifySlackChannelsUponSuccess?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    platform?: string;
    /**
     * 
     * @type {Array<SherlockCiIdentifierV3>}
     * @memberof SherlockCiRunV3
     */
    relatedResources?: Array<SherlockCiIdentifierV3>;
    /**
     * Available only when querying a CiRun via a CiIdentifier, indicates the status of the run for that resource
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    resourceStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    startedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiRunV3
     */
    terminalAt?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockCiRunV3
     */
    terminationHooksDispatchedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SherlockCiRunV3
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the SherlockCiRunV3 interface.
 */
export function instanceOfSherlockCiRunV3(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SherlockCiRunV3FromJSON(json: any): SherlockCiRunV3 {
    return SherlockCiRunV3FromJSONTyped(json, false);
}

export function SherlockCiRunV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockCiRunV3 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'argoWorkflowsName': !exists(json, 'argoWorkflowsName') ? undefined : json['argoWorkflowsName'],
        'argoWorkflowsNamespace': !exists(json, 'argoWorkflowsNamespace') ? undefined : json['argoWorkflowsNamespace'],
        'argoWorkflowsTemplate': !exists(json, 'argoWorkflowsTemplate') ? undefined : json['argoWorkflowsTemplate'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'githubActionsAttemptNumber': !exists(json, 'githubActionsAttemptNumber') ? undefined : json['githubActionsAttemptNumber'],
        'githubActionsOwner': !exists(json, 'githubActionsOwner') ? undefined : json['githubActionsOwner'],
        'githubActionsRepo': !exists(json, 'githubActionsRepo') ? undefined : json['githubActionsRepo'],
        'githubActionsRunID': !exists(json, 'githubActionsRunID') ? undefined : json['githubActionsRunID'],
        'githubActionsWorkflowPath': !exists(json, 'githubActionsWorkflowPath') ? undefined : json['githubActionsWorkflowPath'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'notifySlackChannelsUponFailure': !exists(json, 'notifySlackChannelsUponFailure') ? undefined : json['notifySlackChannelsUponFailure'],
        'notifySlackChannelsUponSuccess': !exists(json, 'notifySlackChannelsUponSuccess') ? undefined : json['notifySlackChannelsUponSuccess'],
        'platform': !exists(json, 'platform') ? undefined : json['platform'],
        'relatedResources': !exists(json, 'relatedResources') ? undefined : ((json['relatedResources'] as Array<any>).map(SherlockCiIdentifierV3FromJSON)),
        'resourceStatus': !exists(json, 'resourceStatus') ? undefined : json['resourceStatus'],
        'startedAt': !exists(json, 'startedAt') ? undefined : json['startedAt'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'terminalAt': !exists(json, 'terminalAt') ? undefined : json['terminalAt'],
        'terminationHooksDispatchedAt': !exists(json, 'terminationHooksDispatchedAt') ? undefined : (new Date(json['terminationHooksDispatchedAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function SherlockCiRunV3ToJSON(value?: SherlockCiRunV3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'argoWorkflowsName': value.argoWorkflowsName,
        'argoWorkflowsNamespace': value.argoWorkflowsNamespace,
        'argoWorkflowsTemplate': value.argoWorkflowsTemplate,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'githubActionsAttemptNumber': value.githubActionsAttemptNumber,
        'githubActionsOwner': value.githubActionsOwner,
        'githubActionsRepo': value.githubActionsRepo,
        'githubActionsRunID': value.githubActionsRunID,
        'githubActionsWorkflowPath': value.githubActionsWorkflowPath,
        'id': value.id,
        'notifySlackChannelsUponFailure': value.notifySlackChannelsUponFailure,
        'notifySlackChannelsUponSuccess': value.notifySlackChannelsUponSuccess,
        'platform': value.platform,
        'relatedResources': value.relatedResources === undefined ? undefined : ((value.relatedResources as Array<any>).map(SherlockCiIdentifierV3ToJSON)),
        'resourceStatus': value.resourceStatus,
        'startedAt': value.startedAt,
        'status': value.status,
        'terminalAt': value.terminalAt,
        'terminationHooksDispatchedAt': value.terminationHooksDispatchedAt === undefined ? undefined : (value.terminationHooksDispatchedAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

