/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SherlockCiIdentifierV3 } from './SherlockCiIdentifierV3';
import {
    SherlockCiIdentifierV3FromJSON,
    SherlockCiIdentifierV3FromJSONTyped,
    SherlockCiIdentifierV3ToJSON,
} from './SherlockCiIdentifierV3';
import type { SherlockClusterV3 } from './SherlockClusterV3';
import {
    SherlockClusterV3FromJSON,
    SherlockClusterV3FromJSONTyped,
    SherlockClusterV3ToJSON,
} from './SherlockClusterV3';
import type { SherlockPagerdutyIntegrationV3 } from './SherlockPagerdutyIntegrationV3';
import {
    SherlockPagerdutyIntegrationV3FromJSON,
    SherlockPagerdutyIntegrationV3FromJSONTyped,
    SherlockPagerdutyIntegrationV3ToJSON,
} from './SherlockPagerdutyIntegrationV3';
import type { SherlockUserV3 } from './SherlockUserV3';
import {
    SherlockUserV3FromJSON,
    SherlockUserV3FromJSONTyped,
    SherlockUserV3ToJSON,
} from './SherlockUserV3';

/**
 * 
 * @export
 * @interface SherlockEnvironmentV3
 */
export interface SherlockEnvironmentV3 {
    /**
     * If true when creating, dynamic environments copy from template and template environments get the honeycomb chart
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    autoPopulateChartReleases?: boolean;
    /**
     * Required when creating
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    base?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    baseDomain?: string;
    /**
     * 
     * @type {SherlockCiIdentifierV3}
     * @memberof SherlockEnvironmentV3
     */
    ciIdentifier?: SherlockCiIdentifierV3;
    /**
     * 
     * @type {Date}
     * @memberof SherlockEnvironmentV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    defaultCluster?: string;
    /**
     * 
     * @type {SherlockClusterV3}
     * @memberof SherlockEnvironmentV3
     */
    defaultClusterInfo?: SherlockClusterV3;
    /**
     * should be the environment branch for live envs. Is usually dev for template/dynamic but not necessarily
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    defaultFirecloudDevelopRef?: string;
    /**
     * When creating, will be calculated if left empty
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    defaultNamespace?: string;
    /**
     * If set, the BEE will be automatically deleted after this time (thelma checks this field)
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    deleteAfter?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    helmfileRef?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockEnvironmentV3
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    lifecycle?: string;
    /**
     * When creating, will be calculated if dynamic, required otherwise
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    name?: string;
    /**
     * Used for dynamic environment name generation only, to override using the owner email handle and template name
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    namePrefix?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    namePrefixesDomain?: boolean;
    /**
     * Applicable for BEEs only, whether Thelma should render the BEE as "offline" zero replicas (this field is a target state, not a status)
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    offline?: boolean;
    /**
     * When enabled, the BEE will be slated to go offline around the begin time each day
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    offlineScheduleBeginEnabled?: boolean;
    /**
     * Stored with timezone to determine day of the week
     * @type {Date}
     * @memberof SherlockEnvironmentV3
     */
    offlineScheduleBeginTime?: Date;
    /**
     * When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    offlineScheduleEndEnabled?: boolean;
    /**
     * Stored with timezone to determine day of the week
     * @type {Date}
     * @memberof SherlockEnvironmentV3
     */
    offlineScheduleEndTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    offlineScheduleEndWeekends?: boolean;
    /**
     * When creating, will default to you
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    owner?: string;
    /**
     * 
     * @type {SherlockUserV3}
     * @memberof SherlockEnvironmentV3
     */
    ownerInfo?: SherlockUserV3;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    pactIdentifier?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    pagerdutyIntegration?: string;
    /**
     * 
     * @type {SherlockPagerdutyIntegrationV3}
     * @memberof SherlockEnvironmentV3
     */
    pagerdutyIntegrationInfo?: SherlockPagerdutyIntegrationV3;
    /**
     * Used to protect specific BEEs from deletion (thelma checks this field)
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    preventDeletion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockEnvironmentV3
     */
    requiresSuitability?: boolean;
    /**
     * Required for dynamic environments
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    templateEnvironment?: string;
    /**
     * 
     * @type {object}
     * @memberof SherlockEnvironmentV3
     */
    templateEnvironmentInfo?: object;
    /**
     * When creating, will be calculated if left empty
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    uniqueResourcePrefix?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockEnvironmentV3
     */
    updatedAt?: Date;
    /**
     * When creating, defaults to template name or environment name
     * @type {string}
     * @memberof SherlockEnvironmentV3
     */
    valuesName?: string;
}

/**
 * Check if a given object implements the SherlockEnvironmentV3 interface.
 */
export function instanceOfSherlockEnvironmentV3(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SherlockEnvironmentV3FromJSON(json: any): SherlockEnvironmentV3 {
    return SherlockEnvironmentV3FromJSONTyped(json, false);
}

export function SherlockEnvironmentV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockEnvironmentV3 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autoPopulateChartReleases': !exists(json, 'autoPopulateChartReleases') ? undefined : json['autoPopulateChartReleases'],
        'base': !exists(json, 'base') ? undefined : json['base'],
        'baseDomain': !exists(json, 'baseDomain') ? undefined : json['baseDomain'],
        'ciIdentifier': !exists(json, 'ciIdentifier') ? undefined : SherlockCiIdentifierV3FromJSON(json['ciIdentifier']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'defaultCluster': !exists(json, 'defaultCluster') ? undefined : json['defaultCluster'],
        'defaultClusterInfo': !exists(json, 'defaultClusterInfo') ? undefined : SherlockClusterV3FromJSON(json['defaultClusterInfo']),
        'defaultFirecloudDevelopRef': !exists(json, 'defaultFirecloudDevelopRef') ? undefined : json['defaultFirecloudDevelopRef'],
        'defaultNamespace': !exists(json, 'defaultNamespace') ? undefined : json['defaultNamespace'],
        'deleteAfter': !exists(json, 'deleteAfter') ? undefined : json['deleteAfter'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'helmfileRef': !exists(json, 'helmfileRef') ? undefined : json['helmfileRef'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'lifecycle': !exists(json, 'lifecycle') ? undefined : json['lifecycle'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namePrefix': !exists(json, 'namePrefix') ? undefined : json['namePrefix'],
        'namePrefixesDomain': !exists(json, 'namePrefixesDomain') ? undefined : json['namePrefixesDomain'],
        'offline': !exists(json, 'offline') ? undefined : json['offline'],
        'offlineScheduleBeginEnabled': !exists(json, 'offlineScheduleBeginEnabled') ? undefined : json['offlineScheduleBeginEnabled'],
        'offlineScheduleBeginTime': !exists(json, 'offlineScheduleBeginTime') ? undefined : (new Date(json['offlineScheduleBeginTime'])),
        'offlineScheduleEndEnabled': !exists(json, 'offlineScheduleEndEnabled') ? undefined : json['offlineScheduleEndEnabled'],
        'offlineScheduleEndTime': !exists(json, 'offlineScheduleEndTime') ? undefined : (new Date(json['offlineScheduleEndTime'])),
        'offlineScheduleEndWeekends': !exists(json, 'offlineScheduleEndWeekends') ? undefined : json['offlineScheduleEndWeekends'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'ownerInfo': !exists(json, 'ownerInfo') ? undefined : SherlockUserV3FromJSON(json['ownerInfo']),
        'pactIdentifier': !exists(json, 'pactIdentifier') ? undefined : json['pactIdentifier'],
        'pagerdutyIntegration': !exists(json, 'pagerdutyIntegration') ? undefined : json['pagerdutyIntegration'],
        'pagerdutyIntegrationInfo': !exists(json, 'pagerdutyIntegrationInfo') ? undefined : SherlockPagerdutyIntegrationV3FromJSON(json['pagerdutyIntegrationInfo']),
        'preventDeletion': !exists(json, 'preventDeletion') ? undefined : json['preventDeletion'],
        'requiresSuitability': !exists(json, 'requiresSuitability') ? undefined : json['requiresSuitability'],
        'templateEnvironment': !exists(json, 'templateEnvironment') ? undefined : json['templateEnvironment'],
        'templateEnvironmentInfo': !exists(json, 'templateEnvironmentInfo') ? undefined : json['templateEnvironmentInfo'],
        'uniqueResourcePrefix': !exists(json, 'uniqueResourcePrefix') ? undefined : json['uniqueResourcePrefix'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'valuesName': !exists(json, 'valuesName') ? undefined : json['valuesName'],
    };
}

export function SherlockEnvironmentV3ToJSON(value?: SherlockEnvironmentV3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autoPopulateChartReleases': value.autoPopulateChartReleases,
        'base': value.base,
        'baseDomain': value.baseDomain,
        'ciIdentifier': SherlockCiIdentifierV3ToJSON(value.ciIdentifier),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'defaultCluster': value.defaultCluster,
        'defaultClusterInfo': SherlockClusterV3ToJSON(value.defaultClusterInfo),
        'defaultFirecloudDevelopRef': value.defaultFirecloudDevelopRef,
        'defaultNamespace': value.defaultNamespace,
        'deleteAfter': value.deleteAfter,
        'description': value.description,
        'helmfileRef': value.helmfileRef,
        'id': value.id,
        'lifecycle': value.lifecycle,
        'name': value.name,
        'namePrefix': value.namePrefix,
        'namePrefixesDomain': value.namePrefixesDomain,
        'offline': value.offline,
        'offlineScheduleBeginEnabled': value.offlineScheduleBeginEnabled,
        'offlineScheduleBeginTime': value.offlineScheduleBeginTime === undefined ? undefined : (value.offlineScheduleBeginTime.toISOString()),
        'offlineScheduleEndEnabled': value.offlineScheduleEndEnabled,
        'offlineScheduleEndTime': value.offlineScheduleEndTime === undefined ? undefined : (value.offlineScheduleEndTime.toISOString()),
        'offlineScheduleEndWeekends': value.offlineScheduleEndWeekends,
        'owner': value.owner,
        'ownerInfo': SherlockUserV3ToJSON(value.ownerInfo),
        'pactIdentifier': value.pactIdentifier,
        'pagerdutyIntegration': value.pagerdutyIntegration,
        'pagerdutyIntegrationInfo': SherlockPagerdutyIntegrationV3ToJSON(value.pagerdutyIntegrationInfo),
        'preventDeletion': value.preventDeletion,
        'requiresSuitability': value.requiresSuitability,
        'templateEnvironment': value.templateEnvironment,
        'templateEnvironmentInfo': value.templateEnvironmentInfo,
        'uniqueResourcePrefix': value.uniqueResourcePrefix,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'valuesName': value.valuesName,
    };
}

