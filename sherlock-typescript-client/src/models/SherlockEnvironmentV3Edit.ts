/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockEnvironmentV3Edit
 */
export interface SherlockEnvironmentV3Edit {
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    baseDomain?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    defaultCluster?: string;
    /**
     * If set, the BEE will be automatically deleted after this time. Can be set to "" or Go's zero time value to clear the field.
     * @type {Date}
     * @memberof SherlockEnvironmentV3Edit
     */
    deleteAfter?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    helmfileRef?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    namePrefixesDomain?: boolean;
    /**
     * Applicable for BEEs only, whether Thelma should render the BEE as "offline" zero replicas (this field is a target state, not a status)
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    offline?: boolean;
    /**
     * When enabled, the BEE will be slated to go offline around the begin time each day
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    offlineScheduleBeginEnabled?: boolean;
    /**
     * Stored with timezone to determine day of the week
     * @type {Date}
     * @memberof SherlockEnvironmentV3Edit
     */
    offlineScheduleBeginTime?: Date;
    /**
     * When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    offlineScheduleEndEnabled?: boolean;
    /**
     * Stored with timezone to determine day of the week
     * @type {Date}
     * @memberof SherlockEnvironmentV3Edit
     */
    offlineScheduleEndTime?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    offlineScheduleEndWeekends?: boolean;
    /**
     * When creating, will default to you
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    pactIdentifier?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockEnvironmentV3Edit
     */
    pagerdutyIntegration?: string;
    /**
     * Used to protect specific BEEs from deletion (thelma checks this field)
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    preventDeletion?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockEnvironmentV3Edit
     */
    requiresSuitability?: boolean;
}

/**
 * Check if a given object implements the SherlockEnvironmentV3Edit interface.
 */
export function instanceOfSherlockEnvironmentV3Edit(value: object): boolean {
    return true;
}

export function SherlockEnvironmentV3EditFromJSON(json: any): SherlockEnvironmentV3Edit {
    return SherlockEnvironmentV3EditFromJSONTyped(json, false);
}

export function SherlockEnvironmentV3EditFromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockEnvironmentV3Edit {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        
        'baseDomain': !exists(json, 'baseDomain') ? undefined : json['baseDomain'],
        'defaultCluster': !exists(json, 'defaultCluster') ? undefined : json['defaultCluster'],
        'deleteAfter': !exists(json, 'deleteAfter') ? undefined : (new Date(json['deleteAfter'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'helmfileRef': !exists(json, 'helmfileRef') ? undefined : json['helmfileRef'],
        'namePrefixesDomain': !exists(json, 'namePrefixesDomain') ? undefined : json['namePrefixesDomain'],
        'offline': !exists(json, 'offline') ? undefined : json['offline'],
        'offlineScheduleBeginEnabled': !exists(json, 'offlineScheduleBeginEnabled') ? undefined : json['offlineScheduleBeginEnabled'],
        'offlineScheduleBeginTime': !exists(json, 'offlineScheduleBeginTime') ? undefined : (new Date(json['offlineScheduleBeginTime'])),
        'offlineScheduleEndEnabled': !exists(json, 'offlineScheduleEndEnabled') ? undefined : json['offlineScheduleEndEnabled'],
        'offlineScheduleEndTime': !exists(json, 'offlineScheduleEndTime') ? undefined : (new Date(json['offlineScheduleEndTime'])),
        'offlineScheduleEndWeekends': !exists(json, 'offlineScheduleEndWeekends') ? undefined : json['offlineScheduleEndWeekends'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'pactIdentifier': !exists(json, 'pactIdentifier') ? undefined : json['pactIdentifier'],
        'pagerdutyIntegration': !exists(json, 'pagerdutyIntegration') ? undefined : json['pagerdutyIntegration'],
        'preventDeletion': !exists(json, 'preventDeletion') ? undefined : json['preventDeletion'],
        'requiresSuitability': !exists(json, 'requiresSuitability') ? undefined : json['requiresSuitability'],
    };
}

export function SherlockEnvironmentV3EditToJSON(value?: SherlockEnvironmentV3Edit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baseDomain': value['baseDomain'],
        'defaultCluster': value['defaultCluster'],
        'deleteAfter': !exists(value, 'deleteAfter') ? undefined : ((value['deleteAfter']).toISOString()),
        'description': value['description'],
        'helmfileRef': value['helmfileRef'],
        'namePrefixesDomain': value['namePrefixesDomain'],
        'offline': value['offline'],
        'offlineScheduleBeginEnabled': value['offlineScheduleBeginEnabled'],
        'offlineScheduleBeginTime': !exists(value, 'offlineScheduleBeginTime') ? undefined : ((value['offlineScheduleBeginTime']).toISOString()),
        'offlineScheduleEndEnabled': value['offlineScheduleEndEnabled'],
        'offlineScheduleEndTime': !exists(value, 'offlineScheduleEndTime') ? undefined : ((value['offlineScheduleEndTime']).toISOString()),
        'offlineScheduleEndWeekends': value['offlineScheduleEndWeekends'],
        'owner': value['owner'],
        'pactIdentifier': value['pactIdentifier'],
        'pagerdutyIntegration': value['pagerdutyIntegration'],
        'preventDeletion': value['preventDeletion'],
        'requiresSuitability': value['requiresSuitability'],
    };
}

