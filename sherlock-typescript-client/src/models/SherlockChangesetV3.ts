/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SherlockAppVersionV3 } from './SherlockAppVersionV3';
import {
    SherlockAppVersionV3FromJSON,
    SherlockAppVersionV3FromJSONTyped,
    SherlockAppVersionV3ToJSON,
} from './SherlockAppVersionV3';
import type { SherlockChartReleaseV3 } from './SherlockChartReleaseV3';
import {
    SherlockChartReleaseV3FromJSON,
    SherlockChartReleaseV3FromJSONTyped,
    SherlockChartReleaseV3ToJSON,
} from './SherlockChartReleaseV3';
import type { SherlockChartVersionV3 } from './SherlockChartVersionV3';
import {
    SherlockChartVersionV3FromJSON,
    SherlockChartVersionV3FromJSONTyped,
    SherlockChartVersionV3ToJSON,
} from './SherlockChartVersionV3';
import type { SherlockCiIdentifierV3 } from './SherlockCiIdentifierV3';
import {
    SherlockCiIdentifierV3FromJSON,
    SherlockCiIdentifierV3FromJSONTyped,
    SherlockCiIdentifierV3ToJSON,
} from './SherlockCiIdentifierV3';
import type { SherlockUserV3 } from './SherlockUserV3';
import {
    SherlockUserV3FromJSON,
    SherlockUserV3FromJSONTyped,
    SherlockUserV3ToJSON,
} from './SherlockUserV3';

/**
 * 
 * @export
 * @interface SherlockChangesetV3
 */
export interface SherlockChangesetV3 {
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    appliedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    appliedBy?: string;
    /**
     * 
     * @type {SherlockUserV3}
     * @memberof SherlockChangesetV3
     */
    appliedByInfo?: SherlockUserV3;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    chartRelease?: string;
    /**
     * 
     * @type {SherlockChartReleaseV3}
     * @memberof SherlockChangesetV3
     */
    chartReleaseInfo?: SherlockChartReleaseV3;
    /**
     * 
     * @type {SherlockCiIdentifierV3}
     * @memberof SherlockChangesetV3
     */
    ciIdentifier?: SherlockCiIdentifierV3;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionCommit?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromFirecloudDevelopRef?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromHelmfileRef?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockChangesetV3
     */
    fromHelmfileRefEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    fromResolvedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof SherlockChangesetV3
     */
    id?: number;
    /**
     * 
     * @type {Array<SherlockAppVersionV3>}
     * @memberof SherlockChangesetV3
     */
    newAppVersions?: Array<SherlockAppVersionV3>;
    /**
     * 
     * @type {Array<SherlockChartVersionV3>}
     * @memberof SherlockChangesetV3
     */
    newChartVersions?: Array<SherlockChartVersionV3>;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    plannedBy?: string;
    /**
     * 
     * @type {SherlockUserV3}
     * @memberof SherlockChangesetV3
     */
    plannedByInfo?: SherlockUserV3;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    supersededAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionCommit?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toFirecloudDevelopRef?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toHelmfileRef?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockChangesetV3
     */
    toHelmfileRefEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    toResolvedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the SherlockChangesetV3 interface.
 */
export function instanceOfSherlockChangesetV3(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SherlockChangesetV3FromJSON(json: any): SherlockChangesetV3 {
    return SherlockChangesetV3FromJSONTyped(json, false);
}

export function SherlockChangesetV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockChangesetV3 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appliedAt': !exists(json, 'appliedAt') ? undefined : (new Date(json['appliedAt'])),
        'appliedBy': !exists(json, 'appliedBy') ? undefined : json['appliedBy'],
        'appliedByInfo': !exists(json, 'appliedByInfo') ? undefined : SherlockUserV3FromJSON(json['appliedByInfo']),
        'chartRelease': !exists(json, 'chartRelease') ? undefined : json['chartRelease'],
        'chartReleaseInfo': !exists(json, 'chartReleaseInfo') ? undefined : SherlockChartReleaseV3FromJSON(json['chartReleaseInfo']),
        'ciIdentifier': !exists(json, 'ciIdentifier') ? undefined : SherlockCiIdentifierV3FromJSON(json['ciIdentifier']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'fromAppVersionBranch': !exists(json, 'fromAppVersionBranch') ? undefined : json['fromAppVersionBranch'],
        'fromAppVersionCommit': !exists(json, 'fromAppVersionCommit') ? undefined : json['fromAppVersionCommit'],
        'fromAppVersionExact': !exists(json, 'fromAppVersionExact') ? undefined : json['fromAppVersionExact'],
        'fromAppVersionFollowChartRelease': !exists(json, 'fromAppVersionFollowChartRelease') ? undefined : json['fromAppVersionFollowChartRelease'],
        'fromAppVersionReference': !exists(json, 'fromAppVersionReference') ? undefined : json['fromAppVersionReference'],
        'fromAppVersionResolver': !exists(json, 'fromAppVersionResolver') ? undefined : json['fromAppVersionResolver'],
        'fromChartVersionExact': !exists(json, 'fromChartVersionExact') ? undefined : json['fromChartVersionExact'],
        'fromChartVersionFollowChartRelease': !exists(json, 'fromChartVersionFollowChartRelease') ? undefined : json['fromChartVersionFollowChartRelease'],
        'fromChartVersionReference': !exists(json, 'fromChartVersionReference') ? undefined : json['fromChartVersionReference'],
        'fromChartVersionResolver': !exists(json, 'fromChartVersionResolver') ? undefined : json['fromChartVersionResolver'],
        'fromFirecloudDevelopRef': !exists(json, 'fromFirecloudDevelopRef') ? undefined : json['fromFirecloudDevelopRef'],
        'fromHelmfileRef': !exists(json, 'fromHelmfileRef') ? undefined : json['fromHelmfileRef'],
        'fromHelmfileRefEnabled': !exists(json, 'fromHelmfileRefEnabled') ? undefined : json['fromHelmfileRefEnabled'],
        'fromResolvedAt': !exists(json, 'fromResolvedAt') ? undefined : (new Date(json['fromResolvedAt'])),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'newAppVersions': !exists(json, 'newAppVersions') ? undefined : ((json['newAppVersions'] as Array<any>).map(SherlockAppVersionV3FromJSON)),
        'newChartVersions': !exists(json, 'newChartVersions') ? undefined : ((json['newChartVersions'] as Array<any>).map(SherlockChartVersionV3FromJSON)),
        'plannedBy': !exists(json, 'plannedBy') ? undefined : json['plannedBy'],
        'plannedByInfo': !exists(json, 'plannedByInfo') ? undefined : SherlockUserV3FromJSON(json['plannedByInfo']),
        'supersededAt': !exists(json, 'supersededAt') ? undefined : (new Date(json['supersededAt'])),
        'toAppVersionBranch': !exists(json, 'toAppVersionBranch') ? undefined : json['toAppVersionBranch'],
        'toAppVersionCommit': !exists(json, 'toAppVersionCommit') ? undefined : json['toAppVersionCommit'],
        'toAppVersionExact': !exists(json, 'toAppVersionExact') ? undefined : json['toAppVersionExact'],
        'toAppVersionFollowChartRelease': !exists(json, 'toAppVersionFollowChartRelease') ? undefined : json['toAppVersionFollowChartRelease'],
        'toAppVersionReference': !exists(json, 'toAppVersionReference') ? undefined : json['toAppVersionReference'],
        'toAppVersionResolver': !exists(json, 'toAppVersionResolver') ? undefined : json['toAppVersionResolver'],
        'toChartVersionExact': !exists(json, 'toChartVersionExact') ? undefined : json['toChartVersionExact'],
        'toChartVersionFollowChartRelease': !exists(json, 'toChartVersionFollowChartRelease') ? undefined : json['toChartVersionFollowChartRelease'],
        'toChartVersionReference': !exists(json, 'toChartVersionReference') ? undefined : json['toChartVersionReference'],
        'toChartVersionResolver': !exists(json, 'toChartVersionResolver') ? undefined : json['toChartVersionResolver'],
        'toFirecloudDevelopRef': !exists(json, 'toFirecloudDevelopRef') ? undefined : json['toFirecloudDevelopRef'],
        'toHelmfileRef': !exists(json, 'toHelmfileRef') ? undefined : json['toHelmfileRef'],
        'toHelmfileRefEnabled': !exists(json, 'toHelmfileRefEnabled') ? undefined : json['toHelmfileRefEnabled'],
        'toResolvedAt': !exists(json, 'toResolvedAt') ? undefined : (new Date(json['toResolvedAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function SherlockChangesetV3ToJSON(value?: SherlockChangesetV3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appliedAt': value.appliedAt === undefined ? undefined : (value.appliedAt.toISOString()),
        'appliedBy': value.appliedBy,
        'appliedByInfo': SherlockUserV3ToJSON(value.appliedByInfo),
        'chartRelease': value.chartRelease,
        'chartReleaseInfo': SherlockChartReleaseV3ToJSON(value.chartReleaseInfo),
        'ciIdentifier': SherlockCiIdentifierV3ToJSON(value.ciIdentifier),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'fromAppVersionBranch': value.fromAppVersionBranch,
        'fromAppVersionCommit': value.fromAppVersionCommit,
        'fromAppVersionExact': value.fromAppVersionExact,
        'fromAppVersionFollowChartRelease': value.fromAppVersionFollowChartRelease,
        'fromAppVersionReference': value.fromAppVersionReference,
        'fromAppVersionResolver': value.fromAppVersionResolver,
        'fromChartVersionExact': value.fromChartVersionExact,
        'fromChartVersionFollowChartRelease': value.fromChartVersionFollowChartRelease,
        'fromChartVersionReference': value.fromChartVersionReference,
        'fromChartVersionResolver': value.fromChartVersionResolver,
        'fromFirecloudDevelopRef': value.fromFirecloudDevelopRef,
        'fromHelmfileRef': value.fromHelmfileRef,
        'fromHelmfileRefEnabled': value.fromHelmfileRefEnabled,
        'fromResolvedAt': value.fromResolvedAt === undefined ? undefined : (value.fromResolvedAt.toISOString()),
        'id': value.id,
        'newAppVersions': value.newAppVersions === undefined ? undefined : ((value.newAppVersions as Array<any>).map(SherlockAppVersionV3ToJSON)),
        'newChartVersions': value.newChartVersions === undefined ? undefined : ((value.newChartVersions as Array<any>).map(SherlockChartVersionV3ToJSON)),
        'plannedBy': value.plannedBy,
        'plannedByInfo': SherlockUserV3ToJSON(value.plannedByInfo),
        'supersededAt': value.supersededAt === undefined ? undefined : (value.supersededAt.toISOString()),
        'toAppVersionBranch': value.toAppVersionBranch,
        'toAppVersionCommit': value.toAppVersionCommit,
        'toAppVersionExact': value.toAppVersionExact,
        'toAppVersionFollowChartRelease': value.toAppVersionFollowChartRelease,
        'toAppVersionReference': value.toAppVersionReference,
        'toAppVersionResolver': value.toAppVersionResolver,
        'toChartVersionExact': value.toChartVersionExact,
        'toChartVersionFollowChartRelease': value.toChartVersionFollowChartRelease,
        'toChartVersionReference': value.toChartVersionReference,
        'toChartVersionResolver': value.toChartVersionResolver,
        'toFirecloudDevelopRef': value.toFirecloudDevelopRef,
        'toHelmfileRef': value.toHelmfileRef,
        'toHelmfileRefEnabled': value.toHelmfileRefEnabled,
        'toResolvedAt': value.toResolvedAt === undefined ? undefined : (value.toResolvedAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

