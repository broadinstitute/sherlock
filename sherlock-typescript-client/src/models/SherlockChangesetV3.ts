/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SherlockUserV3 } from './SherlockUserV3';
import {
    SherlockUserV3FromJSON,
    SherlockUserV3FromJSONTyped,
    SherlockUserV3ToJSON,
    SherlockUserV3ToJSONTyped,
} from './SherlockUserV3';
import type { SherlockChartReleaseV3 } from './SherlockChartReleaseV3';
import {
    SherlockChartReleaseV3FromJSON,
    SherlockChartReleaseV3FromJSONTyped,
    SherlockChartReleaseV3ToJSON,
    SherlockChartReleaseV3ToJSONTyped,
} from './SherlockChartReleaseV3';
import type { SherlockChartVersionV3 } from './SherlockChartVersionV3';
import {
    SherlockChartVersionV3FromJSON,
    SherlockChartVersionV3FromJSONTyped,
    SherlockChartVersionV3ToJSON,
    SherlockChartVersionV3ToJSONTyped,
} from './SherlockChartVersionV3';
import type { SherlockAppVersionV3 } from './SherlockAppVersionV3';
import {
    SherlockAppVersionV3FromJSON,
    SherlockAppVersionV3FromJSONTyped,
    SherlockAppVersionV3ToJSON,
    SherlockAppVersionV3ToJSONTyped,
} from './SherlockAppVersionV3';
import type { SherlockCiIdentifierV3 } from './SherlockCiIdentifierV3';
import {
    SherlockCiIdentifierV3FromJSON,
    SherlockCiIdentifierV3FromJSONTyped,
    SherlockCiIdentifierV3ToJSON,
    SherlockCiIdentifierV3ToJSONTyped,
} from './SherlockCiIdentifierV3';

/**
 * 
 * @export
 * @interface SherlockChangesetV3
 */
export interface SherlockChangesetV3 {
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    appliedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    appliedBy?: string;
    /**
     * 
     * @type {SherlockUserV3}
     * @memberof SherlockChangesetV3
     */
    appliedByInfo?: SherlockUserV3;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    chartRelease?: string;
    /**
     * 
     * @type {SherlockChartReleaseV3}
     * @memberof SherlockChangesetV3
     */
    chartReleaseInfo?: SherlockChartReleaseV3;
    /**
     * 
     * @type {SherlockCiIdentifierV3}
     * @memberof SherlockChangesetV3
     */
    ciIdentifier?: SherlockCiIdentifierV3;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionCommit?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromAppVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromChartVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    fromHelmfileRef?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockChangesetV3
     */
    fromHelmfileRefEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    fromResolvedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof SherlockChangesetV3
     */
    id?: number;
    /**
     * 
     * @type {Array<SherlockAppVersionV3>}
     * @memberof SherlockChangesetV3
     */
    newAppVersions?: Array<SherlockAppVersionV3>;
    /**
     * 
     * @type {Array<SherlockChartVersionV3>}
     * @memberof SherlockChangesetV3
     */
    newChartVersions?: Array<SherlockChartVersionV3>;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    plannedBy?: string;
    /**
     * 
     * @type {SherlockUserV3}
     * @memberof SherlockChangesetV3
     */
    plannedByInfo?: SherlockUserV3;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    supersededAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionCommit?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toAppVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionFollowChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionReference?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toChartVersionResolver?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChangesetV3
     */
    toHelmfileRef?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockChangesetV3
     */
    toHelmfileRefEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    toResolvedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SherlockChangesetV3
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the SherlockChangesetV3 interface.
 */
export function instanceOfSherlockChangesetV3(value: object): value is SherlockChangesetV3 {
    return true;
}

export function SherlockChangesetV3FromJSON(json: any): SherlockChangesetV3 {
    return SherlockChangesetV3FromJSONTyped(json, false);
}

export function SherlockChangesetV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockChangesetV3 {
    if (json == null) {
        return json;
    }
    return {
        
        'appliedAt': json['appliedAt'] == null ? undefined : (new Date(json['appliedAt'])),
        'appliedBy': json['appliedBy'] == null ? undefined : json['appliedBy'],
        'appliedByInfo': json['appliedByInfo'] == null ? undefined : SherlockUserV3FromJSON(json['appliedByInfo']),
        'chartRelease': json['chartRelease'] == null ? undefined : json['chartRelease'],
        'chartReleaseInfo': json['chartReleaseInfo'] == null ? undefined : SherlockChartReleaseV3FromJSON(json['chartReleaseInfo']),
        'ciIdentifier': json['ciIdentifier'] == null ? undefined : SherlockCiIdentifierV3FromJSON(json['ciIdentifier']),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'fromAppVersionBranch': json['fromAppVersionBranch'] == null ? undefined : json['fromAppVersionBranch'],
        'fromAppVersionCommit': json['fromAppVersionCommit'] == null ? undefined : json['fromAppVersionCommit'],
        'fromAppVersionExact': json['fromAppVersionExact'] == null ? undefined : json['fromAppVersionExact'],
        'fromAppVersionFollowChartRelease': json['fromAppVersionFollowChartRelease'] == null ? undefined : json['fromAppVersionFollowChartRelease'],
        'fromAppVersionReference': json['fromAppVersionReference'] == null ? undefined : json['fromAppVersionReference'],
        'fromAppVersionResolver': json['fromAppVersionResolver'] == null ? undefined : json['fromAppVersionResolver'],
        'fromChartVersionExact': json['fromChartVersionExact'] == null ? undefined : json['fromChartVersionExact'],
        'fromChartVersionFollowChartRelease': json['fromChartVersionFollowChartRelease'] == null ? undefined : json['fromChartVersionFollowChartRelease'],
        'fromChartVersionReference': json['fromChartVersionReference'] == null ? undefined : json['fromChartVersionReference'],
        'fromChartVersionResolver': json['fromChartVersionResolver'] == null ? undefined : json['fromChartVersionResolver'],
        'fromHelmfileRef': json['fromHelmfileRef'] == null ? undefined : json['fromHelmfileRef'],
        'fromHelmfileRefEnabled': json['fromHelmfileRefEnabled'] == null ? undefined : json['fromHelmfileRefEnabled'],
        'fromResolvedAt': json['fromResolvedAt'] == null ? undefined : (new Date(json['fromResolvedAt'])),
        'id': json['id'] == null ? undefined : json['id'],
        'newAppVersions': json['newAppVersions'] == null ? undefined : ((json['newAppVersions'] as Array<any>).map(SherlockAppVersionV3FromJSON)),
        'newChartVersions': json['newChartVersions'] == null ? undefined : ((json['newChartVersions'] as Array<any>).map(SherlockChartVersionV3FromJSON)),
        'plannedBy': json['plannedBy'] == null ? undefined : json['plannedBy'],
        'plannedByInfo': json['plannedByInfo'] == null ? undefined : SherlockUserV3FromJSON(json['plannedByInfo']),
        'supersededAt': json['supersededAt'] == null ? undefined : (new Date(json['supersededAt'])),
        'toAppVersionBranch': json['toAppVersionBranch'] == null ? undefined : json['toAppVersionBranch'],
        'toAppVersionCommit': json['toAppVersionCommit'] == null ? undefined : json['toAppVersionCommit'],
        'toAppVersionExact': json['toAppVersionExact'] == null ? undefined : json['toAppVersionExact'],
        'toAppVersionFollowChartRelease': json['toAppVersionFollowChartRelease'] == null ? undefined : json['toAppVersionFollowChartRelease'],
        'toAppVersionReference': json['toAppVersionReference'] == null ? undefined : json['toAppVersionReference'],
        'toAppVersionResolver': json['toAppVersionResolver'] == null ? undefined : json['toAppVersionResolver'],
        'toChartVersionExact': json['toChartVersionExact'] == null ? undefined : json['toChartVersionExact'],
        'toChartVersionFollowChartRelease': json['toChartVersionFollowChartRelease'] == null ? undefined : json['toChartVersionFollowChartRelease'],
        'toChartVersionReference': json['toChartVersionReference'] == null ? undefined : json['toChartVersionReference'],
        'toChartVersionResolver': json['toChartVersionResolver'] == null ? undefined : json['toChartVersionResolver'],
        'toHelmfileRef': json['toHelmfileRef'] == null ? undefined : json['toHelmfileRef'],
        'toHelmfileRefEnabled': json['toHelmfileRefEnabled'] == null ? undefined : json['toHelmfileRefEnabled'],
        'toResolvedAt': json['toResolvedAt'] == null ? undefined : (new Date(json['toResolvedAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

  export function SherlockChangesetV3ToJSON(json: any): SherlockChangesetV3 {
      return SherlockChangesetV3ToJSONTyped(json, false);
  }

  export function SherlockChangesetV3ToJSONTyped(value?: SherlockChangesetV3 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'appliedAt': value['appliedAt'] == null ? undefined : ((value['appliedAt']).toISOString()),
        'appliedBy': value['appliedBy'],
        'appliedByInfo': SherlockUserV3ToJSON(value['appliedByInfo']),
        'chartRelease': value['chartRelease'],
        'chartReleaseInfo': SherlockChartReleaseV3ToJSON(value['chartReleaseInfo']),
        'ciIdentifier': SherlockCiIdentifierV3ToJSON(value['ciIdentifier']),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'fromAppVersionBranch': value['fromAppVersionBranch'],
        'fromAppVersionCommit': value['fromAppVersionCommit'],
        'fromAppVersionExact': value['fromAppVersionExact'],
        'fromAppVersionFollowChartRelease': value['fromAppVersionFollowChartRelease'],
        'fromAppVersionReference': value['fromAppVersionReference'],
        'fromAppVersionResolver': value['fromAppVersionResolver'],
        'fromChartVersionExact': value['fromChartVersionExact'],
        'fromChartVersionFollowChartRelease': value['fromChartVersionFollowChartRelease'],
        'fromChartVersionReference': value['fromChartVersionReference'],
        'fromChartVersionResolver': value['fromChartVersionResolver'],
        'fromHelmfileRef': value['fromHelmfileRef'],
        'fromHelmfileRefEnabled': value['fromHelmfileRefEnabled'],
        'fromResolvedAt': value['fromResolvedAt'] == null ? undefined : ((value['fromResolvedAt']).toISOString()),
        'id': value['id'],
        'newAppVersions': value['newAppVersions'] == null ? undefined : ((value['newAppVersions'] as Array<any>).map(SherlockAppVersionV3ToJSON)),
        'newChartVersions': value['newChartVersions'] == null ? undefined : ((value['newChartVersions'] as Array<any>).map(SherlockChartVersionV3ToJSON)),
        'plannedBy': value['plannedBy'],
        'plannedByInfo': SherlockUserV3ToJSON(value['plannedByInfo']),
        'supersededAt': value['supersededAt'] == null ? undefined : ((value['supersededAt']).toISOString()),
        'toAppVersionBranch': value['toAppVersionBranch'],
        'toAppVersionCommit': value['toAppVersionCommit'],
        'toAppVersionExact': value['toAppVersionExact'],
        'toAppVersionFollowChartRelease': value['toAppVersionFollowChartRelease'],
        'toAppVersionReference': value['toAppVersionReference'],
        'toAppVersionResolver': value['toAppVersionResolver'],
        'toChartVersionExact': value['toChartVersionExact'],
        'toChartVersionFollowChartRelease': value['toChartVersionFollowChartRelease'],
        'toChartVersionReference': value['toChartVersionReference'],
        'toChartVersionResolver': value['toChartVersionResolver'],
        'toHelmfileRef': value['toHelmfileRef'],
        'toHelmfileRefEnabled': value['toHelmfileRefEnabled'],
        'toResolvedAt': value['toResolvedAt'] == null ? undefined : ((value['toResolvedAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

