/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockGithubActionsJobV3
 */
export interface SherlockGithubActionsJobV3 {
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsJobV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof SherlockGithubActionsJobV3
     */
    githubActionsAttemptNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof SherlockGithubActionsJobV3
     */
    githubActionsJobID?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsJobV3
     */
    githubActionsOwner?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsJobV3
     */
    githubActionsRepo?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockGithubActionsJobV3
     */
    githubActionsRunID?: number;
    /**
     * 
     * @type {number}
     * @memberof SherlockGithubActionsJobV3
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsJobV3
     */
    jobCreatedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsJobV3
     */
    jobStartedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsJobV3
     */
    jobTerminalAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsJobV3
     */
    status?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsJobV3
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the SherlockGithubActionsJobV3 interface.
 */
export function instanceOfSherlockGithubActionsJobV3(value: object): value is SherlockGithubActionsJobV3 {
    return true;
}

export function SherlockGithubActionsJobV3FromJSON(json: any): SherlockGithubActionsJobV3 {
    return SherlockGithubActionsJobV3FromJSONTyped(json, false);
}

export function SherlockGithubActionsJobV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockGithubActionsJobV3 {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'githubActionsAttemptNumber': json['githubActionsAttemptNumber'] == null ? undefined : json['githubActionsAttemptNumber'],
        'githubActionsJobID': json['githubActionsJobID'] == null ? undefined : json['githubActionsJobID'],
        'githubActionsOwner': json['githubActionsOwner'] == null ? undefined : json['githubActionsOwner'],
        'githubActionsRepo': json['githubActionsRepo'] == null ? undefined : json['githubActionsRepo'],
        'githubActionsRunID': json['githubActionsRunID'] == null ? undefined : json['githubActionsRunID'],
        'id': json['id'] == null ? undefined : json['id'],
        'jobCreatedAt': json['jobCreatedAt'] == null ? undefined : (new Date(json['jobCreatedAt'])),
        'jobStartedAt': json['jobStartedAt'] == null ? undefined : (new Date(json['jobStartedAt'])),
        'jobTerminalAt': json['jobTerminalAt'] == null ? undefined : (new Date(json['jobTerminalAt'])),
        'status': json['status'] == null ? undefined : json['status'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function SherlockGithubActionsJobV3ToJSON(json: any): SherlockGithubActionsJobV3 {
    return SherlockGithubActionsJobV3ToJSONTyped(json, false);
}

export function SherlockGithubActionsJobV3ToJSONTyped(value?: SherlockGithubActionsJobV3 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
        'githubActionsAttemptNumber': value['githubActionsAttemptNumber'],
        'githubActionsJobID': value['githubActionsJobID'],
        'githubActionsOwner': value['githubActionsOwner'],
        'githubActionsRepo': value['githubActionsRepo'],
        'githubActionsRunID': value['githubActionsRunID'],
        'id': value['id'],
        'jobCreatedAt': value['jobCreatedAt'] == null ? value['jobCreatedAt'] : value['jobCreatedAt'].toISOString(),
        'jobStartedAt': value['jobStartedAt'] == null ? value['jobStartedAt'] : value['jobStartedAt'].toISOString(),
        'jobTerminalAt': value['jobTerminalAt'] == null ? value['jobTerminalAt'] : value['jobTerminalAt'].toISOString(),
        'status': value['status'],
        'updatedAt': value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
    };
}

