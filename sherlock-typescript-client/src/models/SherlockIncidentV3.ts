/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockIncidentV3
 */
export interface SherlockIncidentV3 {
    /**
     * 
     * @type {Date}
     * @memberof SherlockIncidentV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockIncidentV3
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockIncidentV3
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockIncidentV3
     */
    remediatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockIncidentV3
     */
    reviewCompletedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockIncidentV3
     */
    startedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockIncidentV3
     */
    ticket?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockIncidentV3
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the SherlockIncidentV3 interface.
 */
export function instanceOfSherlockIncidentV3(value: object): boolean {
    return true;
}

export function SherlockIncidentV3FromJSON(json: any): SherlockIncidentV3 {
    return SherlockIncidentV3FromJSONTyped(json, false);
}

export function SherlockIncidentV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockIncidentV3 {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'] == null ? undefined : json['id'],
        'remediatedAt': json['remediatedAt'] == null ? undefined : json['remediatedAt'],
        'reviewCompletedAt': json['reviewCompletedAt'] == null ? undefined : json['reviewCompletedAt'],
        'startedAt': json['startedAt'] == null ? undefined : json['startedAt'],
        'ticket': json['ticket'] == null ? undefined : json['ticket'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function SherlockIncidentV3ToJSON(value?: SherlockIncidentV3 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'description': value['description'],
        'id': value['id'],
        'remediatedAt': value['remediatedAt'],
        'reviewCompletedAt': value['reviewCompletedAt'],
        'startedAt': value['startedAt'],
        'ticket': value['ticket'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

