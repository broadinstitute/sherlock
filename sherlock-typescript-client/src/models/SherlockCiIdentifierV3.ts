/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SherlockCiRunV3 } from './SherlockCiRunV3';
import {
    SherlockCiRunV3FromJSON,
    SherlockCiRunV3FromJSONTyped,
    SherlockCiRunV3ToJSON,
} from './SherlockCiRunV3';

/**
 * 
 * @export
 * @interface SherlockCiIdentifierV3
 */
export interface SherlockCiIdentifierV3 {
    /**
     * 
     * @type {Array<SherlockCiRunV3>}
     * @memberof SherlockCiIdentifierV3
     */
    ciRuns?: Array<SherlockCiRunV3>;
    /**
     * 
     * @type {Date}
     * @memberof SherlockCiIdentifierV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiIdentifierV3
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof SherlockCiIdentifierV3
     */
    resourceID?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockCiIdentifierV3
     */
    resourceType?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockCiIdentifierV3
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the SherlockCiIdentifierV3 interface.
 */
export function instanceOfSherlockCiIdentifierV3(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SherlockCiIdentifierV3FromJSON(json: any): SherlockCiIdentifierV3 {
    return SherlockCiIdentifierV3FromJSONTyped(json, false);
}

export function SherlockCiIdentifierV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockCiIdentifierV3 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ciRuns': !exists(json, 'ciRuns') ? undefined : ((json['ciRuns'] as Array<any>).map(SherlockCiRunV3FromJSON)),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'resourceID': !exists(json, 'resourceID') ? undefined : json['resourceID'],
        'resourceType': !exists(json, 'resourceType') ? undefined : json['resourceType'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function SherlockCiIdentifierV3ToJSON(value?: SherlockCiIdentifierV3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ciRuns': value.ciRuns === undefined ? undefined : ((value.ciRuns as Array<any>).map(SherlockCiRunV3ToJSON)),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'id': value.id,
        'resourceID': value.resourceID,
        'resourceType': value.resourceType,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

