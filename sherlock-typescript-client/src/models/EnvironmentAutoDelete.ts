/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EnvironmentAutoDelete
 */
export interface EnvironmentAutoDelete {
    /**
     * 
     * @type {Date}
     * @memberof EnvironmentAutoDelete
     */
    after?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof EnvironmentAutoDelete
     */
    enabled?: boolean;
}

/**
 * Check if a given object implements the EnvironmentAutoDelete interface.
 */
export function instanceOfEnvironmentAutoDelete(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EnvironmentAutoDeleteFromJSON(json: any): EnvironmentAutoDelete {
    return EnvironmentAutoDeleteFromJSONTyped(json, false);
}

export function EnvironmentAutoDeleteFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnvironmentAutoDelete {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'after': !exists(json, 'after') ? undefined : (new Date(json['after'])),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
    };
}

export function EnvironmentAutoDeleteToJSON(value?: EnvironmentAutoDelete | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'after': value.after === undefined ? undefined : (value.after.toISOString()),
        'enabled': value.enabled,
    };
}

