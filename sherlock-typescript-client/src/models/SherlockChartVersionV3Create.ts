/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockChartVersionV3Create
 */
export interface SherlockChartVersionV3Create {
    /**
     * Required when creating
     * @type {string}
     * @memberof SherlockChartVersionV3Create
     */
    chart?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof SherlockChartVersionV3Create
     */
    chartVersion?: string;
    /**
     * Generally the Git commit message
     * @type {string}
     * @memberof SherlockChartVersionV3Create
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockChartVersionV3Create
     */
    parentChartVersion?: string;
}

/**
 * Check if a given object implements the SherlockChartVersionV3Create interface.
 */
export function instanceOfSherlockChartVersionV3Create(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SherlockChartVersionV3CreateFromJSON(json: any): SherlockChartVersionV3Create {
    return SherlockChartVersionV3CreateFromJSONTyped(json, false);
}

export function SherlockChartVersionV3CreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockChartVersionV3Create {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chart': !exists(json, 'chart') ? undefined : json['chart'],
        'chartVersion': !exists(json, 'chartVersion') ? undefined : json['chartVersion'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'parentChartVersion': !exists(json, 'parentChartVersion') ? undefined : json['parentChartVersion'],
    };
}

export function SherlockChartVersionV3CreateToJSON(value?: SherlockChartVersionV3Create | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chart': value.chart,
        'chartVersion': value.chartVersion,
        'description': value.description,
        'parentChartVersion': value.parentChartVersion,
    };
}

