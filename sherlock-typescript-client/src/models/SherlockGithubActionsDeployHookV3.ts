/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockGithubActionsDeployHookV3
 */
export interface SherlockGithubActionsDeployHookV3 {
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    githubActionsDefaultRef?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    githubActionsOwner?: string;
    /**
     * This field determines what git ref the workflow will be run on. The default of always-use-default-ref always uses the default ref; use-app-version-as-ref will use the app version (when available) as the ref, useful when versions are always commit hashes or tags; use-app-version-commit-as-ref will use the app version's commit (when available) as the ref, useful when the repo is configured to fully report app versions to Sherlock.
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    githubActionsRefBehavior?: SherlockGithubActionsDeployHookV3GithubActionsRefBehaviorEnum;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    githubActionsRepo?: string;
    /**
     * These workflow inputs will be passed statically as-is to GitHub's workflow dispatch API (https://docs.github.com/en/rest/actions/workflows#create-a-workflow-dispatch-event) as the `inputs` parameter object.
     * @type {object}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    githubActionsWorkflowInputs?: object;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    githubActionsWorkflowPath?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    onChartRelease?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    onEnvironment?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    onFailure?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    onSuccess?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SherlockGithubActionsDeployHookV3
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const SherlockGithubActionsDeployHookV3GithubActionsRefBehaviorEnum = {
    AlwaysUseDefaultRef: 'always-use-default-ref',
    UseAppVersionAsRef: 'use-app-version-as-ref',
    UseAppVersionCommitAsRef: 'use-app-version-commit-as-ref'
} as const;
export type SherlockGithubActionsDeployHookV3GithubActionsRefBehaviorEnum = typeof SherlockGithubActionsDeployHookV3GithubActionsRefBehaviorEnum[keyof typeof SherlockGithubActionsDeployHookV3GithubActionsRefBehaviorEnum];


/**
 * Check if a given object implements the SherlockGithubActionsDeployHookV3 interface.
 */
export function instanceOfSherlockGithubActionsDeployHookV3(value: object): boolean {
    return true;
}

export function SherlockGithubActionsDeployHookV3FromJSON(json: any): SherlockGithubActionsDeployHookV3 {
    return SherlockGithubActionsDeployHookV3FromJSONTyped(json, false);
}

export function SherlockGithubActionsDeployHookV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockGithubActionsDeployHookV3 {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'githubActionsDefaultRef': !exists(json, 'githubActionsDefaultRef') ? undefined : json['githubActionsDefaultRef'],
        'githubActionsOwner': !exists(json, 'githubActionsOwner') ? undefined : json['githubActionsOwner'],
        'githubActionsRefBehavior': !exists(json, 'githubActionsRefBehavior') ? undefined : json['githubActionsRefBehavior'],
        'githubActionsRepo': !exists(json, 'githubActionsRepo') ? undefined : json['githubActionsRepo'],
        'githubActionsWorkflowInputs': !exists(json, 'githubActionsWorkflowInputs') ? undefined : json['githubActionsWorkflowInputs'],
        'githubActionsWorkflowPath': !exists(json, 'githubActionsWorkflowPath') ? undefined : json['githubActionsWorkflowPath'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'onChartRelease': !exists(json, 'onChartRelease') ? undefined : json['onChartRelease'],
        'onEnvironment': !exists(json, 'onEnvironment') ? undefined : json['onEnvironment'],
        'onFailure': !exists(json, 'onFailure') ? undefined : json['onFailure'],
        'onSuccess': !exists(json, 'onSuccess') ? undefined : json['onSuccess'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function SherlockGithubActionsDeployHookV3ToJSON(value?: SherlockGithubActionsDeployHookV3 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': !exists(value, 'createdAt') ? undefined : ((value['createdAt']).toISOString()),
        'githubActionsDefaultRef': value['githubActionsDefaultRef'],
        'githubActionsOwner': value['githubActionsOwner'],
        'githubActionsRefBehavior': value['githubActionsRefBehavior'],
        'githubActionsRepo': value['githubActionsRepo'],
        'githubActionsWorkflowInputs': value['githubActionsWorkflowInputs'],
        'githubActionsWorkflowPath': value['githubActionsWorkflowPath'],
        'id': value['id'],
        'onChartRelease': value['onChartRelease'],
        'onEnvironment': value['onEnvironment'],
        'onFailure': value['onFailure'],
        'onSuccess': value['onSuccess'],
        'updatedAt': !exists(value, 'updatedAt') ? undefined : ((value['updatedAt']).toISOString()),
    };
}

