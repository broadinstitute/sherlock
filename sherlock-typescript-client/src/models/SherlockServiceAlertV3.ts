/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SherlockServiceAlertV3
 */
export interface SherlockServiceAlertV3 {
    /**
     * 
     * @type {Date}
     * @memberof SherlockServiceAlertV3
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    deletedBy?: string;
    /**
     * 
     * @type {number}
     * @memberof SherlockServiceAlertV3
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    link?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    onEnvironment?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    severity?: SherlockServiceAlertV3SeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    title?: string;
    /**
     * 
     * @type {Date}
     * @memberof SherlockServiceAlertV3
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    updatedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof SherlockServiceAlertV3
     */
    uuid?: string;
}


/**
 * @export
 */
export const SherlockServiceAlertV3SeverityEnum = {
    Blocker: 'blocker',
    Critical: ' critical',
    Minor: ' minor'
} as const;
export type SherlockServiceAlertV3SeverityEnum = typeof SherlockServiceAlertV3SeverityEnum[keyof typeof SherlockServiceAlertV3SeverityEnum];


/**
 * Check if a given object implements the SherlockServiceAlertV3 interface.
 */
export function instanceOfSherlockServiceAlertV3(value: object): value is SherlockServiceAlertV3 {
    return true;
}

export function SherlockServiceAlertV3FromJSON(json: any): SherlockServiceAlertV3 {
    return SherlockServiceAlertV3FromJSONTyped(json, false);
}

export function SherlockServiceAlertV3FromJSONTyped(json: any, ignoreDiscriminator: boolean): SherlockServiceAlertV3 {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'deletedBy': json['deletedBy'] == null ? undefined : json['deletedBy'],
        'id': json['id'] == null ? undefined : json['id'],
        'link': json['link'] == null ? undefined : json['link'],
        'message': json['message'] == null ? undefined : json['message'],
        'onEnvironment': json['onEnvironment'] == null ? undefined : json['onEnvironment'],
        'severity': json['severity'] == null ? undefined : json['severity'],
        'title': json['title'] == null ? undefined : json['title'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'updatedBy': json['updatedBy'] == null ? undefined : json['updatedBy'],
        'uuid': json['uuid'] == null ? undefined : json['uuid'],
    };
}

export function SherlockServiceAlertV3ToJSON(json: any): SherlockServiceAlertV3 {
    return SherlockServiceAlertV3ToJSONTyped(json, false);
}

export function SherlockServiceAlertV3ToJSONTyped(value?: SherlockServiceAlertV3 | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': value['createdAt'] == null ? value['createdAt'] : value['createdAt'].toISOString(),
        'createdBy': value['createdBy'],
        'deletedBy': value['deletedBy'],
        'id': value['id'],
        'link': value['link'],
        'message': value['message'],
        'onEnvironment': value['onEnvironment'],
        'severity': value['severity'],
        'title': value['title'],
        'updatedAt': value['updatedAt'] == null ? value['updatedAt'] : value['updatedAt'].toISOString(),
        'updatedBy': value['updatedBy'],
        'uuid': value['uuid'],
    };
}

