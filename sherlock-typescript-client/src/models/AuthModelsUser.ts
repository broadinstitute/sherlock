/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthModelsAuthMethod } from './AuthModelsAuthMethod';
import {
    AuthModelsAuthMethodFromJSON,
    AuthModelsAuthMethodFromJSONTyped,
    AuthModelsAuthMethodToJSON,
} from './AuthModelsAuthMethod';
import type { AuthModelsExtraPermissions } from './AuthModelsExtraPermissions';
import {
    AuthModelsExtraPermissionsFromJSON,
    AuthModelsExtraPermissionsFromJSONTyped,
    AuthModelsExtraPermissionsToJSON,
} from './AuthModelsExtraPermissions';
import type { AuthModelsFirecloudAccount } from './AuthModelsFirecloudAccount';
import {
    AuthModelsFirecloudAccountFromJSON,
    AuthModelsFirecloudAccountFromJSONTyped,
    AuthModelsFirecloudAccountToJSON,
} from './AuthModelsFirecloudAccount';

/**
 * 
 * @export
 * @interface AuthModelsUser
 */
export interface AuthModelsUser {
    /**
     * 
     * @type {AuthModelsAuthMethod}
     * @memberof AuthModelsUser
     */
    authMethod?: AuthModelsAuthMethod;
    /**
     * 
     * @type {string}
     * @memberof AuthModelsUser
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthModelsUser
     */
    githubID?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthModelsUser
     */
    githubUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthModelsUser
     */
    googleID?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthModelsUser
     */
    id?: number;
    /**
     * 
     * @type {AuthModelsExtraPermissions}
     * @memberof AuthModelsUser
     */
    matchedExtraPermissions?: AuthModelsExtraPermissions;
    /**
     * 
     * @type {AuthModelsFirecloudAccount}
     * @memberof AuthModelsUser
     */
    matchedFirecloudAccount?: AuthModelsFirecloudAccount;
    /**
     * 
     * @type {string}
     * @memberof AuthModelsUser
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthModelsUser
     */
    nameInferredFromGithub?: boolean;
    /**
     * 
     * @type {AuthModelsUser}
     * @memberof AuthModelsUser
     */
    via?: AuthModelsUser;
}

/**
 * Check if a given object implements the AuthModelsUser interface.
 */
export function instanceOfAuthModelsUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthModelsUserFromJSON(json: any): AuthModelsUser {
    return AuthModelsUserFromJSONTyped(json, false);
}

export function AuthModelsUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthModelsUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authMethod': !exists(json, 'authMethod') ? undefined : AuthModelsAuthMethodFromJSON(json['authMethod']),
        'email': !exists(json, 'email') ? undefined : json['email'],
        'githubID': !exists(json, 'githubID') ? undefined : json['githubID'],
        'githubUsername': !exists(json, 'githubUsername') ? undefined : json['githubUsername'],
        'googleID': !exists(json, 'googleID') ? undefined : json['googleID'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'matchedExtraPermissions': !exists(json, 'matchedExtraPermissions') ? undefined : AuthModelsExtraPermissionsFromJSON(json['matchedExtraPermissions']),
        'matchedFirecloudAccount': !exists(json, 'matchedFirecloudAccount') ? undefined : AuthModelsFirecloudAccountFromJSON(json['matchedFirecloudAccount']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nameInferredFromGithub': !exists(json, 'nameInferredFromGithub') ? undefined : json['nameInferredFromGithub'],
        'via': !exists(json, 'via') ? undefined : AuthModelsUserFromJSON(json['via']),
    };
}

export function AuthModelsUserToJSON(value?: AuthModelsUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authMethod': AuthModelsAuthMethodToJSON(value.authMethod),
        'email': value.email,
        'githubID': value.githubID,
        'githubUsername': value.githubUsername,
        'googleID': value.googleID,
        'id': value.id,
        'matchedExtraPermissions': AuthModelsExtraPermissionsToJSON(value.matchedExtraPermissions),
        'matchedFirecloudAccount': AuthModelsFirecloudAccountToJSON(value.matchedFirecloudAccount),
        'name': value.name,
        'nameInferredFromGithub': value.nameInferredFromGithub,
        'via': AuthModelsUserToJSON(value.via),
    };
}

