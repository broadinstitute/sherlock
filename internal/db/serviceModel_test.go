package db

import (
	"testing"
	"time"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/broadinstitute/sherlock/internal/services"
	"github.com/google/go-cmp/cmp"
)

// Used to validate sql statements generated by the orm
const expectedListAllServicesQuery string = "SELECT * FROM \"services\""

// sqlmock requires all the expected column names passed as a string
// in order to simulate expected db query results
var serviceColumns []string = []string{"id", "name", "repo_url", "created_at", "updated_at"}

func TestListAllServices(t *testing.T) {
	// Set up stub db
	model, mock := NewMockServiceModel(t, false)

	cases := []struct {
		name     string
		services []services.Service
	}{
		{
			name:     "no existing services",
			services: []services.Service{},
		},
		{
			name: "one existing service",
			services: []services.Service{
				{
					ID:        1,
					Name:      "cromwell",
					RepoURL:   "https://github.com/broadinstitute/cromwell",
					CreatedAt: time.Now(),
					UpdatedAt: time.Now(),
				},
			},
		},
		{
			name: "multiple existing services",
			services: []services.Service{
				{
					ID:        1,
					Name:      "cromwell",
					RepoURL:   "https://github.com/broadinstitute/cromwell",
					CreatedAt: time.Now(),
					UpdatedAt: time.Now(),
				},
				{
					ID:        2,
					Name:      "leonardo",
					RepoURL:   "https://github.com/databiosphere/leonardo",
					CreatedAt: time.Now(),
					UpdatedAt: time.Now(),
				},
				{
					ID:        3,
					Name:      "buffer",
					RepoURL:   "https://github.com/databiosphere/buffer",
					CreatedAt: time.Now(),
					UpdatedAt: time.Now(),
				},
			},
		},
	}

	for _, testCase := range cases {
		t.Run(testCase.name, func(t *testing.T) {
			populateStubData(t, mock, testCase.services)

			services, err := model.ListAll()
			if err != nil {
				t.Errorf("received unexpected error listing servies: %v", err)
			}

			// validates all the expectations registered with the mock db are satisfied
			if err := mock.ExpectationsWereMet(); err != nil {
				t.Errorf("database operation expectations were not met: %v", err)
			}

			expectedServices := testCase.services
			if diff := cmp.Diff(services, expectedServices); diff != "" {
				t.Errorf("unexpected result listing services: %v", diff)
			}
		})
	}

}

func populateStubData(t *testing.T, mock sqlmock.Sqlmock, expectedData []services.Service) {
	t.Helper()

	// setup expected table schema in stub
	expectedRows := mock.NewRows(serviceColumns)
	for _, entry := range expectedData {
		expectedRows.AddRow(entry.ID, entry.Name, entry.RepoURL, entry.CreatedAt, entry.UpdatedAt)
	}
	mock.ExpectQuery(
		expectedListAllServicesQuery,
	).WillReturnRows(expectedRows)
}
