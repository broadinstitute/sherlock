# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sherlock_python_client.models.sherlock_user_v3_deactivate_request import SherlockUserV3DeactivateRequest

class TestSherlockUserV3DeactivateRequest(unittest.TestCase):
    """SherlockUserV3DeactivateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SherlockUserV3DeactivateRequest:
        """Test SherlockUserV3DeactivateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SherlockUserV3DeactivateRequest`
        """
        model = SherlockUserV3DeactivateRequest()
        if include_optional:
            return SherlockUserV3DeactivateRequest(
                suspend_email_handles_across_google_workspace_domains = [
                    ''
                    ],
                user_email_home_domain = 'broadinstitute.org',
                user_emails = [
                    ''
                    ]
            )
        else:
            return SherlockUserV3DeactivateRequest(
        )
        """

    def testSherlockUserV3DeactivateRequest(self):
        """Test SherlockUserV3DeactivateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
