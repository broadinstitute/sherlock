# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sherlock_python_client.models.sherlock_chart_v3_edit import SherlockChartV3Edit

class TestSherlockChartV3Edit(unittest.TestCase):
    """SherlockChartV3Edit unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SherlockChartV3Edit:
        """Test SherlockChartV3Edit
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SherlockChartV3Edit`
        """
        model = SherlockChartV3Edit()
        if include_optional:
            return SherlockChartV3Edit(
                app_image_git_main_branch = '',
                app_image_git_repo = '',
                chart_exposes_endpoint = True,
                chart_repo = 'terra-helm',
                default_port = 56,
                default_protocol = 'https',
                default_subdomain = '',
                description = '',
                pact_participant = True,
                playbook_url = ''
            )
        else:
            return SherlockChartV3Edit(
        )
        """

    def testSherlockChartV3Edit(self):
        """Test SherlockChartV3Edit"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
