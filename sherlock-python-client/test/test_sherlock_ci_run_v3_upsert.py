# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sherlock_python_client.models.sherlock_ci_run_v3_upsert import SherlockCiRunV3Upsert

class TestSherlockCiRunV3Upsert(unittest.TestCase):
    """SherlockCiRunV3Upsert unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SherlockCiRunV3Upsert:
        """Test SherlockCiRunV3Upsert
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SherlockCiRunV3Upsert`
        """
        model = SherlockCiRunV3Upsert()
        if include_optional:
            return SherlockCiRunV3Upsert(
                app_versions = [
                    ''
                    ],
                argo_workflows_name = '',
                argo_workflows_namespace = '',
                argo_workflows_template = '',
                changesets = [
                    ''
                    ],
                chart_release_statuses = {
                    'key' : ''
                    },
                chart_releases = [
                    ''
                    ],
                chart_versions = [
                    ''
                    ],
                charts = [
                    ''
                    ],
                clusters = [
                    ''
                    ],
                environments = [
                    ''
                    ],
                github_actions_attempt_number = 56,
                github_actions_owner = '',
                github_actions_repo = '',
                github_actions_run_id = 56,
                github_actions_workflow_path = '',
                ignore_bad_selectors = True,
                notify_slack_channels_upon_failure = [
                    ''
                    ],
                notify_slack_channels_upon_retry = [
                    ''
                    ],
                notify_slack_channels_upon_success = [
                    ''
                    ],
                notify_slack_custom_icon = '',
                platform = '',
                relate_to_changeset_new_versions = 'when-static',
                started_at = '',
                status = '',
                terminal_at = ''
            )
        else:
            return SherlockCiRunV3Upsert(
        )
        """

    def testSherlockCiRunV3Upsert(self):
        """Test SherlockCiRunV3Upsert"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
