# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SherlockCiRunV3Upsert(BaseModel):
    """
    SherlockCiRunV3Upsert
    """ # noqa: E501
    app_versions: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates.", alias="appVersions")
    argo_workflows_name: Optional[StrictStr] = Field(default=None, alias="argoWorkflowsName")
    argo_workflows_namespace: Optional[StrictStr] = Field(default=None, alias="argoWorkflowsNamespace")
    argo_workflows_template: Optional[StrictStr] = Field(default=None, alias="argoWorkflowsTemplate")
    changesets: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates. Spreads to associated chart releases, environments, and clusters.")
    chart_release_statuses: Optional[Dict[str, StrictStr]] = Field(default=None, description="Keys treated like chartReleases. Values set resource-specific statuses for chart releases and associated changesets, new app versions, and new chart versions.", alias="chartReleaseStatuses")
    chart_releases: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates. Spreads to associated environments and clusters.", alias="chartReleases")
    chart_versions: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates.", alias="chartVersions")
    charts: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates.")
    clusters: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates. Spreads to contained chart releases and their environments.")
    environments: Optional[List[StrictStr]] = Field(default=None, description="Always appends; will eliminate duplicates. Spreads to contained chart releases and their clusters.")
    github_actions_attempt_number: Optional[StrictInt] = Field(default=None, alias="githubActionsAttemptNumber")
    github_actions_owner: Optional[StrictStr] = Field(default=None, alias="githubActionsOwner")
    github_actions_repo: Optional[StrictStr] = Field(default=None, alias="githubActionsRepo")
    github_actions_run_id: Optional[StrictInt] = Field(default=None, alias="githubActionsRunID")
    github_actions_workflow_path: Optional[StrictStr] = Field(default=None, alias="githubActionsWorkflowPath")
    ignore_bad_selectors: Optional[StrictBool] = Field(default=False, description="If set to true, errors handling selectors for relations should be ignored. Normally, passing an unknown chart, cluster, etc. will abort the request, but they won't if this is true.", alias="ignoreBadSelectors")
    notify_slack_channels_upon_failure: Optional[List[StrictStr]] = Field(default=None, description="Slack channels to notify if this CiRun fails. This field is always appended to when mutated.", alias="notifySlackChannelsUponFailure")
    notify_slack_channels_upon_retry: Optional[List[StrictStr]] = Field(default=None, description="Slack channels to notify if this CiRun is retried. This field is always appended to when mutated. It will de-dupe with the other notify fields.", alias="notifySlackChannelsUponRetry")
    notify_slack_channels_upon_success: Optional[List[StrictStr]] = Field(default=None, description="Slack channels to notify if this CiRun succeeds. This field is always appended to when mutated.", alias="notifySlackChannelsUponSuccess")
    notify_slack_custom_icon: Optional[StrictStr] = Field(default=None, description="Icon to use for success or failure Slack notifications. Can be given either as a URL to an image or as a Slack emoji (using colon shortcodes, like :smiley:). An empty string is ignored to facilitate calling from GitHub Actions (where it's easier to pass an empty string than not send the field at all).", alias="notifySlackCustomIcon")
    platform: Optional[StrictStr] = None
    relate_to_changeset_new_versions: Optional[StrictStr] = Field(default='when-static', description="Makes entries in the changesets field also spread to new app versions and chart versions deployed by the changeset. 'when-static' is the default and does this spreading only when the chart release is in a static environment.", alias="relateToChangesetNewVersions")
    started_at: Optional[StrictStr] = Field(default=None, alias="startedAt")
    status: Optional[StrictStr] = None
    terminal_at: Optional[StrictStr] = Field(default=None, alias="terminalAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["appVersions", "argoWorkflowsName", "argoWorkflowsNamespace", "argoWorkflowsTemplate", "changesets", "chartReleaseStatuses", "chartReleases", "chartVersions", "charts", "clusters", "environments", "githubActionsAttemptNumber", "githubActionsOwner", "githubActionsRepo", "githubActionsRunID", "githubActionsWorkflowPath", "ignoreBadSelectors", "notifySlackChannelsUponFailure", "notifySlackChannelsUponRetry", "notifySlackChannelsUponSuccess", "notifySlackCustomIcon", "platform", "relateToChangesetNewVersions", "startedAt", "status", "terminalAt"]

    @field_validator('relate_to_changeset_new_versions')
    def relate_to_changeset_new_versions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['always', 'when-static', 'never']):
            raise ValueError("must be one of enum values ('always', 'when-static', 'never')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockCiRunV3Upsert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockCiRunV3Upsert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appVersions": obj.get("appVersions"),
            "argoWorkflowsName": obj.get("argoWorkflowsName"),
            "argoWorkflowsNamespace": obj.get("argoWorkflowsNamespace"),
            "argoWorkflowsTemplate": obj.get("argoWorkflowsTemplate"),
            "changesets": obj.get("changesets"),
            "chartReleaseStatuses": obj.get("chartReleaseStatuses"),
            "chartReleases": obj.get("chartReleases"),
            "chartVersions": obj.get("chartVersions"),
            "charts": obj.get("charts"),
            "clusters": obj.get("clusters"),
            "environments": obj.get("environments"),
            "githubActionsAttemptNumber": obj.get("githubActionsAttemptNumber"),
            "githubActionsOwner": obj.get("githubActionsOwner"),
            "githubActionsRepo": obj.get("githubActionsRepo"),
            "githubActionsRunID": obj.get("githubActionsRunID"),
            "githubActionsWorkflowPath": obj.get("githubActionsWorkflowPath"),
            "ignoreBadSelectors": obj.get("ignoreBadSelectors") if obj.get("ignoreBadSelectors") is not None else False,
            "notifySlackChannelsUponFailure": obj.get("notifySlackChannelsUponFailure"),
            "notifySlackChannelsUponRetry": obj.get("notifySlackChannelsUponRetry"),
            "notifySlackChannelsUponSuccess": obj.get("notifySlackChannelsUponSuccess"),
            "notifySlackCustomIcon": obj.get("notifySlackCustomIcon"),
            "platform": obj.get("platform"),
            "relateToChangesetNewVersions": obj.get("relateToChangesetNewVersions") if obj.get("relateToChangesetNewVersions") is not None else 'when-static',
            "startedAt": obj.get("startedAt"),
            "status": obj.get("status"),
            "terminalAt": obj.get("terminalAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


