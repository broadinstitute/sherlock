# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SherlockChartReleaseV3Create(BaseModel):
    """
    SherlockChartReleaseV3Create
    """ # noqa: E501
    app_version_branch: Optional[StrictStr] = Field(default=None, description="When creating, will default to the app's mainline branch if no other app version info is present", alias="appVersionBranch")
    app_version_commit: Optional[StrictStr] = Field(default=None, alias="appVersionCommit")
    app_version_exact: Optional[StrictStr] = Field(default=None, alias="appVersionExact")
    app_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="appVersionFollowChartRelease")
    app_version_resolver: Optional[StrictStr] = Field(default=None, description="// When creating, will default to automatically reference any provided app version fields", alias="appVersionResolver")
    chart: Optional[StrictStr] = Field(default=None, description="Required when creating")
    chart_version_exact: Optional[StrictStr] = Field(default=None, alias="chartVersionExact")
    chart_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="chartVersionFollowChartRelease")
    chart_version_resolver: Optional[StrictStr] = Field(default=None, description="When creating, will default to automatically reference any provided chart version", alias="chartVersionResolver")
    cluster: Optional[StrictStr] = Field(default=None, description="When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.")
    environment: Optional[StrictStr] = Field(default=None, description="Either this or cluster must be provided.")
    helmfile_ref: Optional[StrictStr] = Field(default='HEAD', alias="helmfileRef")
    helmfile_ref_enabled: Optional[StrictBool] = Field(default=False, alias="helmfileRefEnabled")
    included_in_bulk_changesets: Optional[StrictBool] = Field(default=True, alias="includedInBulkChangesets")
    name: Optional[StrictStr] = Field(default=None, description="When creating, will be calculated if left empty")
    namespace: Optional[StrictStr] = Field(default=None, description="When creating, will default to the environment's default namespace, if provided")
    pagerduty_integration: Optional[StrictStr] = Field(default=None, alias="pagerdutyIntegration")
    port: Optional[StrictInt] = Field(default=None, description="When creating, will use the chart's default if left empty")
    protocol: Optional[StrictStr] = Field(default=None, description="When creating, will use the chart's default if left empty")
    subdomain: Optional[StrictStr] = Field(default=None, description="When creating, will use the chart's default if left empty")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["appVersionBranch", "appVersionCommit", "appVersionExact", "appVersionFollowChartRelease", "appVersionResolver", "chart", "chartVersionExact", "chartVersionFollowChartRelease", "chartVersionResolver", "cluster", "environment", "helmfileRef", "helmfileRefEnabled", "includedInBulkChangesets", "name", "namespace", "pagerdutyIntegration", "port", "protocol", "subdomain"]

    @field_validator('app_version_resolver')
    def app_version_resolver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['branch', 'commit', 'exact', 'follow', 'none']):
            raise ValueError("must be one of enum values ('branch', 'commit', 'exact', 'follow', 'none')")
        return value

    @field_validator('chart_version_resolver')
    def chart_version_resolver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['latest', 'exact', 'follow']):
            raise ValueError("must be one of enum values ('latest', 'exact', 'follow')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockChartReleaseV3Create from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockChartReleaseV3Create from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appVersionBranch": obj.get("appVersionBranch"),
            "appVersionCommit": obj.get("appVersionCommit"),
            "appVersionExact": obj.get("appVersionExact"),
            "appVersionFollowChartRelease": obj.get("appVersionFollowChartRelease"),
            "appVersionResolver": obj.get("appVersionResolver"),
            "chart": obj.get("chart"),
            "chartVersionExact": obj.get("chartVersionExact"),
            "chartVersionFollowChartRelease": obj.get("chartVersionFollowChartRelease"),
            "chartVersionResolver": obj.get("chartVersionResolver"),
            "cluster": obj.get("cluster"),
            "environment": obj.get("environment"),
            "helmfileRef": obj.get("helmfileRef") if obj.get("helmfileRef") is not None else 'HEAD',
            "helmfileRefEnabled": obj.get("helmfileRefEnabled") if obj.get("helmfileRefEnabled") is not None else False,
            "includedInBulkChangesets": obj.get("includedInBulkChangesets") if obj.get("includedInBulkChangesets") is not None else True,
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "pagerdutyIntegration": obj.get("pagerdutyIntegration"),
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "subdomain": obj.get("subdomain")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


