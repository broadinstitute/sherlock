# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sherlock_python_client.models.sherlock_role_assignment_v3 import SherlockRoleAssignmentV3
from typing import Optional, Set
from typing_extensions import Self

class SherlockRoleV3(BaseModel):
    """
    SherlockRoleV3
    """ # noqa: E501
    assignments: Optional[List[SherlockRoleAssignmentV3]] = None
    auto_assign_all_users: Optional[StrictBool] = Field(default=None, description="When true, Sherlock will automatically assign all users to this role who do not already have a role assignment", alias="autoAssignAllUsers")
    can_be_glass_broken_by_role: Optional[StrictInt] = Field(default=None, alias="canBeGlassBrokenByRole")
    can_be_glass_broken_by_role_info: Optional[Dict[str, Any]] = Field(default=None, alias="canBeGlassBrokenByRoleInfo")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    default_glass_break_duration: Optional[StrictStr] = Field(default=None, alias="defaultGlassBreakDuration")
    grants_broad_institute_group: Optional[StrictStr] = Field(default=None, alias="grantsBroadInstituteGroup")
    grants_dev_azure_group: Optional[StrictStr] = Field(default=None, alias="grantsDevAzureGroup")
    grants_dev_firecloud_folder_owner: Optional[StrictStr] = Field(default=None, alias="grantsDevFirecloudFolderOwner")
    grants_dev_firecloud_group: Optional[StrictStr] = Field(default=None, alias="grantsDevFirecloudGroup")
    grants_prod_azure_group: Optional[StrictStr] = Field(default=None, alias="grantsProdAzureGroup")
    grants_prod_firecloud_folder_owner: Optional[StrictStr] = Field(default=None, alias="grantsProdFirecloudFolderOwner")
    grants_prod_firecloud_group: Optional[StrictStr] = Field(default=None, alias="grantsProdFirecloudGroup")
    grants_qa_firecloud_folder_owner: Optional[StrictStr] = Field(default=None, alias="grantsQaFirecloudFolderOwner")
    grants_qa_firecloud_group: Optional[StrictStr] = Field(default=None, alias="grantsQaFirecloudGroup")
    grants_sherlock_super_admin: Optional[StrictBool] = Field(default=None, alias="grantsSherlockSuperAdmin")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    suspend_non_suitable_users: Optional[StrictBool] = Field(default=None, description="When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field", alias="suspendNonSuitableUsers")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["assignments", "autoAssignAllUsers", "canBeGlassBrokenByRole", "canBeGlassBrokenByRoleInfo", "createdAt", "defaultGlassBreakDuration", "grantsBroadInstituteGroup", "grantsDevAzureGroup", "grantsDevFirecloudFolderOwner", "grantsDevFirecloudGroup", "grantsProdAzureGroup", "grantsProdFirecloudFolderOwner", "grantsProdFirecloudGroup", "grantsQaFirecloudFolderOwner", "grantsQaFirecloudGroup", "grantsSherlockSuperAdmin", "id", "name", "suspendNonSuitableUsers", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockRoleV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignments (list)
        _items = []
        if self.assignments:
            for _item_assignments in self.assignments:
                if _item_assignments:
                    _items.append(_item_assignments.to_dict())
            _dict['assignments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockRoleV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignments": [SherlockRoleAssignmentV3.from_dict(_item) for _item in obj["assignments"]] if obj.get("assignments") is not None else None,
            "autoAssignAllUsers": obj.get("autoAssignAllUsers"),
            "canBeGlassBrokenByRole": obj.get("canBeGlassBrokenByRole"),
            "canBeGlassBrokenByRoleInfo": obj.get("canBeGlassBrokenByRoleInfo"),
            "createdAt": obj.get("createdAt"),
            "defaultGlassBreakDuration": obj.get("defaultGlassBreakDuration"),
            "grantsBroadInstituteGroup": obj.get("grantsBroadInstituteGroup"),
            "grantsDevAzureGroup": obj.get("grantsDevAzureGroup"),
            "grantsDevFirecloudFolderOwner": obj.get("grantsDevFirecloudFolderOwner"),
            "grantsDevFirecloudGroup": obj.get("grantsDevFirecloudGroup"),
            "grantsProdAzureGroup": obj.get("grantsProdAzureGroup"),
            "grantsProdFirecloudFolderOwner": obj.get("grantsProdFirecloudFolderOwner"),
            "grantsProdFirecloudGroup": obj.get("grantsProdFirecloudGroup"),
            "grantsQaFirecloudFolderOwner": obj.get("grantsQaFirecloudFolderOwner"),
            "grantsQaFirecloudGroup": obj.get("grantsQaFirecloudGroup"),
            "grantsSherlockSuperAdmin": obj.get("grantsSherlockSuperAdmin"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "suspendNonSuitableUsers": obj.get("suspendNonSuitableUsers"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


