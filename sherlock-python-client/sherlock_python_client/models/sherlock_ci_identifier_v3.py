# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SherlockCiIdentifierV3(BaseModel):
    """
    SherlockCiIdentifierV3
    """ # noqa: E501
    ci_runs: Optional[List[SherlockCiRunV3]] = Field(default=None, alias="ciRuns")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    id: Optional[StrictInt] = None
    resource_id: Optional[StrictInt] = Field(default=None, alias="resourceID")
    resource_status: Optional[StrictStr] = Field(default=None, description="Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource", alias="resourceStatus")
    resource_type: Optional[StrictStr] = Field(default=None, alias="resourceType")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["ciRuns", "createdAt", "id", "resourceID", "resourceStatus", "resourceType", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockCiIdentifierV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ci_runs (list)
        _items = []
        if self.ci_runs:
            for _item_ci_runs in self.ci_runs:
                if _item_ci_runs:
                    _items.append(_item_ci_runs.to_dict())
            _dict['ciRuns'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockCiIdentifierV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ciRuns": [SherlockCiRunV3.from_dict(_item) for _item in obj["ciRuns"]] if obj.get("ciRuns") is not None else None,
            "createdAt": obj.get("createdAt"),
            "id": obj.get("id"),
            "resourceID": obj.get("resourceID"),
            "resourceStatus": obj.get("resourceStatus"),
            "resourceType": obj.get("resourceType"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

from sherlock_python_client.models.sherlock_ci_run_v3 import SherlockCiRunV3
# TODO: Rewrite to not use raise_errors
SherlockCiIdentifierV3.model_rebuild(raise_errors=False)

