# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from sherlock_python_client.models.sherlock_app_version_v3 import SherlockAppVersionV3
from sherlock_python_client.models.sherlock_chart_release_v3 import SherlockChartReleaseV3
from sherlock_python_client.models.sherlock_chart_version_v3 import SherlockChartVersionV3
from sherlock_python_client.models.sherlock_ci_identifier_v3 import SherlockCiIdentifierV3
from sherlock_python_client.models.sherlock_user_v3 import SherlockUserV3
from typing import Optional, Set
from typing_extensions import Self

class SherlockChangesetV3(BaseModel):
    """
    SherlockChangesetV3
    """ # noqa: E501
    applied_at: Optional[datetime] = Field(default=None, alias="appliedAt")
    applied_by: Optional[StrictStr] = Field(default=None, alias="appliedBy")
    applied_by_info: Optional[SherlockUserV3] = Field(default=None, alias="appliedByInfo")
    chart_release: Optional[StrictStr] = Field(default=None, alias="chartRelease")
    chart_release_info: Optional[SherlockChartReleaseV3] = Field(default=None, alias="chartReleaseInfo")
    ci_identifier: Optional[SherlockCiIdentifierV3] = Field(default=None, alias="ciIdentifier")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    from_app_version_branch: Optional[StrictStr] = Field(default=None, alias="fromAppVersionBranch")
    from_app_version_commit: Optional[StrictStr] = Field(default=None, alias="fromAppVersionCommit")
    from_app_version_exact: Optional[StrictStr] = Field(default=None, alias="fromAppVersionExact")
    from_app_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="fromAppVersionFollowChartRelease")
    from_app_version_reference: Optional[StrictStr] = Field(default=None, alias="fromAppVersionReference")
    from_app_version_resolver: Optional[StrictStr] = Field(default=None, alias="fromAppVersionResolver")
    from_chart_version_exact: Optional[StrictStr] = Field(default=None, alias="fromChartVersionExact")
    from_chart_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="fromChartVersionFollowChartRelease")
    from_chart_version_reference: Optional[StrictStr] = Field(default=None, alias="fromChartVersionReference")
    from_chart_version_resolver: Optional[StrictStr] = Field(default=None, alias="fromChartVersionResolver")
    from_helmfile_ref: Optional[StrictStr] = Field(default=None, alias="fromHelmfileRef")
    from_helmfile_ref_enabled: Optional[StrictBool] = Field(default=None, alias="fromHelmfileRefEnabled")
    from_resolved_at: Optional[datetime] = Field(default=None, alias="fromResolvedAt")
    id: Optional[StrictInt] = None
    new_app_versions: Optional[List[SherlockAppVersionV3]] = Field(default=None, alias="newAppVersions")
    new_chart_versions: Optional[List[SherlockChartVersionV3]] = Field(default=None, alias="newChartVersions")
    planned_by: Optional[StrictStr] = Field(default=None, alias="plannedBy")
    planned_by_info: Optional[SherlockUserV3] = Field(default=None, alias="plannedByInfo")
    superseded_at: Optional[datetime] = Field(default=None, alias="supersededAt")
    to_app_version_branch: Optional[StrictStr] = Field(default=None, alias="toAppVersionBranch")
    to_app_version_commit: Optional[StrictStr] = Field(default=None, alias="toAppVersionCommit")
    to_app_version_exact: Optional[StrictStr] = Field(default=None, alias="toAppVersionExact")
    to_app_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="toAppVersionFollowChartRelease")
    to_app_version_reference: Optional[StrictStr] = Field(default=None, alias="toAppVersionReference")
    to_app_version_resolver: Optional[StrictStr] = Field(default=None, alias="toAppVersionResolver")
    to_chart_version_exact: Optional[StrictStr] = Field(default=None, alias="toChartVersionExact")
    to_chart_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="toChartVersionFollowChartRelease")
    to_chart_version_reference: Optional[StrictStr] = Field(default=None, alias="toChartVersionReference")
    to_chart_version_resolver: Optional[StrictStr] = Field(default=None, alias="toChartVersionResolver")
    to_helmfile_ref: Optional[StrictStr] = Field(default=None, alias="toHelmfileRef")
    to_helmfile_ref_enabled: Optional[StrictBool] = Field(default=None, alias="toHelmfileRefEnabled")
    to_resolved_at: Optional[datetime] = Field(default=None, alias="toResolvedAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["appliedAt", "appliedBy", "appliedByInfo", "chartRelease", "chartReleaseInfo", "ciIdentifier", "createdAt", "fromAppVersionBranch", "fromAppVersionCommit", "fromAppVersionExact", "fromAppVersionFollowChartRelease", "fromAppVersionReference", "fromAppVersionResolver", "fromChartVersionExact", "fromChartVersionFollowChartRelease", "fromChartVersionReference", "fromChartVersionResolver", "fromHelmfileRef", "fromHelmfileRefEnabled", "fromResolvedAt", "id", "newAppVersions", "newChartVersions", "plannedBy", "plannedByInfo", "supersededAt", "toAppVersionBranch", "toAppVersionCommit", "toAppVersionExact", "toAppVersionFollowChartRelease", "toAppVersionReference", "toAppVersionResolver", "toChartVersionExact", "toChartVersionFollowChartRelease", "toChartVersionReference", "toChartVersionResolver", "toHelmfileRef", "toHelmfileRefEnabled", "toResolvedAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockChangesetV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applied_by_info
        if self.applied_by_info:
            _dict['appliedByInfo'] = self.applied_by_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chart_release_info
        if self.chart_release_info:
            _dict['chartReleaseInfo'] = self.chart_release_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ci_identifier
        if self.ci_identifier:
            _dict['ciIdentifier'] = self.ci_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in new_app_versions (list)
        _items = []
        if self.new_app_versions:
            for _item_new_app_versions in self.new_app_versions:
                if _item_new_app_versions:
                    _items.append(_item_new_app_versions.to_dict())
            _dict['newAppVersions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in new_chart_versions (list)
        _items = []
        if self.new_chart_versions:
            for _item_new_chart_versions in self.new_chart_versions:
                if _item_new_chart_versions:
                    _items.append(_item_new_chart_versions.to_dict())
            _dict['newChartVersions'] = _items
        # override the default output from pydantic by calling `to_dict()` of planned_by_info
        if self.planned_by_info:
            _dict['plannedByInfo'] = self.planned_by_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockChangesetV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedAt": obj.get("appliedAt"),
            "appliedBy": obj.get("appliedBy"),
            "appliedByInfo": SherlockUserV3.from_dict(obj["appliedByInfo"]) if obj.get("appliedByInfo") is not None else None,
            "chartRelease": obj.get("chartRelease"),
            "chartReleaseInfo": SherlockChartReleaseV3.from_dict(obj["chartReleaseInfo"]) if obj.get("chartReleaseInfo") is not None else None,
            "ciIdentifier": SherlockCiIdentifierV3.from_dict(obj["ciIdentifier"]) if obj.get("ciIdentifier") is not None else None,
            "createdAt": obj.get("createdAt"),
            "fromAppVersionBranch": obj.get("fromAppVersionBranch"),
            "fromAppVersionCommit": obj.get("fromAppVersionCommit"),
            "fromAppVersionExact": obj.get("fromAppVersionExact"),
            "fromAppVersionFollowChartRelease": obj.get("fromAppVersionFollowChartRelease"),
            "fromAppVersionReference": obj.get("fromAppVersionReference"),
            "fromAppVersionResolver": obj.get("fromAppVersionResolver"),
            "fromChartVersionExact": obj.get("fromChartVersionExact"),
            "fromChartVersionFollowChartRelease": obj.get("fromChartVersionFollowChartRelease"),
            "fromChartVersionReference": obj.get("fromChartVersionReference"),
            "fromChartVersionResolver": obj.get("fromChartVersionResolver"),
            "fromHelmfileRef": obj.get("fromHelmfileRef"),
            "fromHelmfileRefEnabled": obj.get("fromHelmfileRefEnabled"),
            "fromResolvedAt": obj.get("fromResolvedAt"),
            "id": obj.get("id"),
            "newAppVersions": [SherlockAppVersionV3.from_dict(_item) for _item in obj["newAppVersions"]] if obj.get("newAppVersions") is not None else None,
            "newChartVersions": [SherlockChartVersionV3.from_dict(_item) for _item in obj["newChartVersions"]] if obj.get("newChartVersions") is not None else None,
            "plannedBy": obj.get("plannedBy"),
            "plannedByInfo": SherlockUserV3.from_dict(obj["plannedByInfo"]) if obj.get("plannedByInfo") is not None else None,
            "supersededAt": obj.get("supersededAt"),
            "toAppVersionBranch": obj.get("toAppVersionBranch"),
            "toAppVersionCommit": obj.get("toAppVersionCommit"),
            "toAppVersionExact": obj.get("toAppVersionExact"),
            "toAppVersionFollowChartRelease": obj.get("toAppVersionFollowChartRelease"),
            "toAppVersionReference": obj.get("toAppVersionReference"),
            "toAppVersionResolver": obj.get("toAppVersionResolver"),
            "toChartVersionExact": obj.get("toChartVersionExact"),
            "toChartVersionFollowChartRelease": obj.get("toChartVersionFollowChartRelease"),
            "toChartVersionReference": obj.get("toChartVersionReference"),
            "toChartVersionResolver": obj.get("toChartVersionResolver"),
            "toHelmfileRef": obj.get("toHelmfileRef"),
            "toHelmfileRefEnabled": obj.get("toHelmfileRefEnabled"),
            "toResolvedAt": obj.get("toResolvedAt"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


