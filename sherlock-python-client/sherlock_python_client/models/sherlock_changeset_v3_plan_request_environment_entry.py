# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SherlockChangesetV3PlanRequestEnvironmentEntry(BaseModel):
    """
    SherlockChangesetV3PlanRequestEnvironmentEntry
    """ # noqa: E501
    environment: Optional[StrictStr] = None
    exclude_charts: Optional[List[StrictStr]] = Field(default=None, alias="excludeCharts")
    filter_to_matching_branches: Optional[StrictBool] = Field(default=None, description="If true, chart releases app versions will only be updated if doing so wouldn't change the detected Git branch. This flag has no effect if the updated chart release has no app version branch.", alias="filterToMatchingBranches")
    follow_versions_from_other_environment: Optional[StrictStr] = Field(default=None, alias="followVersionsFromOtherEnvironment")
    include_charts: Optional[List[StrictStr]] = Field(default=None, description="If omitted, will include all chart releases that haven't opted out of bulk updates", alias="includeCharts")
    use_exact_versions_from_other_environment: Optional[StrictStr] = Field(default=None, alias="useExactVersionsFromOtherEnvironment")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["environment", "excludeCharts", "filterToMatchingBranches", "followVersionsFromOtherEnvironment", "includeCharts", "useExactVersionsFromOtherEnvironment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockChangesetV3PlanRequestEnvironmentEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockChangesetV3PlanRequestEnvironmentEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "environment": obj.get("environment"),
            "excludeCharts": obj.get("excludeCharts"),
            "filterToMatchingBranches": obj.get("filterToMatchingBranches"),
            "followVersionsFromOtherEnvironment": obj.get("followVersionsFromOtherEnvironment"),
            "includeCharts": obj.get("includeCharts"),
            "useExactVersionsFromOtherEnvironment": obj.get("useExactVersionsFromOtherEnvironment")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


