# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SherlockUserV3Upsert(BaseModel):
    """
    SherlockUserV3Upsert
    """ # noqa: E501
    github_access_token: Optional[StrictStr] = Field(default=None, description="An access token for the GitHub account to associate with the calling user. The access token isn't stored. The design here ensures that an association is only built when someone controls both accounts (Google via IAP and GitHub via this access token).", alias="githubAccessToken")
    name: Optional[StrictStr] = None
    name_from: Optional[StrictStr] = Field(default=None, alias="nameFrom")
    name_inferred_from_github: Optional[StrictBool] = Field(default=None, description="Controls whether Sherlock should automatically update the user's name based on a connected GitHub identity. Will be set to true if the user account has no name and a GitHub account is linked.", alias="nameInferredFromGithub")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["githubAccessToken", "name", "nameFrom", "nameInferredFromGithub"]

    @field_validator('name_from')
    def name_from_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['sherlock', 'github', 'slack']):
            raise ValueError("must be one of enum values ('sherlock', 'github', 'slack')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockUserV3Upsert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockUserV3Upsert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "githubAccessToken": obj.get("githubAccessToken"),
            "name": obj.get("name"),
            "nameFrom": obj.get("nameFrom"),
            "nameInferredFromGithub": obj.get("nameInferredFromGithub")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


