# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sherlock_python_client.models.sherlock_app_version_v3 import SherlockAppVersionV3
from sherlock_python_client.models.sherlock_chart_v3 import SherlockChartV3
from sherlock_python_client.models.sherlock_chart_version_v3 import SherlockChartVersionV3
from sherlock_python_client.models.sherlock_ci_identifier_v3 import SherlockCiIdentifierV3
from sherlock_python_client.models.sherlock_cluster_v3 import SherlockClusterV3
from sherlock_python_client.models.sherlock_environment_v3 import SherlockEnvironmentV3
from sherlock_python_client.models.sherlock_pagerduty_integration_v3 import SherlockPagerdutyIntegrationV3
from typing import Optional, Set
from typing_extensions import Self

class SherlockChartReleaseV3(BaseModel):
    """
    SherlockChartReleaseV3
    """ # noqa: E501
    app_version_branch: Optional[StrictStr] = Field(default=None, description="When creating, will default to the app's mainline branch if no other app version info is present", alias="appVersionBranch")
    app_version_commit: Optional[StrictStr] = Field(default=None, alias="appVersionCommit")
    app_version_exact: Optional[StrictStr] = Field(default=None, alias="appVersionExact")
    app_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="appVersionFollowChartRelease")
    app_version_info: Optional[SherlockAppVersionV3] = Field(default=None, alias="appVersionInfo")
    app_version_reference: Optional[StrictStr] = Field(default=None, alias="appVersionReference")
    app_version_resolver: Optional[StrictStr] = Field(default=None, description="// When creating, will default to automatically reference any provided app version fields", alias="appVersionResolver")
    chart: Optional[StrictStr] = Field(default=None, description="Required when creating")
    chart_info: Optional[SherlockChartV3] = Field(default=None, alias="chartInfo")
    chart_version_exact: Optional[StrictStr] = Field(default=None, alias="chartVersionExact")
    chart_version_follow_chart_release: Optional[StrictStr] = Field(default=None, alias="chartVersionFollowChartRelease")
    chart_version_info: Optional[SherlockChartVersionV3] = Field(default=None, alias="chartVersionInfo")
    chart_version_reference: Optional[StrictStr] = Field(default=None, alias="chartVersionReference")
    chart_version_resolver: Optional[StrictStr] = Field(default=None, description="When creating, will default to automatically reference any provided chart version", alias="chartVersionResolver")
    ci_identifier: Optional[SherlockCiIdentifierV3] = Field(default=None, alias="ciIdentifier")
    cluster: Optional[StrictStr] = Field(default=None, description="When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.")
    cluster_info: Optional[SherlockClusterV3] = Field(default=None, alias="clusterInfo")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    destination_type: Optional[StrictStr] = Field(default=None, description="Calculated field", alias="destinationType")
    environment: Optional[StrictStr] = Field(default=None, description="Either this or cluster must be provided.")
    environment_info: Optional[SherlockEnvironmentV3] = Field(default=None, alias="environmentInfo")
    helmfile_ref: Optional[StrictStr] = Field(default='HEAD', alias="helmfileRef")
    helmfile_ref_enabled: Optional[StrictBool] = Field(default=False, alias="helmfileRefEnabled")
    id: Optional[StrictInt] = None
    included_in_bulk_changesets: Optional[StrictBool] = Field(default=True, alias="includedInBulkChangesets")
    name: Optional[StrictStr] = Field(default=None, description="When creating, will be calculated if left empty")
    namespace: Optional[StrictStr] = Field(default=None, description="When creating, will default to the environment's default namespace, if provided")
    pagerduty_integration: Optional[StrictStr] = Field(default=None, alias="pagerdutyIntegration")
    pagerduty_integration_info: Optional[SherlockPagerdutyIntegrationV3] = Field(default=None, alias="pagerdutyIntegrationInfo")
    port: Optional[StrictInt] = Field(default=None, description="When creating, will use the chart's default if left empty")
    protocol: Optional[StrictStr] = Field(default=None, description="When creating, will use the chart's default if left empty")
    resolved_at: Optional[datetime] = Field(default=None, alias="resolvedAt")
    subdomain: Optional[StrictStr] = Field(default=None, description="When creating, will use the chart's default if left empty")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["appVersionBranch", "appVersionCommit", "appVersionExact", "appVersionFollowChartRelease", "appVersionInfo", "appVersionReference", "appVersionResolver", "chart", "chartInfo", "chartVersionExact", "chartVersionFollowChartRelease", "chartVersionInfo", "chartVersionReference", "chartVersionResolver", "ciIdentifier", "cluster", "clusterInfo", "createdAt", "destinationType", "environment", "environmentInfo", "helmfileRef", "helmfileRefEnabled", "id", "includedInBulkChangesets", "name", "namespace", "pagerdutyIntegration", "pagerdutyIntegrationInfo", "port", "protocol", "resolvedAt", "subdomain", "updatedAt"]

    @field_validator('app_version_resolver')
    def app_version_resolver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['branch', 'commit', 'exact', 'follow', 'none']):
            raise ValueError("must be one of enum values ('branch', 'commit', 'exact', 'follow', 'none')")
        return value

    @field_validator('chart_version_resolver')
    def chart_version_resolver_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['latest', 'exact', 'follow']):
            raise ValueError("must be one of enum values ('latest', 'exact', 'follow')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SherlockChartReleaseV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_version_info
        if self.app_version_info:
            _dict['appVersionInfo'] = self.app_version_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chart_info
        if self.chart_info:
            _dict['chartInfo'] = self.chart_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chart_version_info
        if self.chart_version_info:
            _dict['chartVersionInfo'] = self.chart_version_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ci_identifier
        if self.ci_identifier:
            _dict['ciIdentifier'] = self.ci_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_info
        if self.cluster_info:
            _dict['clusterInfo'] = self.cluster_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_info
        if self.environment_info:
            _dict['environmentInfo'] = self.environment_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pagerduty_integration_info
        if self.pagerduty_integration_info:
            _dict['pagerdutyIntegrationInfo'] = self.pagerduty_integration_info.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SherlockChartReleaseV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appVersionBranch": obj.get("appVersionBranch"),
            "appVersionCommit": obj.get("appVersionCommit"),
            "appVersionExact": obj.get("appVersionExact"),
            "appVersionFollowChartRelease": obj.get("appVersionFollowChartRelease"),
            "appVersionInfo": SherlockAppVersionV3.from_dict(obj["appVersionInfo"]) if obj.get("appVersionInfo") is not None else None,
            "appVersionReference": obj.get("appVersionReference"),
            "appVersionResolver": obj.get("appVersionResolver"),
            "chart": obj.get("chart"),
            "chartInfo": SherlockChartV3.from_dict(obj["chartInfo"]) if obj.get("chartInfo") is not None else None,
            "chartVersionExact": obj.get("chartVersionExact"),
            "chartVersionFollowChartRelease": obj.get("chartVersionFollowChartRelease"),
            "chartVersionInfo": SherlockChartVersionV3.from_dict(obj["chartVersionInfo"]) if obj.get("chartVersionInfo") is not None else None,
            "chartVersionReference": obj.get("chartVersionReference"),
            "chartVersionResolver": obj.get("chartVersionResolver"),
            "ciIdentifier": SherlockCiIdentifierV3.from_dict(obj["ciIdentifier"]) if obj.get("ciIdentifier") is not None else None,
            "cluster": obj.get("cluster"),
            "clusterInfo": SherlockClusterV3.from_dict(obj["clusterInfo"]) if obj.get("clusterInfo") is not None else None,
            "createdAt": obj.get("createdAt"),
            "destinationType": obj.get("destinationType"),
            "environment": obj.get("environment"),
            "environmentInfo": SherlockEnvironmentV3.from_dict(obj["environmentInfo"]) if obj.get("environmentInfo") is not None else None,
            "helmfileRef": obj.get("helmfileRef") if obj.get("helmfileRef") is not None else 'HEAD',
            "helmfileRefEnabled": obj.get("helmfileRefEnabled") if obj.get("helmfileRefEnabled") is not None else False,
            "id": obj.get("id"),
            "includedInBulkChangesets": obj.get("includedInBulkChangesets") if obj.get("includedInBulkChangesets") is not None else True,
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "pagerdutyIntegration": obj.get("pagerdutyIntegration"),
            "pagerdutyIntegrationInfo": SherlockPagerdutyIntegrationV3.from_dict(obj["pagerdutyIntegrationInfo"]) if obj.get("pagerdutyIntegrationInfo") is not None else None,
            "port": obj.get("port"),
            "protocol": obj.get("protocol"),
            "resolvedAt": obj.get("resolvedAt"),
            "subdomain": obj.get("subdomain"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


