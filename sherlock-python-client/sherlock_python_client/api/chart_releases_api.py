# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from sherlock_python_client.models.sherlock_chart_release_v3 import SherlockChartReleaseV3
from sherlock_python_client.models.sherlock_chart_release_v3_create import SherlockChartReleaseV3Create
from sherlock_python_client.models.sherlock_chart_release_v3_edit import SherlockChartReleaseV3Edit

from sherlock_python_client.api_client import ApiClient, RequestSerialized
from sherlock_python_client.api_response import ApiResponse
from sherlock_python_client.rest import RESTResponseType


class ChartReleasesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_chart_releases_v3_get(
        self,
        app_version_branch: Annotated[Optional[StrictStr], Field(description="When creating, will default to the app's mainline branch if no other app version info is present")] = None,
        app_version_commit: Optional[StrictStr] = None,
        app_version_exact: Optional[StrictStr] = None,
        app_version_follow_chart_release: Optional[StrictStr] = None,
        app_version_reference: Optional[StrictStr] = None,
        app_version_resolver: Annotated[Optional[StrictStr], Field(description="// When creating, will default to automatically reference any provided app version fields")] = None,
        chart: Annotated[Optional[StrictStr], Field(description="Required when creating")] = None,
        chart_version_exact: Optional[StrictStr] = None,
        chart_version_follow_chart_release: Optional[StrictStr] = None,
        chart_version_reference: Optional[StrictStr] = None,
        chart_version_resolver: Annotated[Optional[StrictStr], Field(description="When creating, will default to automatically reference any provided chart version")] = None,
        cluster: Annotated[Optional[StrictStr], Field(description="When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.")] = None,
        created_at: Optional[datetime] = None,
        destination_type: Annotated[Optional[StrictStr], Field(description="Calculated field")] = None,
        environment: Annotated[Optional[StrictStr], Field(description="Either this or cluster must be provided.")] = None,
        helmfile_ref: Optional[StrictStr] = None,
        helmfile_ref_enabled: Optional[StrictBool] = None,
        id: Optional[StrictInt] = None,
        included_in_bulk_changesets: Optional[StrictBool] = None,
        name: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        namespace: Annotated[Optional[StrictStr], Field(description="When creating, will default to the environment's default namespace, if provided")] = None,
        pagerduty_integration: Optional[StrictStr] = None,
        port: Annotated[Optional[StrictInt], Field(description="When creating, will use the chart's default if left empty")] = None,
        protocol: Annotated[Optional[StrictStr], Field(description="When creating, will use the chart's default if left empty")] = None,
        resolved_at: Optional[datetime] = None,
        subdomain: Annotated[Optional[StrictStr], Field(description="When creating, will use the chart's default if left empty")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many ChartReleases are returned (default 0, meaning all)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned ChartReleases (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChartReleaseV3]:
        """List ChartReleases matching a filter

        List ChartReleases matching a filter.

        :param app_version_branch: When creating, will default to the app's mainline branch if no other app version info is present
        :type app_version_branch: str
        :param app_version_commit:
        :type app_version_commit: str
        :param app_version_exact:
        :type app_version_exact: str
        :param app_version_follow_chart_release:
        :type app_version_follow_chart_release: str
        :param app_version_reference:
        :type app_version_reference: str
        :param app_version_resolver: // When creating, will default to automatically reference any provided app version fields
        :type app_version_resolver: str
        :param chart: Required when creating
        :type chart: str
        :param chart_version_exact:
        :type chart_version_exact: str
        :param chart_version_follow_chart_release:
        :type chart_version_follow_chart_release: str
        :param chart_version_reference:
        :type chart_version_reference: str
        :param chart_version_resolver: When creating, will default to automatically reference any provided chart version
        :type chart_version_resolver: str
        :param cluster: When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
        :type cluster: str
        :param created_at:
        :type created_at: datetime
        :param destination_type: Calculated field
        :type destination_type: str
        :param environment: Either this or cluster must be provided.
        :type environment: str
        :param helmfile_ref:
        :type helmfile_ref: str
        :param helmfile_ref_enabled:
        :type helmfile_ref_enabled: bool
        :param id:
        :type id: int
        :param included_in_bulk_changesets:
        :type included_in_bulk_changesets: bool
        :param name: When creating, will be calculated if left empty
        :type name: str
        :param namespace: When creating, will default to the environment's default namespace, if provided
        :type namespace: str
        :param pagerduty_integration:
        :type pagerduty_integration: str
        :param port: When creating, will use the chart's default if left empty
        :type port: int
        :param protocol: When creating, will use the chart's default if left empty
        :type protocol: str
        :param resolved_at:
        :type resolved_at: datetime
        :param subdomain: When creating, will use the chart's default if left empty
        :type subdomain: str
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many ChartReleases are returned (default 0, meaning all)
        :type limit: int
        :param offset: Control the offset for the returned ChartReleases (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_get_serialize(
            app_version_branch=app_version_branch,
            app_version_commit=app_version_commit,
            app_version_exact=app_version_exact,
            app_version_follow_chart_release=app_version_follow_chart_release,
            app_version_reference=app_version_reference,
            app_version_resolver=app_version_resolver,
            chart=chart,
            chart_version_exact=chart_version_exact,
            chart_version_follow_chart_release=chart_version_follow_chart_release,
            chart_version_reference=chart_version_reference,
            chart_version_resolver=chart_version_resolver,
            cluster=cluster,
            created_at=created_at,
            destination_type=destination_type,
            environment=environment,
            helmfile_ref=helmfile_ref,
            helmfile_ref_enabled=helmfile_ref_enabled,
            id=id,
            included_in_bulk_changesets=included_in_bulk_changesets,
            name=name,
            namespace=namespace,
            pagerduty_integration=pagerduty_integration,
            port=port,
            protocol=protocol,
            resolved_at=resolved_at,
            subdomain=subdomain,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChartReleaseV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_chart_releases_v3_get_with_http_info(
        self,
        app_version_branch: Annotated[Optional[StrictStr], Field(description="When creating, will default to the app's mainline branch if no other app version info is present")] = None,
        app_version_commit: Optional[StrictStr] = None,
        app_version_exact: Optional[StrictStr] = None,
        app_version_follow_chart_release: Optional[StrictStr] = None,
        app_version_reference: Optional[StrictStr] = None,
        app_version_resolver: Annotated[Optional[StrictStr], Field(description="// When creating, will default to automatically reference any provided app version fields")] = None,
        chart: Annotated[Optional[StrictStr], Field(description="Required when creating")] = None,
        chart_version_exact: Optional[StrictStr] = None,
        chart_version_follow_chart_release: Optional[StrictStr] = None,
        chart_version_reference: Optional[StrictStr] = None,
        chart_version_resolver: Annotated[Optional[StrictStr], Field(description="When creating, will default to automatically reference any provided chart version")] = None,
        cluster: Annotated[Optional[StrictStr], Field(description="When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.")] = None,
        created_at: Optional[datetime] = None,
        destination_type: Annotated[Optional[StrictStr], Field(description="Calculated field")] = None,
        environment: Annotated[Optional[StrictStr], Field(description="Either this or cluster must be provided.")] = None,
        helmfile_ref: Optional[StrictStr] = None,
        helmfile_ref_enabled: Optional[StrictBool] = None,
        id: Optional[StrictInt] = None,
        included_in_bulk_changesets: Optional[StrictBool] = None,
        name: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        namespace: Annotated[Optional[StrictStr], Field(description="When creating, will default to the environment's default namespace, if provided")] = None,
        pagerduty_integration: Optional[StrictStr] = None,
        port: Annotated[Optional[StrictInt], Field(description="When creating, will use the chart's default if left empty")] = None,
        protocol: Annotated[Optional[StrictStr], Field(description="When creating, will use the chart's default if left empty")] = None,
        resolved_at: Optional[datetime] = None,
        subdomain: Annotated[Optional[StrictStr], Field(description="When creating, will use the chart's default if left empty")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many ChartReleases are returned (default 0, meaning all)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned ChartReleases (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChartReleaseV3]]:
        """List ChartReleases matching a filter

        List ChartReleases matching a filter.

        :param app_version_branch: When creating, will default to the app's mainline branch if no other app version info is present
        :type app_version_branch: str
        :param app_version_commit:
        :type app_version_commit: str
        :param app_version_exact:
        :type app_version_exact: str
        :param app_version_follow_chart_release:
        :type app_version_follow_chart_release: str
        :param app_version_reference:
        :type app_version_reference: str
        :param app_version_resolver: // When creating, will default to automatically reference any provided app version fields
        :type app_version_resolver: str
        :param chart: Required when creating
        :type chart: str
        :param chart_version_exact:
        :type chart_version_exact: str
        :param chart_version_follow_chart_release:
        :type chart_version_follow_chart_release: str
        :param chart_version_reference:
        :type chart_version_reference: str
        :param chart_version_resolver: When creating, will default to automatically reference any provided chart version
        :type chart_version_resolver: str
        :param cluster: When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
        :type cluster: str
        :param created_at:
        :type created_at: datetime
        :param destination_type: Calculated field
        :type destination_type: str
        :param environment: Either this or cluster must be provided.
        :type environment: str
        :param helmfile_ref:
        :type helmfile_ref: str
        :param helmfile_ref_enabled:
        :type helmfile_ref_enabled: bool
        :param id:
        :type id: int
        :param included_in_bulk_changesets:
        :type included_in_bulk_changesets: bool
        :param name: When creating, will be calculated if left empty
        :type name: str
        :param namespace: When creating, will default to the environment's default namespace, if provided
        :type namespace: str
        :param pagerduty_integration:
        :type pagerduty_integration: str
        :param port: When creating, will use the chart's default if left empty
        :type port: int
        :param protocol: When creating, will use the chart's default if left empty
        :type protocol: str
        :param resolved_at:
        :type resolved_at: datetime
        :param subdomain: When creating, will use the chart's default if left empty
        :type subdomain: str
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many ChartReleases are returned (default 0, meaning all)
        :type limit: int
        :param offset: Control the offset for the returned ChartReleases (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_get_serialize(
            app_version_branch=app_version_branch,
            app_version_commit=app_version_commit,
            app_version_exact=app_version_exact,
            app_version_follow_chart_release=app_version_follow_chart_release,
            app_version_reference=app_version_reference,
            app_version_resolver=app_version_resolver,
            chart=chart,
            chart_version_exact=chart_version_exact,
            chart_version_follow_chart_release=chart_version_follow_chart_release,
            chart_version_reference=chart_version_reference,
            chart_version_resolver=chart_version_resolver,
            cluster=cluster,
            created_at=created_at,
            destination_type=destination_type,
            environment=environment,
            helmfile_ref=helmfile_ref,
            helmfile_ref_enabled=helmfile_ref_enabled,
            id=id,
            included_in_bulk_changesets=included_in_bulk_changesets,
            name=name,
            namespace=namespace,
            pagerduty_integration=pagerduty_integration,
            port=port,
            protocol=protocol,
            resolved_at=resolved_at,
            subdomain=subdomain,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChartReleaseV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_chart_releases_v3_get_without_preload_content(
        self,
        app_version_branch: Annotated[Optional[StrictStr], Field(description="When creating, will default to the app's mainline branch if no other app version info is present")] = None,
        app_version_commit: Optional[StrictStr] = None,
        app_version_exact: Optional[StrictStr] = None,
        app_version_follow_chart_release: Optional[StrictStr] = None,
        app_version_reference: Optional[StrictStr] = None,
        app_version_resolver: Annotated[Optional[StrictStr], Field(description="// When creating, will default to automatically reference any provided app version fields")] = None,
        chart: Annotated[Optional[StrictStr], Field(description="Required when creating")] = None,
        chart_version_exact: Optional[StrictStr] = None,
        chart_version_follow_chart_release: Optional[StrictStr] = None,
        chart_version_reference: Optional[StrictStr] = None,
        chart_version_resolver: Annotated[Optional[StrictStr], Field(description="When creating, will default to automatically reference any provided chart version")] = None,
        cluster: Annotated[Optional[StrictStr], Field(description="When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.")] = None,
        created_at: Optional[datetime] = None,
        destination_type: Annotated[Optional[StrictStr], Field(description="Calculated field")] = None,
        environment: Annotated[Optional[StrictStr], Field(description="Either this or cluster must be provided.")] = None,
        helmfile_ref: Optional[StrictStr] = None,
        helmfile_ref_enabled: Optional[StrictBool] = None,
        id: Optional[StrictInt] = None,
        included_in_bulk_changesets: Optional[StrictBool] = None,
        name: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        namespace: Annotated[Optional[StrictStr], Field(description="When creating, will default to the environment's default namespace, if provided")] = None,
        pagerduty_integration: Optional[StrictStr] = None,
        port: Annotated[Optional[StrictInt], Field(description="When creating, will use the chart's default if left empty")] = None,
        protocol: Annotated[Optional[StrictStr], Field(description="When creating, will use the chart's default if left empty")] = None,
        resolved_at: Optional[datetime] = None,
        subdomain: Annotated[Optional[StrictStr], Field(description="When creating, will use the chart's default if left empty")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many ChartReleases are returned (default 0, meaning all)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned ChartReleases (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List ChartReleases matching a filter

        List ChartReleases matching a filter.

        :param app_version_branch: When creating, will default to the app's mainline branch if no other app version info is present
        :type app_version_branch: str
        :param app_version_commit:
        :type app_version_commit: str
        :param app_version_exact:
        :type app_version_exact: str
        :param app_version_follow_chart_release:
        :type app_version_follow_chart_release: str
        :param app_version_reference:
        :type app_version_reference: str
        :param app_version_resolver: // When creating, will default to automatically reference any provided app version fields
        :type app_version_resolver: str
        :param chart: Required when creating
        :type chart: str
        :param chart_version_exact:
        :type chart_version_exact: str
        :param chart_version_follow_chart_release:
        :type chart_version_follow_chart_release: str
        :param chart_version_reference:
        :type chart_version_reference: str
        :param chart_version_resolver: When creating, will default to automatically reference any provided chart version
        :type chart_version_resolver: str
        :param cluster: When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
        :type cluster: str
        :param created_at:
        :type created_at: datetime
        :param destination_type: Calculated field
        :type destination_type: str
        :param environment: Either this or cluster must be provided.
        :type environment: str
        :param helmfile_ref:
        :type helmfile_ref: str
        :param helmfile_ref_enabled:
        :type helmfile_ref_enabled: bool
        :param id:
        :type id: int
        :param included_in_bulk_changesets:
        :type included_in_bulk_changesets: bool
        :param name: When creating, will be calculated if left empty
        :type name: str
        :param namespace: When creating, will default to the environment's default namespace, if provided
        :type namespace: str
        :param pagerduty_integration:
        :type pagerduty_integration: str
        :param port: When creating, will use the chart's default if left empty
        :type port: int
        :param protocol: When creating, will use the chart's default if left empty
        :type protocol: str
        :param resolved_at:
        :type resolved_at: datetime
        :param subdomain: When creating, will use the chart's default if left empty
        :type subdomain: str
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many ChartReleases are returned (default 0, meaning all)
        :type limit: int
        :param offset: Control the offset for the returned ChartReleases (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_get_serialize(
            app_version_branch=app_version_branch,
            app_version_commit=app_version_commit,
            app_version_exact=app_version_exact,
            app_version_follow_chart_release=app_version_follow_chart_release,
            app_version_reference=app_version_reference,
            app_version_resolver=app_version_resolver,
            chart=chart,
            chart_version_exact=chart_version_exact,
            chart_version_follow_chart_release=chart_version_follow_chart_release,
            chart_version_reference=chart_version_reference,
            chart_version_resolver=chart_version_resolver,
            cluster=cluster,
            created_at=created_at,
            destination_type=destination_type,
            environment=environment,
            helmfile_ref=helmfile_ref,
            helmfile_ref_enabled=helmfile_ref_enabled,
            id=id,
            included_in_bulk_changesets=included_in_bulk_changesets,
            name=name,
            namespace=namespace,
            pagerduty_integration=pagerduty_integration,
            port=port,
            protocol=protocol,
            resolved_at=resolved_at,
            subdomain=subdomain,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChartReleaseV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_chart_releases_v3_get_serialize(
        self,
        app_version_branch,
        app_version_commit,
        app_version_exact,
        app_version_follow_chart_release,
        app_version_reference,
        app_version_resolver,
        chart,
        chart_version_exact,
        chart_version_follow_chart_release,
        chart_version_reference,
        chart_version_resolver,
        cluster,
        created_at,
        destination_type,
        environment,
        helmfile_ref,
        helmfile_ref_enabled,
        id,
        included_in_bulk_changesets,
        name,
        namespace,
        pagerduty_integration,
        port,
        protocol,
        resolved_at,
        subdomain,
        updated_at,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if app_version_branch is not None:
            
            _query_params.append(('appVersionBranch', app_version_branch))
            
        if app_version_commit is not None:
            
            _query_params.append(('appVersionCommit', app_version_commit))
            
        if app_version_exact is not None:
            
            _query_params.append(('appVersionExact', app_version_exact))
            
        if app_version_follow_chart_release is not None:
            
            _query_params.append(('appVersionFollowChartRelease', app_version_follow_chart_release))
            
        if app_version_reference is not None:
            
            _query_params.append(('appVersionReference', app_version_reference))
            
        if app_version_resolver is not None:
            
            _query_params.append(('appVersionResolver', app_version_resolver))
            
        if chart is not None:
            
            _query_params.append(('chart', chart))
            
        if chart_version_exact is not None:
            
            _query_params.append(('chartVersionExact', chart_version_exact))
            
        if chart_version_follow_chart_release is not None:
            
            _query_params.append(('chartVersionFollowChartRelease', chart_version_follow_chart_release))
            
        if chart_version_reference is not None:
            
            _query_params.append(('chartVersionReference', chart_version_reference))
            
        if chart_version_resolver is not None:
            
            _query_params.append(('chartVersionResolver', chart_version_resolver))
            
        if cluster is not None:
            
            _query_params.append(('cluster', cluster))
            
        if created_at is not None:
            if isinstance(created_at, datetime):
                _query_params.append(
                    (
                        'createdAt',
                        created_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt', created_at))
            
        if destination_type is not None:
            
            _query_params.append(('destinationType', destination_type))
            
        if environment is not None:
            
            _query_params.append(('environment', environment))
            
        if helmfile_ref is not None:
            
            _query_params.append(('helmfileRef', helmfile_ref))
            
        if helmfile_ref_enabled is not None:
            
            _query_params.append(('helmfileRefEnabled', helmfile_ref_enabled))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if included_in_bulk_changesets is not None:
            
            _query_params.append(('includedInBulkChangesets', included_in_bulk_changesets))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if namespace is not None:
            
            _query_params.append(('namespace', namespace))
            
        if pagerduty_integration is not None:
            
            _query_params.append(('pagerdutyIntegration', pagerduty_integration))
            
        if port is not None:
            
            _query_params.append(('port', port))
            
        if protocol is not None:
            
            _query_params.append(('protocol', protocol))
            
        if resolved_at is not None:
            if isinstance(resolved_at, datetime):
                _query_params.append(
                    (
                        'resolvedAt',
                        resolved_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('resolvedAt', resolved_at))
            
        if subdomain is not None:
            
            _query_params.append(('subdomain', subdomain))
            
        if updated_at is not None:
            if isinstance(updated_at, datetime):
                _query_params.append(
                    (
                        'updatedAt',
                        updated_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt', updated_at))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/chart-releases/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_chart_releases_v3_post(
        self,
        chart_release: Annotated[SherlockChartReleaseV3Create, Field(description="The ChartRelease to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockChartReleaseV3:
        """Create a ChartRelease

        Create a ChartRelease.

        :param chart_release: The ChartRelease to create (required)
        :type chart_release: SherlockChartReleaseV3Create
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_post_serialize(
            chart_release=chart_release,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_chart_releases_v3_post_with_http_info(
        self,
        chart_release: Annotated[SherlockChartReleaseV3Create, Field(description="The ChartRelease to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockChartReleaseV3]:
        """Create a ChartRelease

        Create a ChartRelease.

        :param chart_release: The ChartRelease to create (required)
        :type chart_release: SherlockChartReleaseV3Create
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_post_serialize(
            chart_release=chart_release,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_chart_releases_v3_post_without_preload_content(
        self,
        chart_release: Annotated[SherlockChartReleaseV3Create, Field(description="The ChartRelease to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a ChartRelease

        Create a ChartRelease.

        :param chart_release: The ChartRelease to create (required)
        :type chart_release: SherlockChartReleaseV3Create
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_post_serialize(
            chart_release=chart_release,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_chart_releases_v3_post_serialize(
        self,
        chart_release,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if chart_release is not None:
            _body_params = chart_release


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/chart-releases/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_chart_releases_v3_selector_delete(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockChartReleaseV3:
        """Delete an individual ChartRelease

        Delete an individual ChartRelease by its ID.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_chart_releases_v3_selector_delete_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockChartReleaseV3]:
        """Delete an individual ChartRelease

        Delete an individual ChartRelease by its ID.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_chart_releases_v3_selector_delete_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an individual ChartRelease

        Delete an individual ChartRelease by its ID.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_chart_releases_v3_selector_delete_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/chart-releases/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_chart_releases_v3_selector_get(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockChartReleaseV3:
        """Get an individual ChartRelease

        Get an individual ChartRelease.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_chart_releases_v3_selector_get_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockChartReleaseV3]:
        """Get an individual ChartRelease

        Get an individual ChartRelease.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_chart_releases_v3_selector_get_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an individual ChartRelease

        Get an individual ChartRelease.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_chart_releases_v3_selector_get_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/chart-releases/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_chart_releases_v3_selector_patch(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        chart_release: Annotated[SherlockChartReleaseV3Edit, Field(description="The edits to make to the ChartRelease")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockChartReleaseV3:
        """Edit an individual ChartRelease

        Edit an individual ChartRelease.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param chart_release: The edits to make to the ChartRelease (required)
        :type chart_release: SherlockChartReleaseV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_patch_serialize(
            selector=selector,
            chart_release=chart_release,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_chart_releases_v3_selector_patch_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        chart_release: Annotated[SherlockChartReleaseV3Edit, Field(description="The edits to make to the ChartRelease")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockChartReleaseV3]:
        """Edit an individual ChartRelease

        Edit an individual ChartRelease.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param chart_release: The edits to make to the ChartRelease (required)
        :type chart_release: SherlockChartReleaseV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_patch_serialize(
            selector=selector,
            chart_release=chart_release,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_chart_releases_v3_selector_patch_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart.")],
        chart_release: Annotated[SherlockChartReleaseV3Edit, Field(description="The edits to make to the ChartRelease")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Edit an individual ChartRelease

        Edit an individual ChartRelease.

        :param selector: The selector of the ChartRelease, which can be either a numeric ID, the name, environment + '/' + chart, or cluster + '/' + namespace + '/' + chart. (required)
        :type selector: str
        :param chart_release: The edits to make to the ChartRelease (required)
        :type chart_release: SherlockChartReleaseV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_chart_releases_v3_selector_patch_serialize(
            selector=selector,
            chart_release=chart_release,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChartReleaseV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_chart_releases_v3_selector_patch_serialize(
        self,
        selector,
        chart_release,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if chart_release is not None:
            _body_params = chart_release


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/chart-releases/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


