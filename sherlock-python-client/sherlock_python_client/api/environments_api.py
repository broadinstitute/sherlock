# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from sherlock_python_client.models.sherlock_environment_v3 import SherlockEnvironmentV3
from sherlock_python_client.models.sherlock_environment_v3_create import SherlockEnvironmentV3Create
from sherlock_python_client.models.sherlock_environment_v3_edit import SherlockEnvironmentV3Edit

from sherlock_python_client.api_client import ApiClient, RequestSerialized
from sherlock_python_client.api_response import ApiResponse
from sherlock_python_client.rest import RESTResponseType


class EnvironmentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_environments_v3_get(
        self,
        auto_populate_chart_releases: Annotated[Optional[StrictBool], Field(description="If true when creating, dynamic environments copy from template and template environments get the honeycomb chart")] = None,
        base: Annotated[Optional[StrictStr], Field(description="Required when creating")] = None,
        base_domain: Optional[StrictStr] = None,
        created_at: Optional[datetime] = None,
        default_cluster: Optional[StrictStr] = None,
        default_namespace: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        delete_after: Annotated[Optional[datetime], Field(description="If set, the BEE will be automatically deleted after this time. Can be set to \"\" or Go's zero time value to clear the field.")] = None,
        description: Optional[StrictStr] = None,
        enable_janitor: Annotated[Optional[StrictBool], Field(description="If true, janitor resource cleanup will be enabled for this environment. BEEs default to template's value, templates default to true, and static/live environments default to false.")] = None,
        helmfile_ref: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        lifecycle: Optional[StrictStr] = None,
        name: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if dynamic, required otherwise")] = None,
        name_prefixes_domain: Optional[StrictBool] = None,
        offline: Annotated[Optional[StrictBool], Field(description="Applicable for BEEs only, whether Thelma should render the BEE as \"offline\" zero replicas (this field is a target state, not a status)")] = None,
        offline_schedule_begin_enabled: Annotated[Optional[StrictBool], Field(description="When enabled, the BEE will be slated to go offline around the begin time each day")] = None,
        offline_schedule_begin_time: Annotated[Optional[datetime], Field(description="Stored with timezone to determine day of the week")] = None,
        offline_schedule_end_enabled: Annotated[Optional[StrictBool], Field(description="When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)")] = None,
        offline_schedule_end_time: Annotated[Optional[datetime], Field(description="Stored with timezone to determine day of the week")] = None,
        offline_schedule_end_weekends: Optional[StrictBool] = None,
        owner: Annotated[Optional[StrictStr], Field(description="When creating, will default to you")] = None,
        pact_identifier: Optional[StrictStr] = None,
        pagerduty_integration: Optional[StrictStr] = None,
        prevent_deletion: Annotated[Optional[StrictBool], Field(description="Used to protect specific BEEs from deletion (thelma checks this field)")] = None,
        required_role: Annotated[Optional[StrictStr], Field(description="If present, requires membership in the given role for mutations. Set to an empty string to clear.")] = None,
        requires_suitability: Optional[StrictBool] = None,
        service_banner_bucket: Optional[StrictStr] = None,
        template_environment: Annotated[Optional[StrictStr], Field(description="Required for dynamic environments")] = None,
        unique_resource_prefix: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        updated_at: Optional[datetime] = None,
        values_name: Annotated[Optional[StrictStr], Field(description="When creating, defaults to template name or environment name")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Environments are returned (default 0, meaning all)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Environments (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockEnvironmentV3]:
        """List Environments matching a filter

        List Environments matching a filter.

        :param auto_populate_chart_releases: If true when creating, dynamic environments copy from template and template environments get the honeycomb chart
        :type auto_populate_chart_releases: bool
        :param base: Required when creating
        :type base: str
        :param base_domain:
        :type base_domain: str
        :param created_at:
        :type created_at: datetime
        :param default_cluster:
        :type default_cluster: str
        :param default_namespace: When creating, will be calculated if left empty
        :type default_namespace: str
        :param delete_after: If set, the BEE will be automatically deleted after this time. Can be set to \"\" or Go's zero time value to clear the field.
        :type delete_after: datetime
        :param description:
        :type description: str
        :param enable_janitor: If true, janitor resource cleanup will be enabled for this environment. BEEs default to template's value, templates default to true, and static/live environments default to false.
        :type enable_janitor: bool
        :param helmfile_ref:
        :type helmfile_ref: str
        :param id:
        :type id: int
        :param lifecycle:
        :type lifecycle: str
        :param name: When creating, will be calculated if dynamic, required otherwise
        :type name: str
        :param name_prefixes_domain:
        :type name_prefixes_domain: bool
        :param offline: Applicable for BEEs only, whether Thelma should render the BEE as \"offline\" zero replicas (this field is a target state, not a status)
        :type offline: bool
        :param offline_schedule_begin_enabled: When enabled, the BEE will be slated to go offline around the begin time each day
        :type offline_schedule_begin_enabled: bool
        :param offline_schedule_begin_time: Stored with timezone to determine day of the week
        :type offline_schedule_begin_time: datetime
        :param offline_schedule_end_enabled: When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)
        :type offline_schedule_end_enabled: bool
        :param offline_schedule_end_time: Stored with timezone to determine day of the week
        :type offline_schedule_end_time: datetime
        :param offline_schedule_end_weekends:
        :type offline_schedule_end_weekends: bool
        :param owner: When creating, will default to you
        :type owner: str
        :param pact_identifier:
        :type pact_identifier: str
        :param pagerduty_integration:
        :type pagerduty_integration: str
        :param prevent_deletion: Used to protect specific BEEs from deletion (thelma checks this field)
        :type prevent_deletion: bool
        :param required_role: If present, requires membership in the given role for mutations. Set to an empty string to clear.
        :type required_role: str
        :param requires_suitability:
        :type requires_suitability: bool
        :param service_banner_bucket:
        :type service_banner_bucket: str
        :param template_environment: Required for dynamic environments
        :type template_environment: str
        :param unique_resource_prefix: When creating, will be calculated if left empty
        :type unique_resource_prefix: str
        :param updated_at:
        :type updated_at: datetime
        :param values_name: When creating, defaults to template name or environment name
        :type values_name: str
        :param limit: Control how many Environments are returned (default 0, meaning all)
        :type limit: int
        :param offset: Control the offset for the returned Environments (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_get_serialize(
            auto_populate_chart_releases=auto_populate_chart_releases,
            base=base,
            base_domain=base_domain,
            created_at=created_at,
            default_cluster=default_cluster,
            default_namespace=default_namespace,
            delete_after=delete_after,
            description=description,
            enable_janitor=enable_janitor,
            helmfile_ref=helmfile_ref,
            id=id,
            lifecycle=lifecycle,
            name=name,
            name_prefixes_domain=name_prefixes_domain,
            offline=offline,
            offline_schedule_begin_enabled=offline_schedule_begin_enabled,
            offline_schedule_begin_time=offline_schedule_begin_time,
            offline_schedule_end_enabled=offline_schedule_end_enabled,
            offline_schedule_end_time=offline_schedule_end_time,
            offline_schedule_end_weekends=offline_schedule_end_weekends,
            owner=owner,
            pact_identifier=pact_identifier,
            pagerduty_integration=pagerduty_integration,
            prevent_deletion=prevent_deletion,
            required_role=required_role,
            requires_suitability=requires_suitability,
            service_banner_bucket=service_banner_bucket,
            template_environment=template_environment,
            unique_resource_prefix=unique_resource_prefix,
            updated_at=updated_at,
            values_name=values_name,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockEnvironmentV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_environments_v3_get_with_http_info(
        self,
        auto_populate_chart_releases: Annotated[Optional[StrictBool], Field(description="If true when creating, dynamic environments copy from template and template environments get the honeycomb chart")] = None,
        base: Annotated[Optional[StrictStr], Field(description="Required when creating")] = None,
        base_domain: Optional[StrictStr] = None,
        created_at: Optional[datetime] = None,
        default_cluster: Optional[StrictStr] = None,
        default_namespace: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        delete_after: Annotated[Optional[datetime], Field(description="If set, the BEE will be automatically deleted after this time. Can be set to \"\" or Go's zero time value to clear the field.")] = None,
        description: Optional[StrictStr] = None,
        enable_janitor: Annotated[Optional[StrictBool], Field(description="If true, janitor resource cleanup will be enabled for this environment. BEEs default to template's value, templates default to true, and static/live environments default to false.")] = None,
        helmfile_ref: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        lifecycle: Optional[StrictStr] = None,
        name: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if dynamic, required otherwise")] = None,
        name_prefixes_domain: Optional[StrictBool] = None,
        offline: Annotated[Optional[StrictBool], Field(description="Applicable for BEEs only, whether Thelma should render the BEE as \"offline\" zero replicas (this field is a target state, not a status)")] = None,
        offline_schedule_begin_enabled: Annotated[Optional[StrictBool], Field(description="When enabled, the BEE will be slated to go offline around the begin time each day")] = None,
        offline_schedule_begin_time: Annotated[Optional[datetime], Field(description="Stored with timezone to determine day of the week")] = None,
        offline_schedule_end_enabled: Annotated[Optional[StrictBool], Field(description="When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)")] = None,
        offline_schedule_end_time: Annotated[Optional[datetime], Field(description="Stored with timezone to determine day of the week")] = None,
        offline_schedule_end_weekends: Optional[StrictBool] = None,
        owner: Annotated[Optional[StrictStr], Field(description="When creating, will default to you")] = None,
        pact_identifier: Optional[StrictStr] = None,
        pagerduty_integration: Optional[StrictStr] = None,
        prevent_deletion: Annotated[Optional[StrictBool], Field(description="Used to protect specific BEEs from deletion (thelma checks this field)")] = None,
        required_role: Annotated[Optional[StrictStr], Field(description="If present, requires membership in the given role for mutations. Set to an empty string to clear.")] = None,
        requires_suitability: Optional[StrictBool] = None,
        service_banner_bucket: Optional[StrictStr] = None,
        template_environment: Annotated[Optional[StrictStr], Field(description="Required for dynamic environments")] = None,
        unique_resource_prefix: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        updated_at: Optional[datetime] = None,
        values_name: Annotated[Optional[StrictStr], Field(description="When creating, defaults to template name or environment name")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Environments are returned (default 0, meaning all)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Environments (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockEnvironmentV3]]:
        """List Environments matching a filter

        List Environments matching a filter.

        :param auto_populate_chart_releases: If true when creating, dynamic environments copy from template and template environments get the honeycomb chart
        :type auto_populate_chart_releases: bool
        :param base: Required when creating
        :type base: str
        :param base_domain:
        :type base_domain: str
        :param created_at:
        :type created_at: datetime
        :param default_cluster:
        :type default_cluster: str
        :param default_namespace: When creating, will be calculated if left empty
        :type default_namespace: str
        :param delete_after: If set, the BEE will be automatically deleted after this time. Can be set to \"\" or Go's zero time value to clear the field.
        :type delete_after: datetime
        :param description:
        :type description: str
        :param enable_janitor: If true, janitor resource cleanup will be enabled for this environment. BEEs default to template's value, templates default to true, and static/live environments default to false.
        :type enable_janitor: bool
        :param helmfile_ref:
        :type helmfile_ref: str
        :param id:
        :type id: int
        :param lifecycle:
        :type lifecycle: str
        :param name: When creating, will be calculated if dynamic, required otherwise
        :type name: str
        :param name_prefixes_domain:
        :type name_prefixes_domain: bool
        :param offline: Applicable for BEEs only, whether Thelma should render the BEE as \"offline\" zero replicas (this field is a target state, not a status)
        :type offline: bool
        :param offline_schedule_begin_enabled: When enabled, the BEE will be slated to go offline around the begin time each day
        :type offline_schedule_begin_enabled: bool
        :param offline_schedule_begin_time: Stored with timezone to determine day of the week
        :type offline_schedule_begin_time: datetime
        :param offline_schedule_end_enabled: When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)
        :type offline_schedule_end_enabled: bool
        :param offline_schedule_end_time: Stored with timezone to determine day of the week
        :type offline_schedule_end_time: datetime
        :param offline_schedule_end_weekends:
        :type offline_schedule_end_weekends: bool
        :param owner: When creating, will default to you
        :type owner: str
        :param pact_identifier:
        :type pact_identifier: str
        :param pagerduty_integration:
        :type pagerduty_integration: str
        :param prevent_deletion: Used to protect specific BEEs from deletion (thelma checks this field)
        :type prevent_deletion: bool
        :param required_role: If present, requires membership in the given role for mutations. Set to an empty string to clear.
        :type required_role: str
        :param requires_suitability:
        :type requires_suitability: bool
        :param service_banner_bucket:
        :type service_banner_bucket: str
        :param template_environment: Required for dynamic environments
        :type template_environment: str
        :param unique_resource_prefix: When creating, will be calculated if left empty
        :type unique_resource_prefix: str
        :param updated_at:
        :type updated_at: datetime
        :param values_name: When creating, defaults to template name or environment name
        :type values_name: str
        :param limit: Control how many Environments are returned (default 0, meaning all)
        :type limit: int
        :param offset: Control the offset for the returned Environments (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_get_serialize(
            auto_populate_chart_releases=auto_populate_chart_releases,
            base=base,
            base_domain=base_domain,
            created_at=created_at,
            default_cluster=default_cluster,
            default_namespace=default_namespace,
            delete_after=delete_after,
            description=description,
            enable_janitor=enable_janitor,
            helmfile_ref=helmfile_ref,
            id=id,
            lifecycle=lifecycle,
            name=name,
            name_prefixes_domain=name_prefixes_domain,
            offline=offline,
            offline_schedule_begin_enabled=offline_schedule_begin_enabled,
            offline_schedule_begin_time=offline_schedule_begin_time,
            offline_schedule_end_enabled=offline_schedule_end_enabled,
            offline_schedule_end_time=offline_schedule_end_time,
            offline_schedule_end_weekends=offline_schedule_end_weekends,
            owner=owner,
            pact_identifier=pact_identifier,
            pagerduty_integration=pagerduty_integration,
            prevent_deletion=prevent_deletion,
            required_role=required_role,
            requires_suitability=requires_suitability,
            service_banner_bucket=service_banner_bucket,
            template_environment=template_environment,
            unique_resource_prefix=unique_resource_prefix,
            updated_at=updated_at,
            values_name=values_name,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockEnvironmentV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_environments_v3_get_without_preload_content(
        self,
        auto_populate_chart_releases: Annotated[Optional[StrictBool], Field(description="If true when creating, dynamic environments copy from template and template environments get the honeycomb chart")] = None,
        base: Annotated[Optional[StrictStr], Field(description="Required when creating")] = None,
        base_domain: Optional[StrictStr] = None,
        created_at: Optional[datetime] = None,
        default_cluster: Optional[StrictStr] = None,
        default_namespace: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        delete_after: Annotated[Optional[datetime], Field(description="If set, the BEE will be automatically deleted after this time. Can be set to \"\" or Go's zero time value to clear the field.")] = None,
        description: Optional[StrictStr] = None,
        enable_janitor: Annotated[Optional[StrictBool], Field(description="If true, janitor resource cleanup will be enabled for this environment. BEEs default to template's value, templates default to true, and static/live environments default to false.")] = None,
        helmfile_ref: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        lifecycle: Optional[StrictStr] = None,
        name: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if dynamic, required otherwise")] = None,
        name_prefixes_domain: Optional[StrictBool] = None,
        offline: Annotated[Optional[StrictBool], Field(description="Applicable for BEEs only, whether Thelma should render the BEE as \"offline\" zero replicas (this field is a target state, not a status)")] = None,
        offline_schedule_begin_enabled: Annotated[Optional[StrictBool], Field(description="When enabled, the BEE will be slated to go offline around the begin time each day")] = None,
        offline_schedule_begin_time: Annotated[Optional[datetime], Field(description="Stored with timezone to determine day of the week")] = None,
        offline_schedule_end_enabled: Annotated[Optional[StrictBool], Field(description="When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)")] = None,
        offline_schedule_end_time: Annotated[Optional[datetime], Field(description="Stored with timezone to determine day of the week")] = None,
        offline_schedule_end_weekends: Optional[StrictBool] = None,
        owner: Annotated[Optional[StrictStr], Field(description="When creating, will default to you")] = None,
        pact_identifier: Optional[StrictStr] = None,
        pagerduty_integration: Optional[StrictStr] = None,
        prevent_deletion: Annotated[Optional[StrictBool], Field(description="Used to protect specific BEEs from deletion (thelma checks this field)")] = None,
        required_role: Annotated[Optional[StrictStr], Field(description="If present, requires membership in the given role for mutations. Set to an empty string to clear.")] = None,
        requires_suitability: Optional[StrictBool] = None,
        service_banner_bucket: Optional[StrictStr] = None,
        template_environment: Annotated[Optional[StrictStr], Field(description="Required for dynamic environments")] = None,
        unique_resource_prefix: Annotated[Optional[StrictStr], Field(description="When creating, will be calculated if left empty")] = None,
        updated_at: Optional[datetime] = None,
        values_name: Annotated[Optional[StrictStr], Field(description="When creating, defaults to template name or environment name")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Environments are returned (default 0, meaning all)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Environments (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Environments matching a filter

        List Environments matching a filter.

        :param auto_populate_chart_releases: If true when creating, dynamic environments copy from template and template environments get the honeycomb chart
        :type auto_populate_chart_releases: bool
        :param base: Required when creating
        :type base: str
        :param base_domain:
        :type base_domain: str
        :param created_at:
        :type created_at: datetime
        :param default_cluster:
        :type default_cluster: str
        :param default_namespace: When creating, will be calculated if left empty
        :type default_namespace: str
        :param delete_after: If set, the BEE will be automatically deleted after this time. Can be set to \"\" or Go's zero time value to clear the field.
        :type delete_after: datetime
        :param description:
        :type description: str
        :param enable_janitor: If true, janitor resource cleanup will be enabled for this environment. BEEs default to template's value, templates default to true, and static/live environments default to false.
        :type enable_janitor: bool
        :param helmfile_ref:
        :type helmfile_ref: str
        :param id:
        :type id: int
        :param lifecycle:
        :type lifecycle: str
        :param name: When creating, will be calculated if dynamic, required otherwise
        :type name: str
        :param name_prefixes_domain:
        :type name_prefixes_domain: bool
        :param offline: Applicable for BEEs only, whether Thelma should render the BEE as \"offline\" zero replicas (this field is a target state, not a status)
        :type offline: bool
        :param offline_schedule_begin_enabled: When enabled, the BEE will be slated to go offline around the begin time each day
        :type offline_schedule_begin_enabled: bool
        :param offline_schedule_begin_time: Stored with timezone to determine day of the week
        :type offline_schedule_begin_time: datetime
        :param offline_schedule_end_enabled: When enabled, the BEE will be slated to come online around the end time each weekday (each day if weekends enabled)
        :type offline_schedule_end_enabled: bool
        :param offline_schedule_end_time: Stored with timezone to determine day of the week
        :type offline_schedule_end_time: datetime
        :param offline_schedule_end_weekends:
        :type offline_schedule_end_weekends: bool
        :param owner: When creating, will default to you
        :type owner: str
        :param pact_identifier:
        :type pact_identifier: str
        :param pagerduty_integration:
        :type pagerduty_integration: str
        :param prevent_deletion: Used to protect specific BEEs from deletion (thelma checks this field)
        :type prevent_deletion: bool
        :param required_role: If present, requires membership in the given role for mutations. Set to an empty string to clear.
        :type required_role: str
        :param requires_suitability:
        :type requires_suitability: bool
        :param service_banner_bucket:
        :type service_banner_bucket: str
        :param template_environment: Required for dynamic environments
        :type template_environment: str
        :param unique_resource_prefix: When creating, will be calculated if left empty
        :type unique_resource_prefix: str
        :param updated_at:
        :type updated_at: datetime
        :param values_name: When creating, defaults to template name or environment name
        :type values_name: str
        :param limit: Control how many Environments are returned (default 0, meaning all)
        :type limit: int
        :param offset: Control the offset for the returned Environments (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_get_serialize(
            auto_populate_chart_releases=auto_populate_chart_releases,
            base=base,
            base_domain=base_domain,
            created_at=created_at,
            default_cluster=default_cluster,
            default_namespace=default_namespace,
            delete_after=delete_after,
            description=description,
            enable_janitor=enable_janitor,
            helmfile_ref=helmfile_ref,
            id=id,
            lifecycle=lifecycle,
            name=name,
            name_prefixes_domain=name_prefixes_domain,
            offline=offline,
            offline_schedule_begin_enabled=offline_schedule_begin_enabled,
            offline_schedule_begin_time=offline_schedule_begin_time,
            offline_schedule_end_enabled=offline_schedule_end_enabled,
            offline_schedule_end_time=offline_schedule_end_time,
            offline_schedule_end_weekends=offline_schedule_end_weekends,
            owner=owner,
            pact_identifier=pact_identifier,
            pagerduty_integration=pagerduty_integration,
            prevent_deletion=prevent_deletion,
            required_role=required_role,
            requires_suitability=requires_suitability,
            service_banner_bucket=service_banner_bucket,
            template_environment=template_environment,
            unique_resource_prefix=unique_resource_prefix,
            updated_at=updated_at,
            values_name=values_name,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockEnvironmentV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_environments_v3_get_serialize(
        self,
        auto_populate_chart_releases,
        base,
        base_domain,
        created_at,
        default_cluster,
        default_namespace,
        delete_after,
        description,
        enable_janitor,
        helmfile_ref,
        id,
        lifecycle,
        name,
        name_prefixes_domain,
        offline,
        offline_schedule_begin_enabled,
        offline_schedule_begin_time,
        offline_schedule_end_enabled,
        offline_schedule_end_time,
        offline_schedule_end_weekends,
        owner,
        pact_identifier,
        pagerduty_integration,
        prevent_deletion,
        required_role,
        requires_suitability,
        service_banner_bucket,
        template_environment,
        unique_resource_prefix,
        updated_at,
        values_name,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if auto_populate_chart_releases is not None:
            
            _query_params.append(('autoPopulateChartReleases', auto_populate_chart_releases))
            
        if base is not None:
            
            _query_params.append(('base', base))
            
        if base_domain is not None:
            
            _query_params.append(('baseDomain', base_domain))
            
        if created_at is not None:
            if isinstance(created_at, datetime):
                _query_params.append(
                    (
                        'createdAt',
                        created_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt', created_at))
            
        if default_cluster is not None:
            
            _query_params.append(('defaultCluster', default_cluster))
            
        if default_namespace is not None:
            
            _query_params.append(('defaultNamespace', default_namespace))
            
        if delete_after is not None:
            if isinstance(delete_after, datetime):
                _query_params.append(
                    (
                        'deleteAfter',
                        delete_after.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('deleteAfter', delete_after))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if enable_janitor is not None:
            
            _query_params.append(('enableJanitor', enable_janitor))
            
        if helmfile_ref is not None:
            
            _query_params.append(('helmfileRef', helmfile_ref))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if lifecycle is not None:
            
            _query_params.append(('lifecycle', lifecycle))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if name_prefixes_domain is not None:
            
            _query_params.append(('namePrefixesDomain', name_prefixes_domain))
            
        if offline is not None:
            
            _query_params.append(('offline', offline))
            
        if offline_schedule_begin_enabled is not None:
            
            _query_params.append(('offlineScheduleBeginEnabled', offline_schedule_begin_enabled))
            
        if offline_schedule_begin_time is not None:
            if isinstance(offline_schedule_begin_time, datetime):
                _query_params.append(
                    (
                        'offlineScheduleBeginTime',
                        offline_schedule_begin_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('offlineScheduleBeginTime', offline_schedule_begin_time))
            
        if offline_schedule_end_enabled is not None:
            
            _query_params.append(('offlineScheduleEndEnabled', offline_schedule_end_enabled))
            
        if offline_schedule_end_time is not None:
            if isinstance(offline_schedule_end_time, datetime):
                _query_params.append(
                    (
                        'offlineScheduleEndTime',
                        offline_schedule_end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('offlineScheduleEndTime', offline_schedule_end_time))
            
        if offline_schedule_end_weekends is not None:
            
            _query_params.append(('offlineScheduleEndWeekends', offline_schedule_end_weekends))
            
        if owner is not None:
            
            _query_params.append(('owner', owner))
            
        if pact_identifier is not None:
            
            _query_params.append(('PactIdentifier', pact_identifier))
            
        if pagerduty_integration is not None:
            
            _query_params.append(('pagerdutyIntegration', pagerduty_integration))
            
        if prevent_deletion is not None:
            
            _query_params.append(('preventDeletion', prevent_deletion))
            
        if required_role is not None:
            
            _query_params.append(('requiredRole', required_role))
            
        if requires_suitability is not None:
            
            _query_params.append(('requiresSuitability', requires_suitability))
            
        if service_banner_bucket is not None:
            
            _query_params.append(('serviceBannerBucket', service_banner_bucket))
            
        if template_environment is not None:
            
            _query_params.append(('templateEnvironment', template_environment))
            
        if unique_resource_prefix is not None:
            
            _query_params.append(('uniqueResourcePrefix', unique_resource_prefix))
            
        if updated_at is not None:
            if isinstance(updated_at, datetime):
                _query_params.append(
                    (
                        'updatedAt',
                        updated_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt', updated_at))
            
        if values_name is not None:
            
            _query_params.append(('valuesName', values_name))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/environments/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_environments_v3_post(
        self,
        environment: Annotated[SherlockEnvironmentV3Create, Field(description="The Environment to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockEnvironmentV3:
        """Create a Environment

        Create a Environment.

        :param environment: The Environment to create (required)
        :type environment: SherlockEnvironmentV3Create
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_post_serialize(
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_environments_v3_post_with_http_info(
        self,
        environment: Annotated[SherlockEnvironmentV3Create, Field(description="The Environment to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockEnvironmentV3]:
        """Create a Environment

        Create a Environment.

        :param environment: The Environment to create (required)
        :type environment: SherlockEnvironmentV3Create
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_post_serialize(
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_environments_v3_post_without_preload_content(
        self,
        environment: Annotated[SherlockEnvironmentV3Create, Field(description="The Environment to create")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a Environment

        Create a Environment.

        :param environment: The Environment to create (required)
        :type environment: SherlockEnvironmentV3Create
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_post_serialize(
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_environments_v3_post_serialize(
        self,
        environment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if environment is not None:
            _body_params = environment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/environments/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_environments_v3_selector_delete(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockEnvironmentV3:
        """Delete an individual Environment

        Delete an individual Environment by its ID.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_environments_v3_selector_delete_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockEnvironmentV3]:
        """Delete an individual Environment

        Delete an individual Environment by its ID.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_environments_v3_selector_delete_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an individual Environment

        Delete an individual Environment by its ID.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_environments_v3_selector_delete_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/environments/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_environments_v3_selector_get(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockEnvironmentV3:
        """Get an individual Environment

        Get an individual Environment.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_environments_v3_selector_get_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockEnvironmentV3]:
        """Get an individual Environment

        Get an individual Environment.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_environments_v3_selector_get_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an individual Environment

        Get an individual Environment.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_environments_v3_selector_get_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/environments/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_environments_v3_selector_patch(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        environment: Annotated[SherlockEnvironmentV3Edit, Field(description="The edits to make to the Environment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockEnvironmentV3:
        """Edit an individual Environment

        Edit an individual Environment.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param environment: The edits to make to the Environment (required)
        :type environment: SherlockEnvironmentV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_patch_serialize(
            selector=selector,
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_environments_v3_selector_patch_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        environment: Annotated[SherlockEnvironmentV3Edit, Field(description="The edits to make to the Environment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockEnvironmentV3]:
        """Edit an individual Environment

        Edit an individual Environment.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param environment: The edits to make to the Environment (required)
        :type environment: SherlockEnvironmentV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_patch_serialize(
            selector=selector,
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_environments_v3_selector_patch_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix.")],
        environment: Annotated[SherlockEnvironmentV3Edit, Field(description="The edits to make to the Environment")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Edit an individual Environment

        Edit an individual Environment.

        :param selector: The selector of the Environment, which can be either a numeric ID, the name, or 'resource-prefix' + / + the unique resource prefix. (required)
        :type selector: str
        :param environment: The edits to make to the Environment (required)
        :type environment: SherlockEnvironmentV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_environments_v3_selector_patch_serialize(
            selector=selector,
            environment=environment,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockEnvironmentV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_environments_v3_selector_patch_serialize(
        self,
        selector,
        environment,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if environment is not None:
            _body_params = environment


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/environments/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


