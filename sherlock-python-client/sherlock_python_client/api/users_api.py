# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from sherlock_python_client.models.sherlock_user_v3 import SherlockUserV3
from sherlock_python_client.models.sherlock_user_v3_upsert import SherlockUserV3Upsert

from sherlock_python_client.api_client import ApiClient, RequestSerialized
from sherlock_python_client.api_response import ApiResponse
from sherlock_python_client.rest import RESTResponseType


class UsersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_users_v3_get(
        self,
        created_at: Optional[datetime] = None,
        deactivated_at: Annotated[Optional[StrictStr], Field(description="If set, indicates that the user is currently deactivated")] = None,
        email: Optional[StrictStr] = None,
        github_id: Optional[StrictStr] = None,
        github_username: Optional[StrictStr] = None,
        google_id: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        name_from: Optional[StrictStr] = None,
        slack_id: Optional[StrictStr] = None,
        slack_username: Optional[StrictStr] = None,
        suitability_description: Annotated[Optional[StrictStr], Field(description="Available only in responses; describes the user's production-suitability")] = None,
        suitable: Annotated[Optional[StrictBool], Field(description="Available only in responses; indicates whether the user is production-suitable")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Users are returned (default 0, no limit)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Users (default 0)")] = None,
        include_deactivated: Annotated[Optional[StrictBool], Field(description="Include deactivated users in the results (default false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockUserV3]:
        """List Users matching a filter

        List Users matching a filter. The results will include suitability and other information. Note that the suitability info can't directly be filtered for at this time.

        :param created_at:
        :type created_at: datetime
        :param deactivated_at: If set, indicates that the user is currently deactivated
        :type deactivated_at: str
        :param email:
        :type email: str
        :param github_id:
        :type github_id: str
        :param github_username:
        :type github_username: str
        :param google_id:
        :type google_id: str
        :param id:
        :type id: int
        :param name:
        :type name: str
        :param name_from:
        :type name_from: str
        :param slack_id:
        :type slack_id: str
        :param slack_username:
        :type slack_username: str
        :param suitability_description: Available only in responses; describes the user's production-suitability
        :type suitability_description: str
        :param suitable: Available only in responses; indicates whether the user is production-suitable
        :type suitable: bool
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many Users are returned (default 0, no limit)
        :type limit: int
        :param offset: Control the offset for the returned Users (default 0)
        :type offset: int
        :param include_deactivated: Include deactivated users in the results (default false)
        :type include_deactivated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_get_serialize(
            created_at=created_at,
            deactivated_at=deactivated_at,
            email=email,
            github_id=github_id,
            github_username=github_username,
            google_id=google_id,
            id=id,
            name=name,
            name_from=name_from,
            slack_id=slack_id,
            slack_username=slack_username,
            suitability_description=suitability_description,
            suitable=suitable,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            include_deactivated=include_deactivated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockUserV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_users_v3_get_with_http_info(
        self,
        created_at: Optional[datetime] = None,
        deactivated_at: Annotated[Optional[StrictStr], Field(description="If set, indicates that the user is currently deactivated")] = None,
        email: Optional[StrictStr] = None,
        github_id: Optional[StrictStr] = None,
        github_username: Optional[StrictStr] = None,
        google_id: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        name_from: Optional[StrictStr] = None,
        slack_id: Optional[StrictStr] = None,
        slack_username: Optional[StrictStr] = None,
        suitability_description: Annotated[Optional[StrictStr], Field(description="Available only in responses; describes the user's production-suitability")] = None,
        suitable: Annotated[Optional[StrictBool], Field(description="Available only in responses; indicates whether the user is production-suitable")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Users are returned (default 0, no limit)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Users (default 0)")] = None,
        include_deactivated: Annotated[Optional[StrictBool], Field(description="Include deactivated users in the results (default false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockUserV3]]:
        """List Users matching a filter

        List Users matching a filter. The results will include suitability and other information. Note that the suitability info can't directly be filtered for at this time.

        :param created_at:
        :type created_at: datetime
        :param deactivated_at: If set, indicates that the user is currently deactivated
        :type deactivated_at: str
        :param email:
        :type email: str
        :param github_id:
        :type github_id: str
        :param github_username:
        :type github_username: str
        :param google_id:
        :type google_id: str
        :param id:
        :type id: int
        :param name:
        :type name: str
        :param name_from:
        :type name_from: str
        :param slack_id:
        :type slack_id: str
        :param slack_username:
        :type slack_username: str
        :param suitability_description: Available only in responses; describes the user's production-suitability
        :type suitability_description: str
        :param suitable: Available only in responses; indicates whether the user is production-suitable
        :type suitable: bool
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many Users are returned (default 0, no limit)
        :type limit: int
        :param offset: Control the offset for the returned Users (default 0)
        :type offset: int
        :param include_deactivated: Include deactivated users in the results (default false)
        :type include_deactivated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_get_serialize(
            created_at=created_at,
            deactivated_at=deactivated_at,
            email=email,
            github_id=github_id,
            github_username=github_username,
            google_id=google_id,
            id=id,
            name=name,
            name_from=name_from,
            slack_id=slack_id,
            slack_username=slack_username,
            suitability_description=suitability_description,
            suitable=suitable,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            include_deactivated=include_deactivated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockUserV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_users_v3_get_without_preload_content(
        self,
        created_at: Optional[datetime] = None,
        deactivated_at: Annotated[Optional[StrictStr], Field(description="If set, indicates that the user is currently deactivated")] = None,
        email: Optional[StrictStr] = None,
        github_id: Optional[StrictStr] = None,
        github_username: Optional[StrictStr] = None,
        google_id: Optional[StrictStr] = None,
        id: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        name_from: Optional[StrictStr] = None,
        slack_id: Optional[StrictStr] = None,
        slack_username: Optional[StrictStr] = None,
        suitability_description: Annotated[Optional[StrictStr], Field(description="Available only in responses; describes the user's production-suitability")] = None,
        suitable: Annotated[Optional[StrictBool], Field(description="Available only in responses; indicates whether the user is production-suitable")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Users are returned (default 0, no limit)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Users (default 0)")] = None,
        include_deactivated: Annotated[Optional[StrictBool], Field(description="Include deactivated users in the results (default false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Users matching a filter

        List Users matching a filter. The results will include suitability and other information. Note that the suitability info can't directly be filtered for at this time.

        :param created_at:
        :type created_at: datetime
        :param deactivated_at: If set, indicates that the user is currently deactivated
        :type deactivated_at: str
        :param email:
        :type email: str
        :param github_id:
        :type github_id: str
        :param github_username:
        :type github_username: str
        :param google_id:
        :type google_id: str
        :param id:
        :type id: int
        :param name:
        :type name: str
        :param name_from:
        :type name_from: str
        :param slack_id:
        :type slack_id: str
        :param slack_username:
        :type slack_username: str
        :param suitability_description: Available only in responses; describes the user's production-suitability
        :type suitability_description: str
        :param suitable: Available only in responses; indicates whether the user is production-suitable
        :type suitable: bool
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many Users are returned (default 0, no limit)
        :type limit: int
        :param offset: Control the offset for the returned Users (default 0)
        :type offset: int
        :param include_deactivated: Include deactivated users in the results (default false)
        :type include_deactivated: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_get_serialize(
            created_at=created_at,
            deactivated_at=deactivated_at,
            email=email,
            github_id=github_id,
            github_username=github_username,
            google_id=google_id,
            id=id,
            name=name,
            name_from=name_from,
            slack_id=slack_id,
            slack_username=slack_username,
            suitability_description=suitability_description,
            suitable=suitable,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            include_deactivated=include_deactivated,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockUserV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_users_v3_get_serialize(
        self,
        created_at,
        deactivated_at,
        email,
        github_id,
        github_username,
        google_id,
        id,
        name,
        name_from,
        slack_id,
        slack_username,
        suitability_description,
        suitable,
        updated_at,
        limit,
        offset,
        include_deactivated,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if created_at is not None:
            if isinstance(created_at, datetime):
                _query_params.append(
                    (
                        'createdAt',
                        created_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt', created_at))
            
        if deactivated_at is not None:
            
            _query_params.append(('deactivatedAt', deactivated_at))
            
        if email is not None:
            
            _query_params.append(('email', email))
            
        if github_id is not None:
            
            _query_params.append(('githubID', github_id))
            
        if github_username is not None:
            
            _query_params.append(('githubUsername', github_username))
            
        if google_id is not None:
            
            _query_params.append(('googleID', google_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if name_from is not None:
            
            _query_params.append(('nameFrom', name_from))
            
        if slack_id is not None:
            
            _query_params.append(('slackID', slack_id))
            
        if slack_username is not None:
            
            _query_params.append(('slackUsername', slack_username))
            
        if suitability_description is not None:
            
            _query_params.append(('suitabilityDescription', suitability_description))
            
        if suitable is not None:
            
            _query_params.append(('suitable', suitable))
            
        if updated_at is not None:
            if isinstance(updated_at, datetime):
                _query_params.append(
                    (
                        'updatedAt',
                        updated_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt', updated_at))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if include_deactivated is not None:
            
            _query_params.append(('include-deactivated', include_deactivated))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/users/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_users_v3_put(
        self,
        user: Annotated[Optional[SherlockUserV3Upsert], Field(description="The User data to update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockUserV3:
        """Update the calling User's information

        Update the calling User's information. As with all authenticated Sherlock endpoints, newly-observed callers will have a User record added, meaning that this endpoint behaves like an upsert.

        :param user: The User data to update
        :type user: SherlockUserV3Upsert
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_put_serialize(
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockUserV3",
            '201': "SherlockUserV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_users_v3_put_with_http_info(
        self,
        user: Annotated[Optional[SherlockUserV3Upsert], Field(description="The User data to update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockUserV3]:
        """Update the calling User's information

        Update the calling User's information. As with all authenticated Sherlock endpoints, newly-observed callers will have a User record added, meaning that this endpoint behaves like an upsert.

        :param user: The User data to update
        :type user: SherlockUserV3Upsert
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_put_serialize(
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockUserV3",
            '201': "SherlockUserV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_users_v3_put_without_preload_content(
        self,
        user: Annotated[Optional[SherlockUserV3Upsert], Field(description="The User data to update")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update the calling User's information

        Update the calling User's information. As with all authenticated Sherlock endpoints, newly-observed callers will have a User record added, meaning that this endpoint behaves like an upsert.

        :param user: The User data to update
        :type user: SherlockUserV3Upsert
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_put_serialize(
            user=user,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockUserV3",
            '201': "SherlockUserV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_users_v3_put_serialize(
        self,
        user,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if user is not None:
            _body_params = user


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/users/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_users_v3_selector_get(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the User, which can be either a numeric ID, the email, 'google-id/{google subject ID}', 'github/{github username}', or 'github-id/{github numeric ID}'. As a special case, 'me' or 'self' can be passed to get the calling user.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockUserV3:
        """Get an individual User

        Get an individual User. As a special case, \"me\" or \"self\" can be passed as the selector to get the current user.

        :param selector: The selector of the User, which can be either a numeric ID, the email, 'google-id/{google subject ID}', 'github/{github username}', or 'github-id/{github numeric ID}'. As a special case, 'me' or 'self' can be passed to get the calling user. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockUserV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_users_v3_selector_get_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the User, which can be either a numeric ID, the email, 'google-id/{google subject ID}', 'github/{github username}', or 'github-id/{github numeric ID}'. As a special case, 'me' or 'self' can be passed to get the calling user.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockUserV3]:
        """Get an individual User

        Get an individual User. As a special case, \"me\" or \"self\" can be passed as the selector to get the current user.

        :param selector: The selector of the User, which can be either a numeric ID, the email, 'google-id/{google subject ID}', 'github/{github username}', or 'github-id/{github numeric ID}'. As a special case, 'me' or 'self' can be passed to get the calling user. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockUserV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_users_v3_selector_get_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the User, which can be either a numeric ID, the email, 'google-id/{google subject ID}', 'github/{github username}', or 'github-id/{github numeric ID}'. As a special case, 'me' or 'self' can be passed to get the calling user.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an individual User

        Get an individual User. As a special case, \"me\" or \"self\" can be passed as the selector to get the current user.

        :param selector: The selector of the User, which can be either a numeric ID, the email, 'google-id/{google subject ID}', 'github/{github username}', or 'github-id/{github numeric ID}'. As a special case, 'me' or 'self' can be passed to get the calling user. (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_users_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockUserV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_users_v3_selector_get_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/users/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


