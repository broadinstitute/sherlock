# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from sherlock_python_client.models.sherlock_changeset_v3 import SherlockChangesetV3
from sherlock_python_client.models.sherlock_changeset_v3_plan_request import SherlockChangesetV3PlanRequest

from sherlock_python_client.api_client import ApiClient, RequestSerialized
from sherlock_python_client.api_response import ApiResponse
from sherlock_python_client.rest import RESTResponseType


class ChangesetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_changesets_procedures_v3_apply_post(
        self,
        apply_request: Annotated[List[StrictStr], Field(description="String IDs of the Changesets to apply")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChangesetV3]:
        """Apply previously planned version changes to Chart Releases

        Looks up and applies previously-planned version diffs given by the ID. Other stored plans against the same Chart Releases are marked as superseded. Multiple Changesets can be specified simply by passing multiple IDs in the list.

        :param apply_request: String IDs of the Changesets to apply (required)
        :type apply_request: List[str]
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_apply_post_serialize(
            apply_request=apply_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_procedures_v3_apply_post_with_http_info(
        self,
        apply_request: Annotated[List[StrictStr], Field(description="String IDs of the Changesets to apply")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChangesetV3]]:
        """Apply previously planned version changes to Chart Releases

        Looks up and applies previously-planned version diffs given by the ID. Other stored plans against the same Chart Releases are marked as superseded. Multiple Changesets can be specified simply by passing multiple IDs in the list.

        :param apply_request: String IDs of the Changesets to apply (required)
        :type apply_request: List[str]
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_apply_post_serialize(
            apply_request=apply_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_procedures_v3_apply_post_without_preload_content(
        self,
        apply_request: Annotated[List[StrictStr], Field(description="String IDs of the Changesets to apply")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Apply previously planned version changes to Chart Releases

        Looks up and applies previously-planned version diffs given by the ID. Other stored plans against the same Chart Releases are marked as superseded. Multiple Changesets can be specified simply by passing multiple IDs in the list.

        :param apply_request: String IDs of the Changesets to apply (required)
        :type apply_request: List[str]
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_apply_post_serialize(
            apply_request=apply_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_procedures_v3_apply_post_serialize(
        self,
        apply_request,
        verbose_output,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'apply-request': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if verbose_output is not None:
            
            _query_params.append(('verbose-output', verbose_output))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if apply_request is not None:
            _body_params = apply_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/changesets/procedures/v3/apply',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_changesets_procedures_v3_chart_release_history_chart_release_get(
        self,
        chart_release: Annotated[StrictStr, Field(description="Selector of the Chart Release to find applied Changesets for")],
        offset: Annotated[Optional[StrictInt], Field(description="An optional offset to skip a number of latest Changesets")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="An optional limit to the number of entries returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChangesetV3]:
        """List applied Changesets for a Chart Release

        List existing applied Changesets for a particular Chart Release, ordered by most recently applied.

        :param chart_release: Selector of the Chart Release to find applied Changesets for (required)
        :type chart_release: str
        :param offset: An optional offset to skip a number of latest Changesets
        :type offset: int
        :param limit: An optional limit to the number of entries returned
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_chart_release_history_chart_release_get_serialize(
            chart_release=chart_release,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_procedures_v3_chart_release_history_chart_release_get_with_http_info(
        self,
        chart_release: Annotated[StrictStr, Field(description="Selector of the Chart Release to find applied Changesets for")],
        offset: Annotated[Optional[StrictInt], Field(description="An optional offset to skip a number of latest Changesets")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="An optional limit to the number of entries returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChangesetV3]]:
        """List applied Changesets for a Chart Release

        List existing applied Changesets for a particular Chart Release, ordered by most recently applied.

        :param chart_release: Selector of the Chart Release to find applied Changesets for (required)
        :type chart_release: str
        :param offset: An optional offset to skip a number of latest Changesets
        :type offset: int
        :param limit: An optional limit to the number of entries returned
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_chart_release_history_chart_release_get_serialize(
            chart_release=chart_release,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_procedures_v3_chart_release_history_chart_release_get_without_preload_content(
        self,
        chart_release: Annotated[StrictStr, Field(description="Selector of the Chart Release to find applied Changesets for")],
        offset: Annotated[Optional[StrictInt], Field(description="An optional offset to skip a number of latest Changesets")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="An optional limit to the number of entries returned")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List applied Changesets for a Chart Release

        List existing applied Changesets for a particular Chart Release, ordered by most recently applied.

        :param chart_release: Selector of the Chart Release to find applied Changesets for (required)
        :type chart_release: str
        :param offset: An optional offset to skip a number of latest Changesets
        :type offset: int
        :param limit: An optional limit to the number of entries returned
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_chart_release_history_chart_release_get_serialize(
            chart_release=chart_release,
            offset=offset,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_procedures_v3_chart_release_history_chart_release_get_serialize(
        self,
        chart_release,
        offset,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if chart_release is not None:
            _path_params['chart-release'] = chart_release
        # process the query parameters
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/changesets/procedures/v3/chart-release-history/{chart-release}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_changesets_procedures_v3_plan_and_apply_post(
        self,
        changeset_plan_request: Annotated[SherlockChangesetV3PlanRequest, Field(description="Info on what version changes or refreshes to apply.")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChangesetV3]:
        """Plan and apply version changes in one step

        Like calling the plan procedure immediately followed by the apply procedure. See those endpoints for more information.

        :param changeset_plan_request: Info on what version changes or refreshes to apply. (required)
        :type changeset_plan_request: SherlockChangesetV3PlanRequest
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_plan_and_apply_post_serialize(
            changeset_plan_request=changeset_plan_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '201': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_procedures_v3_plan_and_apply_post_with_http_info(
        self,
        changeset_plan_request: Annotated[SherlockChangesetV3PlanRequest, Field(description="Info on what version changes or refreshes to apply.")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChangesetV3]]:
        """Plan and apply version changes in one step

        Like calling the plan procedure immediately followed by the apply procedure. See those endpoints for more information.

        :param changeset_plan_request: Info on what version changes or refreshes to apply. (required)
        :type changeset_plan_request: SherlockChangesetV3PlanRequest
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_plan_and_apply_post_serialize(
            changeset_plan_request=changeset_plan_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '201': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_procedures_v3_plan_and_apply_post_without_preload_content(
        self,
        changeset_plan_request: Annotated[SherlockChangesetV3PlanRequest, Field(description="Info on what version changes or refreshes to apply.")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Plan and apply version changes in one step

        Like calling the plan procedure immediately followed by the apply procedure. See those endpoints for more information.

        :param changeset_plan_request: Info on what version changes or refreshes to apply. (required)
        :type changeset_plan_request: SherlockChangesetV3PlanRequest
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_plan_and_apply_post_serialize(
            changeset_plan_request=changeset_plan_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '201': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_procedures_v3_plan_and_apply_post_serialize(
        self,
        changeset_plan_request,
        verbose_output,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if verbose_output is not None:
            
            _query_params.append(('verbose-output', verbose_output))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if changeset_plan_request is not None:
            _body_params = changeset_plan_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/changesets/procedures/v3/plan-and-apply',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_changesets_procedures_v3_plan_post(
        self,
        changeset_plan_request: Annotated[SherlockChangesetV3PlanRequest, Field(description="Info on what version changes or refreshes to plan")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChangesetV3]:
        """Plan--but do not apply--version changes to Chart Releases

        Refreshes and calculates version diffs for Chart Releases. If there's a diff, the plan is stored and returned so it can be applied later.

        :param changeset_plan_request: Info on what version changes or refreshes to plan (required)
        :type changeset_plan_request: SherlockChangesetV3PlanRequest
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_plan_post_serialize(
            changeset_plan_request=changeset_plan_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '201': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_procedures_v3_plan_post_with_http_info(
        self,
        changeset_plan_request: Annotated[SherlockChangesetV3PlanRequest, Field(description="Info on what version changes or refreshes to plan")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChangesetV3]]:
        """Plan--but do not apply--version changes to Chart Releases

        Refreshes and calculates version diffs for Chart Releases. If there's a diff, the plan is stored and returned so it can be applied later.

        :param changeset_plan_request: Info on what version changes or refreshes to plan (required)
        :type changeset_plan_request: SherlockChangesetV3PlanRequest
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_plan_post_serialize(
            changeset_plan_request=changeset_plan_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '201': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_procedures_v3_plan_post_without_preload_content(
        self,
        changeset_plan_request: Annotated[SherlockChangesetV3PlanRequest, Field(description="Info on what version changes or refreshes to plan")],
        verbose_output: Annotated[Optional[StrictBool], Field(description="If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Plan--but do not apply--version changes to Chart Releases

        Refreshes and calculates version diffs for Chart Releases. If there's a diff, the plan is stored and returned so it can be applied later.

        :param changeset_plan_request: Info on what version changes or refreshes to plan (required)
        :type changeset_plan_request: SherlockChangesetV3PlanRequest
        :param verbose_output: If full information about the changesets should be returned, defaults to true. If false, only the IDs will be returned.
        :type verbose_output: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_plan_post_serialize(
            changeset_plan_request=changeset_plan_request,
            verbose_output=verbose_output,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '201': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_procedures_v3_plan_post_serialize(
        self,
        changeset_plan_request,
        verbose_output,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if verbose_output is not None:
            
            _query_params.append(('verbose-output', verbose_output))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if changeset_plan_request is not None:
            _body_params = changeset_plan_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/changesets/procedures/v3/plan',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_changesets_procedures_v3_version_history_version_type_chart_version_get(
        self,
        version_type: Annotated[StrictStr, Field(description="The type of the version, either 'app' or 'chart'")],
        chart: Annotated[StrictStr, Field(description="The chart the version belongs to")],
        version: Annotated[StrictStr, Field(description="The version to look for")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChangesetV3]:
        """List applied Changesets for an App or Chart Version

        List existing applied Changesets that newly deployed a given App Version or Chart Version, ordered by most recently applied.

        :param version_type: The type of the version, either 'app' or 'chart' (required)
        :type version_type: str
        :param chart: The chart the version belongs to (required)
        :type chart: str
        :param version: The version to look for (required)
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_version_history_version_type_chart_version_get_serialize(
            version_type=version_type,
            chart=chart,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_procedures_v3_version_history_version_type_chart_version_get_with_http_info(
        self,
        version_type: Annotated[StrictStr, Field(description="The type of the version, either 'app' or 'chart'")],
        chart: Annotated[StrictStr, Field(description="The chart the version belongs to")],
        version: Annotated[StrictStr, Field(description="The version to look for")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChangesetV3]]:
        """List applied Changesets for an App or Chart Version

        List existing applied Changesets that newly deployed a given App Version or Chart Version, ordered by most recently applied.

        :param version_type: The type of the version, either 'app' or 'chart' (required)
        :type version_type: str
        :param chart: The chart the version belongs to (required)
        :type chart: str
        :param version: The version to look for (required)
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_version_history_version_type_chart_version_get_serialize(
            version_type=version_type,
            chart=chart,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_procedures_v3_version_history_version_type_chart_version_get_without_preload_content(
        self,
        version_type: Annotated[StrictStr, Field(description="The type of the version, either 'app' or 'chart'")],
        chart: Annotated[StrictStr, Field(description="The chart the version belongs to")],
        version: Annotated[StrictStr, Field(description="The version to look for")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List applied Changesets for an App or Chart Version

        List existing applied Changesets that newly deployed a given App Version or Chart Version, ordered by most recently applied.

        :param version_type: The type of the version, either 'app' or 'chart' (required)
        :type version_type: str
        :param chart: The chart the version belongs to (required)
        :type chart: str
        :param version: The version to look for (required)
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_procedures_v3_version_history_version_type_chart_version_get_serialize(
            version_type=version_type,
            chart=chart,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_procedures_v3_version_history_version_type_chart_version_get_serialize(
        self,
        version_type,
        chart,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_type is not None:
            _path_params['version-type'] = version_type
        if chart is not None:
            _path_params['chart'] = chart
        if version is not None:
            _path_params['version'] = version
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/changesets/procedures/v3/version-history/{version-type}/{chart}/{version}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_changesets_v3_get(
        self,
        applied_at: Optional[datetime] = None,
        applied_by: Optional[StrictStr] = None,
        chart_release: Optional[StrictStr] = None,
        from_app_version_branch: Optional[StrictStr] = None,
        from_app_version_commit: Optional[StrictStr] = None,
        from_app_version_exact: Optional[StrictStr] = None,
        from_app_version_follow_chart_release: Optional[StrictStr] = None,
        from_app_version_reference: Optional[StrictStr] = None,
        from_app_version_resolver: Optional[StrictStr] = None,
        from_chart_version_exact: Optional[StrictStr] = None,
        from_chart_version_follow_chart_release: Optional[StrictStr] = None,
        from_chart_version_reference: Optional[StrictStr] = None,
        from_chart_version_resolver: Optional[StrictStr] = None,
        from_helmfile_ref: Optional[StrictStr] = None,
        from_helmfile_ref_enabled: Optional[StrictBool] = None,
        from_resolved_at: Optional[datetime] = None,
        planned_by: Optional[StrictStr] = None,
        superseded_at: Optional[datetime] = None,
        to_app_version_branch: Optional[StrictStr] = None,
        to_app_version_commit: Optional[StrictStr] = None,
        to_app_version_exact: Optional[StrictStr] = None,
        to_app_version_follow_chart_release: Optional[StrictStr] = None,
        to_app_version_reference: Optional[StrictStr] = None,
        to_app_version_resolver: Optional[StrictStr] = None,
        to_chart_version_exact: Optional[StrictStr] = None,
        to_chart_version_follow_chart_release: Optional[StrictStr] = None,
        to_chart_version_reference: Optional[StrictStr] = None,
        to_chart_version_resolver: Optional[StrictStr] = None,
        to_helmfile_ref: Optional[StrictStr] = None,
        to_helmfile_ref_enabled: Optional[StrictBool] = None,
        to_resolved_at: Optional[datetime] = None,
        id: Annotated[Optional[List[StrictInt]], Field(description="Get specific changesets by their IDs, can be passed multiple times and/or be comma-separated")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Changesets are returned (default 100), ignored if specific IDs are passed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Changesets (default 0), ignored if specific IDs are passed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockChangesetV3]:
        """List Changesets matching a filter

        List Changesets matching a filter.

        :param applied_at:
        :type applied_at: datetime
        :param applied_by:
        :type applied_by: str
        :param chart_release:
        :type chart_release: str
        :param from_app_version_branch:
        :type from_app_version_branch: str
        :param from_app_version_commit:
        :type from_app_version_commit: str
        :param from_app_version_exact:
        :type from_app_version_exact: str
        :param from_app_version_follow_chart_release:
        :type from_app_version_follow_chart_release: str
        :param from_app_version_reference:
        :type from_app_version_reference: str
        :param from_app_version_resolver:
        :type from_app_version_resolver: str
        :param from_chart_version_exact:
        :type from_chart_version_exact: str
        :param from_chart_version_follow_chart_release:
        :type from_chart_version_follow_chart_release: str
        :param from_chart_version_reference:
        :type from_chart_version_reference: str
        :param from_chart_version_resolver:
        :type from_chart_version_resolver: str
        :param from_helmfile_ref:
        :type from_helmfile_ref: str
        :param from_helmfile_ref_enabled:
        :type from_helmfile_ref_enabled: bool
        :param from_resolved_at:
        :type from_resolved_at: datetime
        :param planned_by:
        :type planned_by: str
        :param superseded_at:
        :type superseded_at: datetime
        :param to_app_version_branch:
        :type to_app_version_branch: str
        :param to_app_version_commit:
        :type to_app_version_commit: str
        :param to_app_version_exact:
        :type to_app_version_exact: str
        :param to_app_version_follow_chart_release:
        :type to_app_version_follow_chart_release: str
        :param to_app_version_reference:
        :type to_app_version_reference: str
        :param to_app_version_resolver:
        :type to_app_version_resolver: str
        :param to_chart_version_exact:
        :type to_chart_version_exact: str
        :param to_chart_version_follow_chart_release:
        :type to_chart_version_follow_chart_release: str
        :param to_chart_version_reference:
        :type to_chart_version_reference: str
        :param to_chart_version_resolver:
        :type to_chart_version_resolver: str
        :param to_helmfile_ref:
        :type to_helmfile_ref: str
        :param to_helmfile_ref_enabled:
        :type to_helmfile_ref_enabled: bool
        :param to_resolved_at:
        :type to_resolved_at: datetime
        :param id: Get specific changesets by their IDs, can be passed multiple times and/or be comma-separated
        :type id: List[int]
        :param limit: Control how many Changesets are returned (default 100), ignored if specific IDs are passed
        :type limit: int
        :param offset: Control the offset for the returned Changesets (default 0), ignored if specific IDs are passed
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_v3_get_serialize(
            applied_at=applied_at,
            applied_by=applied_by,
            chart_release=chart_release,
            from_app_version_branch=from_app_version_branch,
            from_app_version_commit=from_app_version_commit,
            from_app_version_exact=from_app_version_exact,
            from_app_version_follow_chart_release=from_app_version_follow_chart_release,
            from_app_version_reference=from_app_version_reference,
            from_app_version_resolver=from_app_version_resolver,
            from_chart_version_exact=from_chart_version_exact,
            from_chart_version_follow_chart_release=from_chart_version_follow_chart_release,
            from_chart_version_reference=from_chart_version_reference,
            from_chart_version_resolver=from_chart_version_resolver,
            from_helmfile_ref=from_helmfile_ref,
            from_helmfile_ref_enabled=from_helmfile_ref_enabled,
            from_resolved_at=from_resolved_at,
            planned_by=planned_by,
            superseded_at=superseded_at,
            to_app_version_branch=to_app_version_branch,
            to_app_version_commit=to_app_version_commit,
            to_app_version_exact=to_app_version_exact,
            to_app_version_follow_chart_release=to_app_version_follow_chart_release,
            to_app_version_reference=to_app_version_reference,
            to_app_version_resolver=to_app_version_resolver,
            to_chart_version_exact=to_chart_version_exact,
            to_chart_version_follow_chart_release=to_chart_version_follow_chart_release,
            to_chart_version_reference=to_chart_version_reference,
            to_chart_version_resolver=to_chart_version_resolver,
            to_helmfile_ref=to_helmfile_ref,
            to_helmfile_ref_enabled=to_helmfile_ref_enabled,
            to_resolved_at=to_resolved_at,
            id=id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_v3_get_with_http_info(
        self,
        applied_at: Optional[datetime] = None,
        applied_by: Optional[StrictStr] = None,
        chart_release: Optional[StrictStr] = None,
        from_app_version_branch: Optional[StrictStr] = None,
        from_app_version_commit: Optional[StrictStr] = None,
        from_app_version_exact: Optional[StrictStr] = None,
        from_app_version_follow_chart_release: Optional[StrictStr] = None,
        from_app_version_reference: Optional[StrictStr] = None,
        from_app_version_resolver: Optional[StrictStr] = None,
        from_chart_version_exact: Optional[StrictStr] = None,
        from_chart_version_follow_chart_release: Optional[StrictStr] = None,
        from_chart_version_reference: Optional[StrictStr] = None,
        from_chart_version_resolver: Optional[StrictStr] = None,
        from_helmfile_ref: Optional[StrictStr] = None,
        from_helmfile_ref_enabled: Optional[StrictBool] = None,
        from_resolved_at: Optional[datetime] = None,
        planned_by: Optional[StrictStr] = None,
        superseded_at: Optional[datetime] = None,
        to_app_version_branch: Optional[StrictStr] = None,
        to_app_version_commit: Optional[StrictStr] = None,
        to_app_version_exact: Optional[StrictStr] = None,
        to_app_version_follow_chart_release: Optional[StrictStr] = None,
        to_app_version_reference: Optional[StrictStr] = None,
        to_app_version_resolver: Optional[StrictStr] = None,
        to_chart_version_exact: Optional[StrictStr] = None,
        to_chart_version_follow_chart_release: Optional[StrictStr] = None,
        to_chart_version_reference: Optional[StrictStr] = None,
        to_chart_version_resolver: Optional[StrictStr] = None,
        to_helmfile_ref: Optional[StrictStr] = None,
        to_helmfile_ref_enabled: Optional[StrictBool] = None,
        to_resolved_at: Optional[datetime] = None,
        id: Annotated[Optional[List[StrictInt]], Field(description="Get specific changesets by their IDs, can be passed multiple times and/or be comma-separated")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Changesets are returned (default 100), ignored if specific IDs are passed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Changesets (default 0), ignored if specific IDs are passed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockChangesetV3]]:
        """List Changesets matching a filter

        List Changesets matching a filter.

        :param applied_at:
        :type applied_at: datetime
        :param applied_by:
        :type applied_by: str
        :param chart_release:
        :type chart_release: str
        :param from_app_version_branch:
        :type from_app_version_branch: str
        :param from_app_version_commit:
        :type from_app_version_commit: str
        :param from_app_version_exact:
        :type from_app_version_exact: str
        :param from_app_version_follow_chart_release:
        :type from_app_version_follow_chart_release: str
        :param from_app_version_reference:
        :type from_app_version_reference: str
        :param from_app_version_resolver:
        :type from_app_version_resolver: str
        :param from_chart_version_exact:
        :type from_chart_version_exact: str
        :param from_chart_version_follow_chart_release:
        :type from_chart_version_follow_chart_release: str
        :param from_chart_version_reference:
        :type from_chart_version_reference: str
        :param from_chart_version_resolver:
        :type from_chart_version_resolver: str
        :param from_helmfile_ref:
        :type from_helmfile_ref: str
        :param from_helmfile_ref_enabled:
        :type from_helmfile_ref_enabled: bool
        :param from_resolved_at:
        :type from_resolved_at: datetime
        :param planned_by:
        :type planned_by: str
        :param superseded_at:
        :type superseded_at: datetime
        :param to_app_version_branch:
        :type to_app_version_branch: str
        :param to_app_version_commit:
        :type to_app_version_commit: str
        :param to_app_version_exact:
        :type to_app_version_exact: str
        :param to_app_version_follow_chart_release:
        :type to_app_version_follow_chart_release: str
        :param to_app_version_reference:
        :type to_app_version_reference: str
        :param to_app_version_resolver:
        :type to_app_version_resolver: str
        :param to_chart_version_exact:
        :type to_chart_version_exact: str
        :param to_chart_version_follow_chart_release:
        :type to_chart_version_follow_chart_release: str
        :param to_chart_version_reference:
        :type to_chart_version_reference: str
        :param to_chart_version_resolver:
        :type to_chart_version_resolver: str
        :param to_helmfile_ref:
        :type to_helmfile_ref: str
        :param to_helmfile_ref_enabled:
        :type to_helmfile_ref_enabled: bool
        :param to_resolved_at:
        :type to_resolved_at: datetime
        :param id: Get specific changesets by their IDs, can be passed multiple times and/or be comma-separated
        :type id: List[int]
        :param limit: Control how many Changesets are returned (default 100), ignored if specific IDs are passed
        :type limit: int
        :param offset: Control the offset for the returned Changesets (default 0), ignored if specific IDs are passed
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_v3_get_serialize(
            applied_at=applied_at,
            applied_by=applied_by,
            chart_release=chart_release,
            from_app_version_branch=from_app_version_branch,
            from_app_version_commit=from_app_version_commit,
            from_app_version_exact=from_app_version_exact,
            from_app_version_follow_chart_release=from_app_version_follow_chart_release,
            from_app_version_reference=from_app_version_reference,
            from_app_version_resolver=from_app_version_resolver,
            from_chart_version_exact=from_chart_version_exact,
            from_chart_version_follow_chart_release=from_chart_version_follow_chart_release,
            from_chart_version_reference=from_chart_version_reference,
            from_chart_version_resolver=from_chart_version_resolver,
            from_helmfile_ref=from_helmfile_ref,
            from_helmfile_ref_enabled=from_helmfile_ref_enabled,
            from_resolved_at=from_resolved_at,
            planned_by=planned_by,
            superseded_at=superseded_at,
            to_app_version_branch=to_app_version_branch,
            to_app_version_commit=to_app_version_commit,
            to_app_version_exact=to_app_version_exact,
            to_app_version_follow_chart_release=to_app_version_follow_chart_release,
            to_app_version_reference=to_app_version_reference,
            to_app_version_resolver=to_app_version_resolver,
            to_chart_version_exact=to_chart_version_exact,
            to_chart_version_follow_chart_release=to_chart_version_follow_chart_release,
            to_chart_version_reference=to_chart_version_reference,
            to_chart_version_resolver=to_chart_version_resolver,
            to_helmfile_ref=to_helmfile_ref,
            to_helmfile_ref_enabled=to_helmfile_ref_enabled,
            to_resolved_at=to_resolved_at,
            id=id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_v3_get_without_preload_content(
        self,
        applied_at: Optional[datetime] = None,
        applied_by: Optional[StrictStr] = None,
        chart_release: Optional[StrictStr] = None,
        from_app_version_branch: Optional[StrictStr] = None,
        from_app_version_commit: Optional[StrictStr] = None,
        from_app_version_exact: Optional[StrictStr] = None,
        from_app_version_follow_chart_release: Optional[StrictStr] = None,
        from_app_version_reference: Optional[StrictStr] = None,
        from_app_version_resolver: Optional[StrictStr] = None,
        from_chart_version_exact: Optional[StrictStr] = None,
        from_chart_version_follow_chart_release: Optional[StrictStr] = None,
        from_chart_version_reference: Optional[StrictStr] = None,
        from_chart_version_resolver: Optional[StrictStr] = None,
        from_helmfile_ref: Optional[StrictStr] = None,
        from_helmfile_ref_enabled: Optional[StrictBool] = None,
        from_resolved_at: Optional[datetime] = None,
        planned_by: Optional[StrictStr] = None,
        superseded_at: Optional[datetime] = None,
        to_app_version_branch: Optional[StrictStr] = None,
        to_app_version_commit: Optional[StrictStr] = None,
        to_app_version_exact: Optional[StrictStr] = None,
        to_app_version_follow_chart_release: Optional[StrictStr] = None,
        to_app_version_reference: Optional[StrictStr] = None,
        to_app_version_resolver: Optional[StrictStr] = None,
        to_chart_version_exact: Optional[StrictStr] = None,
        to_chart_version_follow_chart_release: Optional[StrictStr] = None,
        to_chart_version_reference: Optional[StrictStr] = None,
        to_chart_version_resolver: Optional[StrictStr] = None,
        to_helmfile_ref: Optional[StrictStr] = None,
        to_helmfile_ref_enabled: Optional[StrictBool] = None,
        to_resolved_at: Optional[datetime] = None,
        id: Annotated[Optional[List[StrictInt]], Field(description="Get specific changesets by their IDs, can be passed multiple times and/or be comma-separated")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Changesets are returned (default 100), ignored if specific IDs are passed")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Changesets (default 0), ignored if specific IDs are passed")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Changesets matching a filter

        List Changesets matching a filter.

        :param applied_at:
        :type applied_at: datetime
        :param applied_by:
        :type applied_by: str
        :param chart_release:
        :type chart_release: str
        :param from_app_version_branch:
        :type from_app_version_branch: str
        :param from_app_version_commit:
        :type from_app_version_commit: str
        :param from_app_version_exact:
        :type from_app_version_exact: str
        :param from_app_version_follow_chart_release:
        :type from_app_version_follow_chart_release: str
        :param from_app_version_reference:
        :type from_app_version_reference: str
        :param from_app_version_resolver:
        :type from_app_version_resolver: str
        :param from_chart_version_exact:
        :type from_chart_version_exact: str
        :param from_chart_version_follow_chart_release:
        :type from_chart_version_follow_chart_release: str
        :param from_chart_version_reference:
        :type from_chart_version_reference: str
        :param from_chart_version_resolver:
        :type from_chart_version_resolver: str
        :param from_helmfile_ref:
        :type from_helmfile_ref: str
        :param from_helmfile_ref_enabled:
        :type from_helmfile_ref_enabled: bool
        :param from_resolved_at:
        :type from_resolved_at: datetime
        :param planned_by:
        :type planned_by: str
        :param superseded_at:
        :type superseded_at: datetime
        :param to_app_version_branch:
        :type to_app_version_branch: str
        :param to_app_version_commit:
        :type to_app_version_commit: str
        :param to_app_version_exact:
        :type to_app_version_exact: str
        :param to_app_version_follow_chart_release:
        :type to_app_version_follow_chart_release: str
        :param to_app_version_reference:
        :type to_app_version_reference: str
        :param to_app_version_resolver:
        :type to_app_version_resolver: str
        :param to_chart_version_exact:
        :type to_chart_version_exact: str
        :param to_chart_version_follow_chart_release:
        :type to_chart_version_follow_chart_release: str
        :param to_chart_version_reference:
        :type to_chart_version_reference: str
        :param to_chart_version_resolver:
        :type to_chart_version_resolver: str
        :param to_helmfile_ref:
        :type to_helmfile_ref: str
        :param to_helmfile_ref_enabled:
        :type to_helmfile_ref_enabled: bool
        :param to_resolved_at:
        :type to_resolved_at: datetime
        :param id: Get specific changesets by their IDs, can be passed multiple times and/or be comma-separated
        :type id: List[int]
        :param limit: Control how many Changesets are returned (default 100), ignored if specific IDs are passed
        :type limit: int
        :param offset: Control the offset for the returned Changesets (default 0), ignored if specific IDs are passed
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_v3_get_serialize(
            applied_at=applied_at,
            applied_by=applied_by,
            chart_release=chart_release,
            from_app_version_branch=from_app_version_branch,
            from_app_version_commit=from_app_version_commit,
            from_app_version_exact=from_app_version_exact,
            from_app_version_follow_chart_release=from_app_version_follow_chart_release,
            from_app_version_reference=from_app_version_reference,
            from_app_version_resolver=from_app_version_resolver,
            from_chart_version_exact=from_chart_version_exact,
            from_chart_version_follow_chart_release=from_chart_version_follow_chart_release,
            from_chart_version_reference=from_chart_version_reference,
            from_chart_version_resolver=from_chart_version_resolver,
            from_helmfile_ref=from_helmfile_ref,
            from_helmfile_ref_enabled=from_helmfile_ref_enabled,
            from_resolved_at=from_resolved_at,
            planned_by=planned_by,
            superseded_at=superseded_at,
            to_app_version_branch=to_app_version_branch,
            to_app_version_commit=to_app_version_commit,
            to_app_version_exact=to_app_version_exact,
            to_app_version_follow_chart_release=to_app_version_follow_chart_release,
            to_app_version_reference=to_app_version_reference,
            to_app_version_resolver=to_app_version_resolver,
            to_chart_version_exact=to_chart_version_exact,
            to_chart_version_follow_chart_release=to_chart_version_follow_chart_release,
            to_chart_version_reference=to_chart_version_reference,
            to_chart_version_resolver=to_chart_version_resolver,
            to_helmfile_ref=to_helmfile_ref,
            to_helmfile_ref_enabled=to_helmfile_ref_enabled,
            to_resolved_at=to_resolved_at,
            id=id,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockChangesetV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_v3_get_serialize(
        self,
        applied_at,
        applied_by,
        chart_release,
        from_app_version_branch,
        from_app_version_commit,
        from_app_version_exact,
        from_app_version_follow_chart_release,
        from_app_version_reference,
        from_app_version_resolver,
        from_chart_version_exact,
        from_chart_version_follow_chart_release,
        from_chart_version_reference,
        from_chart_version_resolver,
        from_helmfile_ref,
        from_helmfile_ref_enabled,
        from_resolved_at,
        planned_by,
        superseded_at,
        to_app_version_branch,
        to_app_version_commit,
        to_app_version_exact,
        to_app_version_follow_chart_release,
        to_app_version_reference,
        to_app_version_resolver,
        to_chart_version_exact,
        to_chart_version_follow_chart_release,
        to_chart_version_reference,
        to_chart_version_resolver,
        to_helmfile_ref,
        to_helmfile_ref_enabled,
        to_resolved_at,
        id,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if applied_at is not None:
            if isinstance(applied_at, datetime):
                _query_params.append(
                    (
                        'appliedAt',
                        applied_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('appliedAt', applied_at))
            
        if applied_by is not None:
            
            _query_params.append(('appliedBy', applied_by))
            
        if chart_release is not None:
            
            _query_params.append(('chartRelease', chart_release))
            
        if from_app_version_branch is not None:
            
            _query_params.append(('fromAppVersionBranch', from_app_version_branch))
            
        if from_app_version_commit is not None:
            
            _query_params.append(('fromAppVersionCommit', from_app_version_commit))
            
        if from_app_version_exact is not None:
            
            _query_params.append(('fromAppVersionExact', from_app_version_exact))
            
        if from_app_version_follow_chart_release is not None:
            
            _query_params.append(('fromAppVersionFollowChartRelease', from_app_version_follow_chart_release))
            
        if from_app_version_reference is not None:
            
            _query_params.append(('fromAppVersionReference', from_app_version_reference))
            
        if from_app_version_resolver is not None:
            
            _query_params.append(('fromAppVersionResolver', from_app_version_resolver))
            
        if from_chart_version_exact is not None:
            
            _query_params.append(('fromChartVersionExact', from_chart_version_exact))
            
        if from_chart_version_follow_chart_release is not None:
            
            _query_params.append(('fromChartVersionFollowChartRelease', from_chart_version_follow_chart_release))
            
        if from_chart_version_reference is not None:
            
            _query_params.append(('fromChartVersionReference', from_chart_version_reference))
            
        if from_chart_version_resolver is not None:
            
            _query_params.append(('fromChartVersionResolver', from_chart_version_resolver))
            
        if from_helmfile_ref is not None:
            
            _query_params.append(('fromHelmfileRef', from_helmfile_ref))
            
        if from_helmfile_ref_enabled is not None:
            
            _query_params.append(('fromHelmfileRefEnabled', from_helmfile_ref_enabled))
            
        if from_resolved_at is not None:
            if isinstance(from_resolved_at, datetime):
                _query_params.append(
                    (
                        'fromResolvedAt',
                        from_resolved_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('fromResolvedAt', from_resolved_at))
            
        if planned_by is not None:
            
            _query_params.append(('plannedBy', planned_by))
            
        if superseded_at is not None:
            if isinstance(superseded_at, datetime):
                _query_params.append(
                    (
                        'supersededAt',
                        superseded_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('supersededAt', superseded_at))
            
        if to_app_version_branch is not None:
            
            _query_params.append(('toAppVersionBranch', to_app_version_branch))
            
        if to_app_version_commit is not None:
            
            _query_params.append(('toAppVersionCommit', to_app_version_commit))
            
        if to_app_version_exact is not None:
            
            _query_params.append(('toAppVersionExact', to_app_version_exact))
            
        if to_app_version_follow_chart_release is not None:
            
            _query_params.append(('toAppVersionFollowChartRelease', to_app_version_follow_chart_release))
            
        if to_app_version_reference is not None:
            
            _query_params.append(('toAppVersionReference', to_app_version_reference))
            
        if to_app_version_resolver is not None:
            
            _query_params.append(('toAppVersionResolver', to_app_version_resolver))
            
        if to_chart_version_exact is not None:
            
            _query_params.append(('toChartVersionExact', to_chart_version_exact))
            
        if to_chart_version_follow_chart_release is not None:
            
            _query_params.append(('toChartVersionFollowChartRelease', to_chart_version_follow_chart_release))
            
        if to_chart_version_reference is not None:
            
            _query_params.append(('toChartVersionReference', to_chart_version_reference))
            
        if to_chart_version_resolver is not None:
            
            _query_params.append(('toChartVersionResolver', to_chart_version_resolver))
            
        if to_helmfile_ref is not None:
            
            _query_params.append(('toHelmfileRef', to_helmfile_ref))
            
        if to_helmfile_ref_enabled is not None:
            
            _query_params.append(('toHelmfileRefEnabled', to_helmfile_ref_enabled))
            
        if to_resolved_at is not None:
            if isinstance(to_resolved_at, datetime):
                _query_params.append(
                    (
                        'toResolvedAt',
                        to_resolved_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('toResolvedAt', to_resolved_at))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/changesets/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_changesets_v3_id_get(
        self,
        id: Annotated[StrictInt, Field(description="The numeric ID of the changeset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockChangesetV3:
        """Get an individual Changeset

        Get an individual Changeset.

        :param id: The numeric ID of the changeset (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_v3_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChangesetV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_changesets_v3_id_get_with_http_info(
        self,
        id: Annotated[StrictInt, Field(description="The numeric ID of the changeset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockChangesetV3]:
        """Get an individual Changeset

        Get an individual Changeset.

        :param id: The numeric ID of the changeset (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_v3_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChangesetV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_changesets_v3_id_get_without_preload_content(
        self,
        id: Annotated[StrictInt, Field(description="The numeric ID of the changeset")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get an individual Changeset

        Get an individual Changeset.

        :param id: The numeric ID of the changeset (required)
        :type id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_changesets_v3_id_get_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockChangesetV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_changesets_v3_id_get_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/changesets/v3/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


