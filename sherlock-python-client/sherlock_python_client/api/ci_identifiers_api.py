# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from sherlock_python_client.models.sherlock_ci_identifier_v3 import SherlockCiIdentifierV3

from sherlock_python_client.api_client import ApiClient, RequestSerialized
from sherlock_python_client.api_response import ApiResponse
from sherlock_python_client.rest import RESTResponseType


class CiIdentifiersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_ci_identifiers_v3_get(
        self,
        created_at: Optional[datetime] = None,
        id: Optional[StrictInt] = None,
        resource_id: Optional[StrictInt] = None,
        resource_status: Annotated[Optional[StrictStr], Field(description="Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource")] = None,
        resource_type: Optional[StrictStr] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many CiIdentifiers are returned (default 100)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned CiIdentifiers (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockCiIdentifierV3]:
        """List CiIdentifiers matching a filter

        List CiIdentifiers matching a filter. The CiRuns would have to re-queried directly to load the CiRuns. This is mainly helpful for debugging and directly querying the existence of a CiIdentifier. Results are ordered by creation date, starting at most recent.

        :param created_at:
        :type created_at: datetime
        :param id:
        :type id: int
        :param resource_id:
        :type resource_id: int
        :param resource_status: Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource
        :type resource_status: str
        :param resource_type:
        :type resource_type: str
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many CiIdentifiers are returned (default 100)
        :type limit: int
        :param offset: Control the offset for the returned CiIdentifiers (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_ci_identifiers_v3_get_serialize(
            created_at=created_at,
            id=id,
            resource_id=resource_id,
            resource_status=resource_status,
            resource_type=resource_type,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockCiIdentifierV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_ci_identifiers_v3_get_with_http_info(
        self,
        created_at: Optional[datetime] = None,
        id: Optional[StrictInt] = None,
        resource_id: Optional[StrictInt] = None,
        resource_status: Annotated[Optional[StrictStr], Field(description="Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource")] = None,
        resource_type: Optional[StrictStr] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many CiIdentifiers are returned (default 100)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned CiIdentifiers (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockCiIdentifierV3]]:
        """List CiIdentifiers matching a filter

        List CiIdentifiers matching a filter. The CiRuns would have to re-queried directly to load the CiRuns. This is mainly helpful for debugging and directly querying the existence of a CiIdentifier. Results are ordered by creation date, starting at most recent.

        :param created_at:
        :type created_at: datetime
        :param id:
        :type id: int
        :param resource_id:
        :type resource_id: int
        :param resource_status: Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource
        :type resource_status: str
        :param resource_type:
        :type resource_type: str
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many CiIdentifiers are returned (default 100)
        :type limit: int
        :param offset: Control the offset for the returned CiIdentifiers (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_ci_identifiers_v3_get_serialize(
            created_at=created_at,
            id=id,
            resource_id=resource_id,
            resource_status=resource_status,
            resource_type=resource_type,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockCiIdentifierV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_ci_identifiers_v3_get_without_preload_content(
        self,
        created_at: Optional[datetime] = None,
        id: Optional[StrictInt] = None,
        resource_id: Optional[StrictInt] = None,
        resource_status: Annotated[Optional[StrictStr], Field(description="Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource")] = None,
        resource_type: Optional[StrictStr] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many CiIdentifiers are returned (default 100)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned CiIdentifiers (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List CiIdentifiers matching a filter

        List CiIdentifiers matching a filter. The CiRuns would have to re-queried directly to load the CiRuns. This is mainly helpful for debugging and directly querying the existence of a CiIdentifier. Results are ordered by creation date, starting at most recent.

        :param created_at:
        :type created_at: datetime
        :param id:
        :type id: int
        :param resource_id:
        :type resource_id: int
        :param resource_status: Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource
        :type resource_status: str
        :param resource_type:
        :type resource_type: str
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many CiIdentifiers are returned (default 100)
        :type limit: int
        :param offset: Control the offset for the returned CiIdentifiers (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_ci_identifiers_v3_get_serialize(
            created_at=created_at,
            id=id,
            resource_id=resource_id,
            resource_status=resource_status,
            resource_type=resource_type,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockCiIdentifierV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_ci_identifiers_v3_get_serialize(
        self,
        created_at,
        id,
        resource_id,
        resource_status,
        resource_type,
        updated_at,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if created_at is not None:
            if isinstance(created_at, datetime):
                _query_params.append(
                    (
                        'createdAt',
                        created_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt', created_at))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if resource_id is not None:
            
            _query_params.append(('resourceID', resource_id))
            
        if resource_status is not None:
            
            _query_params.append(('resourceStatus', resource_status))
            
        if resource_type is not None:
            
            _query_params.append(('resourceType', resource_type))
            
        if updated_at is not None:
            if isinstance(updated_at, datetime):
                _query_params.append(
                    (
                        'updatedAt',
                        updated_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt', updated_at))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/ci-identifiers/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_ci_identifiers_v3_selector_get(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of CiIdentifier, which can be referenced either by numeric ID or indirectly by '{type}/{selector...}'")],
        limit_ci_runs: Annotated[Optional[StrictInt], Field(description="Control how many CiRuns are returned (default 10)")] = None,
        offset_ci_runs: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned CiRuns (default 0)")] = None,
        allow_stub_ci_runs: Annotated[Optional[StrictBool], Field(description="Allow stub CiRuns potentially lacking fields like status or startedAt to be returned (default false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockCiIdentifierV3:
        """Get CiRuns for a resource by its CiIdentifier

        Get CiRuns for a resource by its CiIdentifier, which can be referenced by '{type}/{selector...}'.

        :param selector: The selector of CiIdentifier, which can be referenced either by numeric ID or indirectly by '{type}/{selector...}' (required)
        :type selector: str
        :param limit_ci_runs: Control how many CiRuns are returned (default 10)
        :type limit_ci_runs: int
        :param offset_ci_runs: Control the offset for the returned CiRuns (default 0)
        :type offset_ci_runs: int
        :param allow_stub_ci_runs: Allow stub CiRuns potentially lacking fields like status or startedAt to be returned (default false)
        :type allow_stub_ci_runs: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_ci_identifiers_v3_selector_get_serialize(
            selector=selector,
            limit_ci_runs=limit_ci_runs,
            offset_ci_runs=offset_ci_runs,
            allow_stub_ci_runs=allow_stub_ci_runs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockCiIdentifierV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_ci_identifiers_v3_selector_get_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of CiIdentifier, which can be referenced either by numeric ID or indirectly by '{type}/{selector...}'")],
        limit_ci_runs: Annotated[Optional[StrictInt], Field(description="Control how many CiRuns are returned (default 10)")] = None,
        offset_ci_runs: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned CiRuns (default 0)")] = None,
        allow_stub_ci_runs: Annotated[Optional[StrictBool], Field(description="Allow stub CiRuns potentially lacking fields like status or startedAt to be returned (default false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockCiIdentifierV3]:
        """Get CiRuns for a resource by its CiIdentifier

        Get CiRuns for a resource by its CiIdentifier, which can be referenced by '{type}/{selector...}'.

        :param selector: The selector of CiIdentifier, which can be referenced either by numeric ID or indirectly by '{type}/{selector...}' (required)
        :type selector: str
        :param limit_ci_runs: Control how many CiRuns are returned (default 10)
        :type limit_ci_runs: int
        :param offset_ci_runs: Control the offset for the returned CiRuns (default 0)
        :type offset_ci_runs: int
        :param allow_stub_ci_runs: Allow stub CiRuns potentially lacking fields like status or startedAt to be returned (default false)
        :type allow_stub_ci_runs: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_ci_identifiers_v3_selector_get_serialize(
            selector=selector,
            limit_ci_runs=limit_ci_runs,
            offset_ci_runs=offset_ci_runs,
            allow_stub_ci_runs=allow_stub_ci_runs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockCiIdentifierV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_ci_identifiers_v3_selector_get_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of CiIdentifier, which can be referenced either by numeric ID or indirectly by '{type}/{selector...}'")],
        limit_ci_runs: Annotated[Optional[StrictInt], Field(description="Control how many CiRuns are returned (default 10)")] = None,
        offset_ci_runs: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned CiRuns (default 0)")] = None,
        allow_stub_ci_runs: Annotated[Optional[StrictBool], Field(description="Allow stub CiRuns potentially lacking fields like status or startedAt to be returned (default false)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get CiRuns for a resource by its CiIdentifier

        Get CiRuns for a resource by its CiIdentifier, which can be referenced by '{type}/{selector...}'.

        :param selector: The selector of CiIdentifier, which can be referenced either by numeric ID or indirectly by '{type}/{selector...}' (required)
        :type selector: str
        :param limit_ci_runs: Control how many CiRuns are returned (default 10)
        :type limit_ci_runs: int
        :param offset_ci_runs: Control the offset for the returned CiRuns (default 0)
        :type offset_ci_runs: int
        :param allow_stub_ci_runs: Allow stub CiRuns potentially lacking fields like status or startedAt to be returned (default false)
        :type allow_stub_ci_runs: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_ci_identifiers_v3_selector_get_serialize(
            selector=selector,
            limit_ci_runs=limit_ci_runs,
            offset_ci_runs=offset_ci_runs,
            allow_stub_ci_runs=allow_stub_ci_runs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockCiIdentifierV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_ci_identifiers_v3_selector_get_serialize(
        self,
        selector,
        limit_ci_runs,
        offset_ci_runs,
        allow_stub_ci_runs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        if limit_ci_runs is not None:
            
            _query_params.append(('limitCiRuns', limit_ci_runs))
            
        if offset_ci_runs is not None:
            
            _query_params.append(('offsetCiRuns', offset_ci_runs))
            
        if allow_stub_ci_runs is not None:
            
            _query_params.append(('allowStubCiRuns', allow_stub_ci_runs))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/ci-identifiers/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


