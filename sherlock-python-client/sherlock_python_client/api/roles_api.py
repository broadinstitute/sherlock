# coding: utf-8

"""
    Sherlock

    The Data Science Platform's source-of-truth service. Note: this API will try to load and return associations in responses, so clients won't need to make as many requests. This behavior isn't recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).

    The version of the OpenAPI document: development
    Contact: dsp-devops@broadinstitute.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from sherlock_python_client.models.sherlock_role_v3 import SherlockRoleV3
from sherlock_python_client.models.sherlock_role_v3_edit import SherlockRoleV3Edit

from sherlock_python_client.api_client import ApiClient, RequestSerialized
from sherlock_python_client.api_response import ApiResponse
from sherlock_python_client.rest import RESTResponseType


class RolesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_roles_v3_get(
        self,
        auto_assign_all_users: Annotated[Optional[StrictBool], Field(description="When true, Sherlock will automatically assign all users to this role who do not already have a role assignment")] = None,
        can_be_glass_broken_by_role: Optional[StrictInt] = None,
        created_at: Optional[datetime] = None,
        default_glass_break_duration: Optional[StrictStr] = None,
        grants_broad_institute_group: Optional[StrictStr] = None,
        grants_dev_azure_group: Optional[StrictStr] = None,
        grants_dev_firecloud_group: Optional[StrictStr] = None,
        grants_prod_azure_group: Optional[StrictStr] = None,
        grants_prod_firecloud_group: Optional[StrictStr] = None,
        grants_qa_firecloud_group: Optional[StrictStr] = None,
        grants_sherlock_super_admin: Optional[StrictBool] = None,
        id: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        suspend_non_suitable_users: Annotated[Optional[StrictBool], Field(description="When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Roles are returned (default 0, no limit)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Roles (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[SherlockRoleV3]:
        """List Roles matching a filter

        List Roles matching a filter.

        :param auto_assign_all_users: When true, Sherlock will automatically assign all users to this role who do not already have a role assignment
        :type auto_assign_all_users: bool
        :param can_be_glass_broken_by_role:
        :type can_be_glass_broken_by_role: int
        :param created_at:
        :type created_at: datetime
        :param default_glass_break_duration:
        :type default_glass_break_duration: str
        :param grants_broad_institute_group:
        :type grants_broad_institute_group: str
        :param grants_dev_azure_group:
        :type grants_dev_azure_group: str
        :param grants_dev_firecloud_group:
        :type grants_dev_firecloud_group: str
        :param grants_prod_azure_group:
        :type grants_prod_azure_group: str
        :param grants_prod_firecloud_group:
        :type grants_prod_firecloud_group: str
        :param grants_qa_firecloud_group:
        :type grants_qa_firecloud_group: str
        :param grants_sherlock_super_admin:
        :type grants_sherlock_super_admin: bool
        :param id:
        :type id: int
        :param name:
        :type name: str
        :param suspend_non_suitable_users: When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field
        :type suspend_non_suitable_users: bool
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many Roles are returned (default 0, no limit)
        :type limit: int
        :param offset: Control the offset for the returned Roles (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_get_serialize(
            auto_assign_all_users=auto_assign_all_users,
            can_be_glass_broken_by_role=can_be_glass_broken_by_role,
            created_at=created_at,
            default_glass_break_duration=default_glass_break_duration,
            grants_broad_institute_group=grants_broad_institute_group,
            grants_dev_azure_group=grants_dev_azure_group,
            grants_dev_firecloud_group=grants_dev_firecloud_group,
            grants_prod_azure_group=grants_prod_azure_group,
            grants_prod_firecloud_group=grants_prod_firecloud_group,
            grants_qa_firecloud_group=grants_qa_firecloud_group,
            grants_sherlock_super_admin=grants_sherlock_super_admin,
            id=id,
            name=name,
            suspend_non_suitable_users=suspend_non_suitable_users,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockRoleV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_roles_v3_get_with_http_info(
        self,
        auto_assign_all_users: Annotated[Optional[StrictBool], Field(description="When true, Sherlock will automatically assign all users to this role who do not already have a role assignment")] = None,
        can_be_glass_broken_by_role: Optional[StrictInt] = None,
        created_at: Optional[datetime] = None,
        default_glass_break_duration: Optional[StrictStr] = None,
        grants_broad_institute_group: Optional[StrictStr] = None,
        grants_dev_azure_group: Optional[StrictStr] = None,
        grants_dev_firecloud_group: Optional[StrictStr] = None,
        grants_prod_azure_group: Optional[StrictStr] = None,
        grants_prod_firecloud_group: Optional[StrictStr] = None,
        grants_qa_firecloud_group: Optional[StrictStr] = None,
        grants_sherlock_super_admin: Optional[StrictBool] = None,
        id: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        suspend_non_suitable_users: Annotated[Optional[StrictBool], Field(description="When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Roles are returned (default 0, no limit)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Roles (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[SherlockRoleV3]]:
        """List Roles matching a filter

        List Roles matching a filter.

        :param auto_assign_all_users: When true, Sherlock will automatically assign all users to this role who do not already have a role assignment
        :type auto_assign_all_users: bool
        :param can_be_glass_broken_by_role:
        :type can_be_glass_broken_by_role: int
        :param created_at:
        :type created_at: datetime
        :param default_glass_break_duration:
        :type default_glass_break_duration: str
        :param grants_broad_institute_group:
        :type grants_broad_institute_group: str
        :param grants_dev_azure_group:
        :type grants_dev_azure_group: str
        :param grants_dev_firecloud_group:
        :type grants_dev_firecloud_group: str
        :param grants_prod_azure_group:
        :type grants_prod_azure_group: str
        :param grants_prod_firecloud_group:
        :type grants_prod_firecloud_group: str
        :param grants_qa_firecloud_group:
        :type grants_qa_firecloud_group: str
        :param grants_sherlock_super_admin:
        :type grants_sherlock_super_admin: bool
        :param id:
        :type id: int
        :param name:
        :type name: str
        :param suspend_non_suitable_users: When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field
        :type suspend_non_suitable_users: bool
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many Roles are returned (default 0, no limit)
        :type limit: int
        :param offset: Control the offset for the returned Roles (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_get_serialize(
            auto_assign_all_users=auto_assign_all_users,
            can_be_glass_broken_by_role=can_be_glass_broken_by_role,
            created_at=created_at,
            default_glass_break_duration=default_glass_break_duration,
            grants_broad_institute_group=grants_broad_institute_group,
            grants_dev_azure_group=grants_dev_azure_group,
            grants_dev_firecloud_group=grants_dev_firecloud_group,
            grants_prod_azure_group=grants_prod_azure_group,
            grants_prod_firecloud_group=grants_prod_firecloud_group,
            grants_qa_firecloud_group=grants_qa_firecloud_group,
            grants_sherlock_super_admin=grants_sherlock_super_admin,
            id=id,
            name=name,
            suspend_non_suitable_users=suspend_non_suitable_users,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockRoleV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_roles_v3_get_without_preload_content(
        self,
        auto_assign_all_users: Annotated[Optional[StrictBool], Field(description="When true, Sherlock will automatically assign all users to this role who do not already have a role assignment")] = None,
        can_be_glass_broken_by_role: Optional[StrictInt] = None,
        created_at: Optional[datetime] = None,
        default_glass_break_duration: Optional[StrictStr] = None,
        grants_broad_institute_group: Optional[StrictStr] = None,
        grants_dev_azure_group: Optional[StrictStr] = None,
        grants_dev_firecloud_group: Optional[StrictStr] = None,
        grants_prod_azure_group: Optional[StrictStr] = None,
        grants_prod_firecloud_group: Optional[StrictStr] = None,
        grants_qa_firecloud_group: Optional[StrictStr] = None,
        grants_sherlock_super_admin: Optional[StrictBool] = None,
        id: Optional[StrictInt] = None,
        name: Optional[StrictStr] = None,
        suspend_non_suitable_users: Annotated[Optional[StrictBool], Field(description="When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field")] = None,
        updated_at: Optional[datetime] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Control how many Roles are returned (default 0, no limit)")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Control the offset for the returned Roles (default 0)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Roles matching a filter

        List Roles matching a filter.

        :param auto_assign_all_users: When true, Sherlock will automatically assign all users to this role who do not already have a role assignment
        :type auto_assign_all_users: bool
        :param can_be_glass_broken_by_role:
        :type can_be_glass_broken_by_role: int
        :param created_at:
        :type created_at: datetime
        :param default_glass_break_duration:
        :type default_glass_break_duration: str
        :param grants_broad_institute_group:
        :type grants_broad_institute_group: str
        :param grants_dev_azure_group:
        :type grants_dev_azure_group: str
        :param grants_dev_firecloud_group:
        :type grants_dev_firecloud_group: str
        :param grants_prod_azure_group:
        :type grants_prod_azure_group: str
        :param grants_prod_firecloud_group:
        :type grants_prod_firecloud_group: str
        :param grants_qa_firecloud_group:
        :type grants_qa_firecloud_group: str
        :param grants_sherlock_super_admin:
        :type grants_sherlock_super_admin: bool
        :param id:
        :type id: int
        :param name:
        :type name: str
        :param suspend_non_suitable_users: When true, the \"suspended\" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field
        :type suspend_non_suitable_users: bool
        :param updated_at:
        :type updated_at: datetime
        :param limit: Control how many Roles are returned (default 0, no limit)
        :type limit: int
        :param offset: Control the offset for the returned Roles (default 0)
        :type offset: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_get_serialize(
            auto_assign_all_users=auto_assign_all_users,
            can_be_glass_broken_by_role=can_be_glass_broken_by_role,
            created_at=created_at,
            default_glass_break_duration=default_glass_break_duration,
            grants_broad_institute_group=grants_broad_institute_group,
            grants_dev_azure_group=grants_dev_azure_group,
            grants_dev_firecloud_group=grants_dev_firecloud_group,
            grants_prod_azure_group=grants_prod_azure_group,
            grants_prod_firecloud_group=grants_prod_firecloud_group,
            grants_qa_firecloud_group=grants_qa_firecloud_group,
            grants_sherlock_super_admin=grants_sherlock_super_admin,
            id=id,
            name=name,
            suspend_non_suitable_users=suspend_non_suitable_users,
            updated_at=updated_at,
            limit=limit,
            offset=offset,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[SherlockRoleV3]",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_roles_v3_get_serialize(
        self,
        auto_assign_all_users,
        can_be_glass_broken_by_role,
        created_at,
        default_glass_break_duration,
        grants_broad_institute_group,
        grants_dev_azure_group,
        grants_dev_firecloud_group,
        grants_prod_azure_group,
        grants_prod_firecloud_group,
        grants_qa_firecloud_group,
        grants_sherlock_super_admin,
        id,
        name,
        suspend_non_suitable_users,
        updated_at,
        limit,
        offset,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if auto_assign_all_users is not None:
            
            _query_params.append(('autoAssignAllUsers', auto_assign_all_users))
            
        if can_be_glass_broken_by_role is not None:
            
            _query_params.append(('canBeGlassBrokenByRole', can_be_glass_broken_by_role))
            
        if created_at is not None:
            if isinstance(created_at, datetime):
                _query_params.append(
                    (
                        'createdAt',
                        created_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('createdAt', created_at))
            
        if default_glass_break_duration is not None:
            
            _query_params.append(('defaultGlassBreakDuration', default_glass_break_duration))
            
        if grants_broad_institute_group is not None:
            
            _query_params.append(('grantsBroadInstituteGroup', grants_broad_institute_group))
            
        if grants_dev_azure_group is not None:
            
            _query_params.append(('grantsDevAzureGroup', grants_dev_azure_group))
            
        if grants_dev_firecloud_group is not None:
            
            _query_params.append(('grantsDevFirecloudGroup', grants_dev_firecloud_group))
            
        if grants_prod_azure_group is not None:
            
            _query_params.append(('grantsProdAzureGroup', grants_prod_azure_group))
            
        if grants_prod_firecloud_group is not None:
            
            _query_params.append(('grantsProdFirecloudGroup', grants_prod_firecloud_group))
            
        if grants_qa_firecloud_group is not None:
            
            _query_params.append(('grantsQaFirecloudGroup', grants_qa_firecloud_group))
            
        if grants_sherlock_super_admin is not None:
            
            _query_params.append(('grantsSherlockSuperAdmin', grants_sherlock_super_admin))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if suspend_non_suitable_users is not None:
            
            _query_params.append(('suspendNonSuitableUsers', suspend_non_suitable_users))
            
        if updated_at is not None:
            if isinstance(updated_at, datetime):
                _query_params.append(
                    (
                        'updatedAt',
                        updated_at.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('updatedAt', updated_at))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/roles/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_roles_v3_post(
        self,
        role: Annotated[SherlockRoleV3Edit, Field(description="The initial fields the Role should have set")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockRoleV3:
        """Create a Role

        Create an individual Role with no one assigned to it. Only super-admins may mutate Roles. Propagation will be triggered after this operation.

        :param role: The initial fields the Role should have set (required)
        :type role: SherlockRoleV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_post_serialize(
            role=role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_roles_v3_post_with_http_info(
        self,
        role: Annotated[SherlockRoleV3Edit, Field(description="The initial fields the Role should have set")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockRoleV3]:
        """Create a Role

        Create an individual Role with no one assigned to it. Only super-admins may mutate Roles. Propagation will be triggered after this operation.

        :param role: The initial fields the Role should have set (required)
        :type role: SherlockRoleV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_post_serialize(
            role=role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_roles_v3_post_without_preload_content(
        self,
        role: Annotated[SherlockRoleV3Edit, Field(description="The initial fields the Role should have set")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a Role

        Create an individual Role with no one assigned to it. Only super-admins may mutate Roles. Propagation will be triggered after this operation.

        :param role: The initial fields the Role should have set (required)
        :type role: SherlockRoleV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_post_serialize(
            role=role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_roles_v3_post_serialize(
        self,
        role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if role is not None:
            _body_params = role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/roles/v3',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_roles_v3_selector_delete(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockRoleV3:
        """Delete a Role

        Delete an individual Role. Only super-admins may mutate Roles. Propagation will NOT be triggered after this operation -- the grants will become un-managed by Sherlock and left as-is. Remove role assignments first to remove users from grants.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_roles_v3_selector_delete_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockRoleV3]:
        """Delete a Role

        Delete an individual Role. Only super-admins may mutate Roles. Propagation will NOT be triggered after this operation -- the grants will become un-managed by Sherlock and left as-is. Remove role assignments first to remove users from grants.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_roles_v3_selector_delete_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a Role

        Delete an individual Role. Only super-admins may mutate Roles. Propagation will NOT be triggered after this operation -- the grants will become un-managed by Sherlock and left as-is. Remove role assignments first to remove users from grants.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_delete_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_roles_v3_selector_delete_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/roles/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_roles_v3_selector_get(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockRoleV3:
        """Get a Role

        Get an individual Role and the Users assigned to it.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_roles_v3_selector_get_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockRoleV3]:
        """Get a Role

        Get an individual Role and the Users assigned to it.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_roles_v3_selector_get_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get a Role

        Get an individual Role and the Users assigned to it.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_get_serialize(
            selector=selector,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_roles_v3_selector_get_serialize(
        self,
        selector,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/roles/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_roles_v3_selector_patch(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        role: Annotated[SherlockRoleV3Edit, Field(description="The edits to make to the Role")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SherlockRoleV3:
        """Edit a Role

        Edit an individual Role. Only super-admins may mutate Roles. Propagation will be triggered after this operation.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param role: The edits to make to the Role (required)
        :type role: SherlockRoleV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_patch_serialize(
            selector=selector,
            role=role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_roles_v3_selector_patch_with_http_info(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        role: Annotated[SherlockRoleV3Edit, Field(description="The edits to make to the Role")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SherlockRoleV3]:
        """Edit a Role

        Edit an individual Role. Only super-admins may mutate Roles. Propagation will be triggered after this operation.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param role: The edits to make to the Role (required)
        :type role: SherlockRoleV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_patch_serialize(
            selector=selector,
            role=role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_roles_v3_selector_patch_without_preload_content(
        self,
        selector: Annotated[StrictStr, Field(description="The selector of the Role, which can be either the numeric ID or the name")],
        role: Annotated[SherlockRoleV3Edit, Field(description="The edits to make to the Role")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Edit a Role

        Edit an individual Role. Only super-admins may mutate Roles. Propagation will be triggered after this operation.

        :param selector: The selector of the Role, which can be either the numeric ID or the name (required)
        :type selector: str
        :param role: The edits to make to the Role (required)
        :type role: SherlockRoleV3Edit
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_roles_v3_selector_patch_serialize(
            selector=selector,
            role=role,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SherlockRoleV3",
            '400': "ErrorsErrorResponse",
            '403': "ErrorsErrorResponse",
            '404': "ErrorsErrorResponse",
            '407': "ErrorsErrorResponse",
            '409': "ErrorsErrorResponse",
            '500': "ErrorsErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_roles_v3_selector_patch_serialize(
        self,
        selector,
        role,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if selector is not None:
            _path_params['selector'] = selector
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if role is not None:
            _body_params = role


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/roles/v3/{selector}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


