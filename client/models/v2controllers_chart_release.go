// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2controllersChartRelease v2controllers chart release
//
// swagger:model v2controllers.ChartRelease
type V2controllersChartRelease struct {

	// Required when creating
	Chart string `json:"chart,omitempty"`

	// chart info
	ChartInfo *V2controllersChart `json:"chartInfo,omitempty"`

	// When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
	Cluster string `json:"cluster,omitempty"`

	// cluster info
	ClusterInfo *V2controllersCluster `json:"clusterInfo,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// current app version exact
	CurrentAppVersionExact string `json:"currentAppVersionExact,omitempty"`

	// current chart version exact
	CurrentChartVersionExact string `json:"currentChartVersionExact,omitempty"`

	// Calculated field
	DestinationType string `json:"destinationType,omitempty"`

	// Either this or cluster must be provided.
	Environment string `json:"environment,omitempty"`

	// environment info
	EnvironmentInfo *V2controllersEnvironment `json:"environmentInfo,omitempty"`

	// helmfile ref
	HelmfileRef *string `json:"helmfileRef,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// When creating, will be calculated if left empty
	Name string `json:"name,omitempty"`

	// When creating, will default to the environment's default namespace, if provided
	Namespace string `json:"namespace,omitempty"`

	// When creating, will default to the app's main branch if it has one recorded
	TargetAppVersionBranch string `json:"targetAppVersionBranch,omitempty"`

	// target app version commit
	TargetAppVersionCommit string `json:"targetAppVersionCommit,omitempty"`

	// target app version exact
	TargetAppVersionExact string `json:"targetAppVersionExact,omitempty"`

	// When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
	// Enum: [branch commit exact]
	TargetAppVersionUse string `json:"targetAppVersionUse,omitempty"`

	// target chart version exact
	TargetChartVersionExact string `json:"targetChartVersionExact,omitempty"`

	// When creating, will default to latest unless an exact target chart version is provided
	// Enum: [latest exact]
	TargetChartVersionUse string `json:"targetChartVersionUse,omitempty"`

	// thelma mode
	ThelmaMode string `json:"thelmaMode,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this v2controllers chart release
func (m *V2controllersChartRelease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAppVersionUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetChartVersionUse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersChartRelease) validateChartInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartInfo) { // not required
		return nil
	}

	if m.ChartInfo != nil {
		if err := m.ChartInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChartRelease) validateClusterInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterInfo) { // not required
		return nil
	}

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChartRelease) validateEnvironmentInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvironmentInfo) { // not required
		return nil
	}

	if m.EnvironmentInfo != nil {
		if err := m.EnvironmentInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environmentInfo")
			}
			return err
		}
	}

	return nil
}

var v2controllersChartReleaseTypeTargetAppVersionUsePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["branch","commit","exact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2controllersChartReleaseTypeTargetAppVersionUsePropEnum = append(v2controllersChartReleaseTypeTargetAppVersionUsePropEnum, v)
	}
}

const (

	// V2controllersChartReleaseTargetAppVersionUseBranch captures enum value "branch"
	V2controllersChartReleaseTargetAppVersionUseBranch string = "branch"

	// V2controllersChartReleaseTargetAppVersionUseCommit captures enum value "commit"
	V2controllersChartReleaseTargetAppVersionUseCommit string = "commit"

	// V2controllersChartReleaseTargetAppVersionUseExact captures enum value "exact"
	V2controllersChartReleaseTargetAppVersionUseExact string = "exact"
)

// prop value enum
func (m *V2controllersChartRelease) validateTargetAppVersionUseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v2controllersChartReleaseTypeTargetAppVersionUsePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V2controllersChartRelease) validateTargetAppVersionUse(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetAppVersionUse) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetAppVersionUseEnum("targetAppVersionUse", "body", m.TargetAppVersionUse); err != nil {
		return err
	}

	return nil
}

var v2controllersChartReleaseTypeTargetChartVersionUsePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["latest","exact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2controllersChartReleaseTypeTargetChartVersionUsePropEnum = append(v2controllersChartReleaseTypeTargetChartVersionUsePropEnum, v)
	}
}

const (

	// V2controllersChartReleaseTargetChartVersionUseLatest captures enum value "latest"
	V2controllersChartReleaseTargetChartVersionUseLatest string = "latest"

	// V2controllersChartReleaseTargetChartVersionUseExact captures enum value "exact"
	V2controllersChartReleaseTargetChartVersionUseExact string = "exact"
)

// prop value enum
func (m *V2controllersChartRelease) validateTargetChartVersionUseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v2controllersChartReleaseTypeTargetChartVersionUsePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V2controllersChartRelease) validateTargetChartVersionUse(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetChartVersionUse) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetChartVersionUseEnum("targetChartVersionUse", "body", m.TargetChartVersionUse); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v2controllers chart release based on the context it is used
func (m *V2controllersChartRelease) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironmentInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersChartRelease) contextValidateChartInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ChartInfo != nil {
		if err := m.ChartInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChartRelease) contextValidateClusterInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterInfo != nil {
		if err := m.ClusterInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChartRelease) contextValidateEnvironmentInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvironmentInfo != nil {
		if err := m.EnvironmentInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environmentInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environmentInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersChartRelease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersChartRelease) UnmarshalBinary(b []byte) error {
	var res V2controllersChartRelease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
