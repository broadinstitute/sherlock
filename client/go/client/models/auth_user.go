// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthUser auth user
//
// swagger:model auth.User
type AuthUser struct {

	// authenticated email
	AuthenticatedEmail string `json:"authenticatedEmail,omitempty"`

	// matched extra permissions
	MatchedExtraPermissions *AuthExtraPermissions `json:"matchedExtraPermissions,omitempty"`

	// matched firecloud account
	MatchedFirecloudAccount *AuthFirecloudAccount `json:"matchedFirecloudAccount,omitempty"`
}

// Validate validates this auth user
func (m *AuthUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchedExtraPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedFirecloudAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthUser) validateMatchedExtraPermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchedExtraPermissions) { // not required
		return nil
	}

	if m.MatchedExtraPermissions != nil {
		if err := m.MatchedExtraPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedExtraPermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedExtraPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *AuthUser) validateMatchedFirecloudAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchedFirecloudAccount) { // not required
		return nil
	}

	if m.MatchedFirecloudAccount != nil {
		if err := m.MatchedFirecloudAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedFirecloudAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedFirecloudAccount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auth user based on the context it is used
func (m *AuthUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatchedExtraPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchedFirecloudAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthUser) contextValidateMatchedExtraPermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchedExtraPermissions != nil {
		if err := m.MatchedExtraPermissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedExtraPermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedExtraPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *AuthUser) contextValidateMatchedFirecloudAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchedFirecloudAccount != nil {
		if err := m.MatchedFirecloudAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedFirecloudAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedFirecloudAccount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthUser) UnmarshalBinary(b []byte) error {
	var res AuthUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
