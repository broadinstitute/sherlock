// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2controllersChartDeployRecord v2controllers chart deploy record
//
// swagger:model v2controllers.ChartDeployRecord
type V2controllersChartDeployRecord struct {

	// Required when creating
	ChartRelease string `json:"chartRelease,omitempty"`

	// chart release info
	ChartReleaseInfo *V2controllersChartRelease `json:"chartReleaseInfo,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// When creating, will default to the value currently held by the chart release
	ExactAppVersion string `json:"exactAppVersion,omitempty"`

	// When creating, will default to the value currently held by the chart release
	ExactChartVersion string `json:"exactChartVersion,omitempty"`

	// When creating, will default to the value currently held by the chart release
	HelmfileRef string `json:"helmfileRef,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this v2controllers chart deploy record
func (m *V2controllersChartDeployRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartReleaseInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersChartDeployRecord) validateChartReleaseInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartReleaseInfo) { // not required
		return nil
	}

	if m.ChartReleaseInfo != nil {
		if err := m.ChartReleaseInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartReleaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartReleaseInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2controllers chart deploy record based on the context it is used
func (m *V2controllersChartDeployRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartReleaseInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersChartDeployRecord) contextValidateChartReleaseInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ChartReleaseInfo != nil {
		if err := m.ChartReleaseInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartReleaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartReleaseInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersChartDeployRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersChartDeployRecord) UnmarshalBinary(b []byte) error {
	var res V2controllersChartDeployRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
