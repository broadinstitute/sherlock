// Code generated by go-swagger; DO NOT EDIT.

package chart_releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/client/models"
)

// PatchAPIV2ChartReleasesSelectorReader is a Reader for the PatchAPIV2ChartReleasesSelector structure.
type PatchAPIV2ChartReleasesSelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIV2ChartReleasesSelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIV2ChartReleasesSelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIV2ChartReleasesSelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIV2ChartReleasesSelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIV2ChartReleasesSelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIV2ChartReleasesSelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIV2ChartReleasesSelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIV2ChartReleasesSelectorOK creates a PatchAPIV2ChartReleasesSelectorOK with default headers values
func NewPatchAPIV2ChartReleasesSelectorOK() *PatchAPIV2ChartReleasesSelectorOK {
	return &PatchAPIV2ChartReleasesSelectorOK{}
}

/* PatchAPIV2ChartReleasesSelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIV2ChartReleasesSelectorOK struct {
	Payload *models.V2controllersChartRelease
}

func (o *PatchAPIV2ChartReleasesSelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorOK  %+v", 200, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorOK) GetPayload() *models.V2controllersChartRelease {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V2controllersChartRelease)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2ChartReleasesSelectorBadRequest creates a PatchAPIV2ChartReleasesSelectorBadRequest with default headers values
func NewPatchAPIV2ChartReleasesSelectorBadRequest() *PatchAPIV2ChartReleasesSelectorBadRequest {
	return &PatchAPIV2ChartReleasesSelectorBadRequest{}
}

/* PatchAPIV2ChartReleasesSelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIV2ChartReleasesSelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2ChartReleasesSelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2ChartReleasesSelectorForbidden creates a PatchAPIV2ChartReleasesSelectorForbidden with default headers values
func NewPatchAPIV2ChartReleasesSelectorForbidden() *PatchAPIV2ChartReleasesSelectorForbidden {
	return &PatchAPIV2ChartReleasesSelectorForbidden{}
}

/* PatchAPIV2ChartReleasesSelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIV2ChartReleasesSelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2ChartReleasesSelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorForbidden  %+v", 403, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2ChartReleasesSelectorNotFound creates a PatchAPIV2ChartReleasesSelectorNotFound with default headers values
func NewPatchAPIV2ChartReleasesSelectorNotFound() *PatchAPIV2ChartReleasesSelectorNotFound {
	return &PatchAPIV2ChartReleasesSelectorNotFound{}
}

/* PatchAPIV2ChartReleasesSelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIV2ChartReleasesSelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2ChartReleasesSelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorNotFound  %+v", 404, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired creates a PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired() *PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired {
	return &PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired{}
}

/* PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2ChartReleasesSelectorConflict creates a PatchAPIV2ChartReleasesSelectorConflict with default headers values
func NewPatchAPIV2ChartReleasesSelectorConflict() *PatchAPIV2ChartReleasesSelectorConflict {
	return &PatchAPIV2ChartReleasesSelectorConflict{}
}

/* PatchAPIV2ChartReleasesSelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIV2ChartReleasesSelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2ChartReleasesSelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorConflict  %+v", 409, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2ChartReleasesSelectorInternalServerError creates a PatchAPIV2ChartReleasesSelectorInternalServerError with default headers values
func NewPatchAPIV2ChartReleasesSelectorInternalServerError() *PatchAPIV2ChartReleasesSelectorInternalServerError {
	return &PatchAPIV2ChartReleasesSelectorInternalServerError{}
}

/* PatchAPIV2ChartReleasesSelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIV2ChartReleasesSelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2ChartReleasesSelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/chart-releases/{selector}][%d] patchApiV2ChartReleasesSelectorInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAPIV2ChartReleasesSelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2ChartReleasesSelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
