// Code generated by go-swagger; DO NOT EDIT.

package database_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2DatabaseInstancesParams creates a new GetAPIV2DatabaseInstancesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2DatabaseInstancesParams() *GetAPIV2DatabaseInstancesParams {
	return &GetAPIV2DatabaseInstancesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2DatabaseInstancesParamsWithTimeout creates a new GetAPIV2DatabaseInstancesParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2DatabaseInstancesParamsWithTimeout(timeout time.Duration) *GetAPIV2DatabaseInstancesParams {
	return &GetAPIV2DatabaseInstancesParams{
		timeout: timeout,
	}
}

// NewGetAPIV2DatabaseInstancesParamsWithContext creates a new GetAPIV2DatabaseInstancesParams object
// with the ability to set a context for a request.
func NewGetAPIV2DatabaseInstancesParamsWithContext(ctx context.Context) *GetAPIV2DatabaseInstancesParams {
	return &GetAPIV2DatabaseInstancesParams{
		Context: ctx,
	}
}

// NewGetAPIV2DatabaseInstancesParamsWithHTTPClient creates a new GetAPIV2DatabaseInstancesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2DatabaseInstancesParamsWithHTTPClient(client *http.Client) *GetAPIV2DatabaseInstancesParams {
	return &GetAPIV2DatabaseInstancesParams{
		HTTPClient: client,
	}
}

/* GetAPIV2DatabaseInstancesParams contains all the parameters to send to the API endpoint
   for the get API v2 database instances operation.

   Typically these are written to a http.Request.
*/
type GetAPIV2DatabaseInstancesParams struct {

	/* AzureManagedResourceGroup.

	   Required if platform is 'azure'
	*/
	AzureManagedResourceGroup *string

	/* AzureSubscription.

	   Required if platform is 'azure'
	*/
	AzureSubscription *string

	/* ChartRelease.

	   Required when creating
	*/
	ChartRelease *string

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	/* DefaultDatabase.

	   When creating, defaults to the chart name
	*/
	DefaultDatabase *string

	/* GoogleLocation.

	   Required if platform is 'google'
	*/
	GoogleLocation *string

	/* GoogleProject.

	   Required if platform is 'google'
	*/
	GoogleProject *string

	// ID.
	ID *int64

	/* InstanceName.

	   Required if platform is 'google' or 'azure'
	*/
	InstanceName *string

	/* Limit.

	   An optional limit to the number of entries returned
	*/
	Limit *int64

	/* Platform.

	   'google', 'azure', or default 'kubernetes'

	   Default: "kubernetes"
	*/
	Platform *string

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 database instances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2DatabaseInstancesParams) WithDefaults() *GetAPIV2DatabaseInstancesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 database instances params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2DatabaseInstancesParams) SetDefaults() {
	var (
		platformDefault = string("kubernetes")
	)

	val := GetAPIV2DatabaseInstancesParams{
		Platform: &platformDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithTimeout(timeout time.Duration) *GetAPIV2DatabaseInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithContext(ctx context.Context) *GetAPIV2DatabaseInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithHTTPClient(client *http.Client) *GetAPIV2DatabaseInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAzureManagedResourceGroup adds the azureManagedResourceGroup to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithAzureManagedResourceGroup(azureManagedResourceGroup *string) *GetAPIV2DatabaseInstancesParams {
	o.SetAzureManagedResourceGroup(azureManagedResourceGroup)
	return o
}

// SetAzureManagedResourceGroup adds the azureManagedResourceGroup to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetAzureManagedResourceGroup(azureManagedResourceGroup *string) {
	o.AzureManagedResourceGroup = azureManagedResourceGroup
}

// WithAzureSubscription adds the azureSubscription to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithAzureSubscription(azureSubscription *string) *GetAPIV2DatabaseInstancesParams {
	o.SetAzureSubscription(azureSubscription)
	return o
}

// SetAzureSubscription adds the azureSubscription to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetAzureSubscription(azureSubscription *string) {
	o.AzureSubscription = azureSubscription
}

// WithChartRelease adds the chartRelease to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithChartRelease(chartRelease *string) *GetAPIV2DatabaseInstancesParams {
	o.SetChartRelease(chartRelease)
	return o
}

// SetChartRelease adds the chartRelease to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetChartRelease(chartRelease *string) {
	o.ChartRelease = chartRelease
}

// WithCreatedAt adds the createdAt to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIV2DatabaseInstancesParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithDefaultDatabase adds the defaultDatabase to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithDefaultDatabase(defaultDatabase *string) *GetAPIV2DatabaseInstancesParams {
	o.SetDefaultDatabase(defaultDatabase)
	return o
}

// SetDefaultDatabase adds the defaultDatabase to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetDefaultDatabase(defaultDatabase *string) {
	o.DefaultDatabase = defaultDatabase
}

// WithGoogleLocation adds the googleLocation to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithGoogleLocation(googleLocation *string) *GetAPIV2DatabaseInstancesParams {
	o.SetGoogleLocation(googleLocation)
	return o
}

// SetGoogleLocation adds the googleLocation to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetGoogleLocation(googleLocation *string) {
	o.GoogleLocation = googleLocation
}

// WithGoogleProject adds the googleProject to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithGoogleProject(googleProject *string) *GetAPIV2DatabaseInstancesParams {
	o.SetGoogleProject(googleProject)
	return o
}

// SetGoogleProject adds the googleProject to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetGoogleProject(googleProject *string) {
	o.GoogleProject = googleProject
}

// WithID adds the id to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithID(id *int64) *GetAPIV2DatabaseInstancesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetID(id *int64) {
	o.ID = id
}

// WithInstanceName adds the instanceName to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithInstanceName(instanceName *string) *GetAPIV2DatabaseInstancesParams {
	o.SetInstanceName(instanceName)
	return o
}

// SetInstanceName adds the instanceName to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetInstanceName(instanceName *string) {
	o.InstanceName = instanceName
}

// WithLimit adds the limit to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithLimit(limit *int64) *GetAPIV2DatabaseInstancesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPlatform adds the platform to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithPlatform(platform *string) *GetAPIV2DatabaseInstancesParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithUpdatedAt adds the updatedAt to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIV2DatabaseInstancesParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API v2 database instances params
func (o *GetAPIV2DatabaseInstancesParams) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2DatabaseInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AzureManagedResourceGroup != nil {

		// query param azureManagedResourceGroup
		var qrAzureManagedResourceGroup string

		if o.AzureManagedResourceGroup != nil {
			qrAzureManagedResourceGroup = *o.AzureManagedResourceGroup
		}
		qAzureManagedResourceGroup := qrAzureManagedResourceGroup
		if qAzureManagedResourceGroup != "" {

			if err := r.SetQueryParam("azureManagedResourceGroup", qAzureManagedResourceGroup); err != nil {
				return err
			}
		}
	}

	if o.AzureSubscription != nil {

		// query param azureSubscription
		var qrAzureSubscription string

		if o.AzureSubscription != nil {
			qrAzureSubscription = *o.AzureSubscription
		}
		qAzureSubscription := qrAzureSubscription
		if qAzureSubscription != "" {

			if err := r.SetQueryParam("azureSubscription", qAzureSubscription); err != nil {
				return err
			}
		}
	}

	if o.ChartRelease != nil {

		// query param chartRelease
		var qrChartRelease string

		if o.ChartRelease != nil {
			qrChartRelease = *o.ChartRelease
		}
		qChartRelease := qrChartRelease
		if qChartRelease != "" {

			if err := r.SetQueryParam("chartRelease", qChartRelease); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.DefaultDatabase != nil {

		// query param defaultDatabase
		var qrDefaultDatabase string

		if o.DefaultDatabase != nil {
			qrDefaultDatabase = *o.DefaultDatabase
		}
		qDefaultDatabase := qrDefaultDatabase
		if qDefaultDatabase != "" {

			if err := r.SetQueryParam("defaultDatabase", qDefaultDatabase); err != nil {
				return err
			}
		}
	}

	if o.GoogleLocation != nil {

		// query param googleLocation
		var qrGoogleLocation string

		if o.GoogleLocation != nil {
			qrGoogleLocation = *o.GoogleLocation
		}
		qGoogleLocation := qrGoogleLocation
		if qGoogleLocation != "" {

			if err := r.SetQueryParam("googleLocation", qGoogleLocation); err != nil {
				return err
			}
		}
	}

	if o.GoogleProject != nil {

		// query param googleProject
		var qrGoogleProject string

		if o.GoogleProject != nil {
			qrGoogleProject = *o.GoogleProject
		}
		qGoogleProject := qrGoogleProject
		if qGoogleProject != "" {

			if err := r.SetQueryParam("googleProject", qGoogleProject); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.InstanceName != nil {

		// query param instanceName
		var qrInstanceName string

		if o.InstanceName != nil {
			qrInstanceName = *o.InstanceName
		}
		qInstanceName := qrInstanceName
		if qInstanceName != "" {

			if err := r.SetQueryParam("instanceName", qInstanceName); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string

		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {

			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
