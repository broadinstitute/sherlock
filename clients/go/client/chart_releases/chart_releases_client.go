// Code generated by go-swagger; DO NOT EDIT.

package chart_releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new chart releases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for chart releases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2ChartReleasesSelector(params *DeleteAPIV2ChartReleasesSelectorParams, opts ...ClientOption) (*DeleteAPIV2ChartReleasesSelectorOK, error)

	GetAPIV2ChartReleases(params *GetAPIV2ChartReleasesParams, opts ...ClientOption) (*GetAPIV2ChartReleasesOK, error)

	GetAPIV2ChartReleasesSelector(params *GetAPIV2ChartReleasesSelectorParams, opts ...ClientOption) (*GetAPIV2ChartReleasesSelectorOK, error)

	GetAPIV2SelectorsChartReleasesSelector(params *GetAPIV2SelectorsChartReleasesSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsChartReleasesSelectorOK, error)

	PatchAPIV2ChartReleasesSelector(params *PatchAPIV2ChartReleasesSelectorParams, opts ...ClientOption) (*PatchAPIV2ChartReleasesSelectorOK, error)

	PostAPIV2ChartReleases(params *PostAPIV2ChartReleasesParams, opts ...ClientOption) (*PostAPIV2ChartReleasesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIV2ChartReleasesSelector deletes a chart release entry

  Delete an existing ChartRelease entry via one of its "selectors": name, numeric ID, environment/chart, or cluster/namespace/chart.
*/
func (a *Client) DeleteAPIV2ChartReleasesSelector(params *DeleteAPIV2ChartReleasesSelectorParams, opts ...ClientOption) (*DeleteAPIV2ChartReleasesSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2ChartReleasesSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2ChartReleasesSelector",
		Method:             "DELETE",
		PathPattern:        "/api/v2/chart-releases/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV2ChartReleasesSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2ChartReleasesSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2ChartReleasesSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2ChartReleases lists chart release entries

  List existing ChartRelease entries, ordered by most recently updated.
*/
func (a *Client) GetAPIV2ChartReleases(params *GetAPIV2ChartReleasesParams, opts ...ClientOption) (*GetAPIV2ChartReleasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ChartReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2ChartReleases",
		Method:             "GET",
		PathPattern:        "/api/v2/chart-releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2ChartReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2ChartReleasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2ChartReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2ChartReleasesSelector gets a chart release entry

  Get an existing ChartRelease entry via one of its "selectors": name, numeric ID, environment/chart, or cluster/namespace/chart.
*/
func (a *Client) GetAPIV2ChartReleasesSelector(params *GetAPIV2ChartReleasesSelectorParams, opts ...ClientOption) (*GetAPIV2ChartReleasesSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ChartReleasesSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2ChartReleasesSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/chart-releases/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2ChartReleasesSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2ChartReleasesSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2ChartReleasesSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2SelectorsChartReleasesSelector lists chart release selectors

  Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
*/
func (a *Client) GetAPIV2SelectorsChartReleasesSelector(params *GetAPIV2SelectorsChartReleasesSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsChartReleasesSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SelectorsChartReleasesSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SelectorsChartReleasesSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/selectors/chart-releases/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2SelectorsChartReleasesSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SelectorsChartReleasesSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SelectorsChartReleasesSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIV2ChartReleasesSelector edits a chart release entry

  Edit an existing ChartRelease entry via one of its "selectors": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
*/
func (a *Client) PatchAPIV2ChartReleasesSelector(params *PatchAPIV2ChartReleasesSelectorParams, opts ...ClientOption) (*PatchAPIV2ChartReleasesSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2ChartReleasesSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2ChartReleasesSelector",
		Method:             "PATCH",
		PathPattern:        "/api/v2/chart-releases/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIV2ChartReleasesSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2ChartReleasesSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2ChartReleasesSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2ChartReleases creates a new chart release entry

  Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
*/
func (a *Client) PostAPIV2ChartReleases(params *PostAPIV2ChartReleasesParams, opts ...ClientOption) (*PostAPIV2ChartReleasesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2ChartReleasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2ChartReleases",
		Method:             "POST",
		PathPattern:        "/api/v2/chart-releases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2ChartReleasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2ChartReleasesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2ChartReleases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
