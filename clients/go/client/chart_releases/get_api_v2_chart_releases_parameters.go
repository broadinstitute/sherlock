// Code generated by go-swagger; DO NOT EDIT.

package chart_releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2ChartReleasesParams creates a new GetAPIV2ChartReleasesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2ChartReleasesParams() *GetAPIV2ChartReleasesParams {
	return &GetAPIV2ChartReleasesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2ChartReleasesParamsWithTimeout creates a new GetAPIV2ChartReleasesParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2ChartReleasesParamsWithTimeout(timeout time.Duration) *GetAPIV2ChartReleasesParams {
	return &GetAPIV2ChartReleasesParams{
		timeout: timeout,
	}
}

// NewGetAPIV2ChartReleasesParamsWithContext creates a new GetAPIV2ChartReleasesParams object
// with the ability to set a context for a request.
func NewGetAPIV2ChartReleasesParamsWithContext(ctx context.Context) *GetAPIV2ChartReleasesParams {
	return &GetAPIV2ChartReleasesParams{
		Context: ctx,
	}
}

// NewGetAPIV2ChartReleasesParamsWithHTTPClient creates a new GetAPIV2ChartReleasesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2ChartReleasesParamsWithHTTPClient(client *http.Client) *GetAPIV2ChartReleasesParams {
	return &GetAPIV2ChartReleasesParams{
		HTTPClient: client,
	}
}

/*
GetAPIV2ChartReleasesParams contains all the parameters to send to the API endpoint

	for the get API v2 chart releases operation.

	Typically these are written to a http.Request.
*/
type GetAPIV2ChartReleasesParams struct {

	/* AppVersionBranch.

	   When creating, will default to the app's mainline branch if no other app version info is present
	*/
	AppVersionBranch *string

	// AppVersionCommit.
	AppVersionCommit *string

	// AppVersionExact.
	AppVersionExact *string

	// AppVersionFollowChartRelease.
	AppVersionFollowChartRelease *string

	// AppVersionReference.
	AppVersionReference *string

	/* AppVersionResolver.

	   // When creating, will default to automatically reference any provided app version fields
	*/
	AppVersionResolver *string

	/* Chart.

	   Required when creating
	*/
	Chart *string

	// ChartVersionExact.
	ChartVersionExact *string

	// ChartVersionFollowChartRelease.
	ChartVersionFollowChartRelease *string

	// ChartVersionReference.
	ChartVersionReference *string

	/* ChartVersionResolver.

	   When creating, will default to automatically reference any provided chart version
	*/
	ChartVersionResolver *string

	/* Cluster.

	   When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
	*/
	Cluster *string

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	/* DestinationType.

	   Calculated field
	*/
	DestinationType *string

	/* Environment.

	   Either this or cluster must be provided.
	*/
	Environment *string

	// FirecloudDevelopRef.
	FirecloudDevelopRef *string

	// HelmfileRef.
	//
	// Default: "HEAD"
	HelmfileRef *string

	// ID.
	ID *int64

	/* Limit.

	   An optional limit to the number of entries returned
	*/
	Limit *int64

	/* Name.

	   When creating, will be calculated if left empty
	*/
	Name *string

	/* Namespace.

	   When creating, will default to the environment's default namespace, if provided
	*/
	Namespace *string

	/* Port.

	   When creating, will use the chart's default if left empty
	*/
	Port *int64

	/* Protocol.

	   When creating, will use the chart's default if left empty
	*/
	Protocol *string

	/* Subdomain.

	   When creating, will use the chart's default if left empty
	*/
	Subdomain *string

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 chart releases params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ChartReleasesParams) WithDefaults() *GetAPIV2ChartReleasesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 chart releases params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ChartReleasesParams) SetDefaults() {
	var (
		helmfileRefDefault = string("HEAD")
	)

	val := GetAPIV2ChartReleasesParams{
		HelmfileRef: &helmfileRefDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithTimeout(timeout time.Duration) *GetAPIV2ChartReleasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithContext(ctx context.Context) *GetAPIV2ChartReleasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithHTTPClient(client *http.Client) *GetAPIV2ChartReleasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppVersionBranch adds the appVersionBranch to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithAppVersionBranch(appVersionBranch *string) *GetAPIV2ChartReleasesParams {
	o.SetAppVersionBranch(appVersionBranch)
	return o
}

// SetAppVersionBranch adds the appVersionBranch to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetAppVersionBranch(appVersionBranch *string) {
	o.AppVersionBranch = appVersionBranch
}

// WithAppVersionCommit adds the appVersionCommit to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithAppVersionCommit(appVersionCommit *string) *GetAPIV2ChartReleasesParams {
	o.SetAppVersionCommit(appVersionCommit)
	return o
}

// SetAppVersionCommit adds the appVersionCommit to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetAppVersionCommit(appVersionCommit *string) {
	o.AppVersionCommit = appVersionCommit
}

// WithAppVersionExact adds the appVersionExact to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithAppVersionExact(appVersionExact *string) *GetAPIV2ChartReleasesParams {
	o.SetAppVersionExact(appVersionExact)
	return o
}

// SetAppVersionExact adds the appVersionExact to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetAppVersionExact(appVersionExact *string) {
	o.AppVersionExact = appVersionExact
}

// WithAppVersionFollowChartRelease adds the appVersionFollowChartRelease to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithAppVersionFollowChartRelease(appVersionFollowChartRelease *string) *GetAPIV2ChartReleasesParams {
	o.SetAppVersionFollowChartRelease(appVersionFollowChartRelease)
	return o
}

// SetAppVersionFollowChartRelease adds the appVersionFollowChartRelease to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetAppVersionFollowChartRelease(appVersionFollowChartRelease *string) {
	o.AppVersionFollowChartRelease = appVersionFollowChartRelease
}

// WithAppVersionReference adds the appVersionReference to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithAppVersionReference(appVersionReference *string) *GetAPIV2ChartReleasesParams {
	o.SetAppVersionReference(appVersionReference)
	return o
}

// SetAppVersionReference adds the appVersionReference to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetAppVersionReference(appVersionReference *string) {
	o.AppVersionReference = appVersionReference
}

// WithAppVersionResolver adds the appVersionResolver to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithAppVersionResolver(appVersionResolver *string) *GetAPIV2ChartReleasesParams {
	o.SetAppVersionResolver(appVersionResolver)
	return o
}

// SetAppVersionResolver adds the appVersionResolver to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetAppVersionResolver(appVersionResolver *string) {
	o.AppVersionResolver = appVersionResolver
}

// WithChart adds the chart to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithChart(chart *string) *GetAPIV2ChartReleasesParams {
	o.SetChart(chart)
	return o
}

// SetChart adds the chart to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetChart(chart *string) {
	o.Chart = chart
}

// WithChartVersionExact adds the chartVersionExact to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithChartVersionExact(chartVersionExact *string) *GetAPIV2ChartReleasesParams {
	o.SetChartVersionExact(chartVersionExact)
	return o
}

// SetChartVersionExact adds the chartVersionExact to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetChartVersionExact(chartVersionExact *string) {
	o.ChartVersionExact = chartVersionExact
}

// WithChartVersionFollowChartRelease adds the chartVersionFollowChartRelease to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithChartVersionFollowChartRelease(chartVersionFollowChartRelease *string) *GetAPIV2ChartReleasesParams {
	o.SetChartVersionFollowChartRelease(chartVersionFollowChartRelease)
	return o
}

// SetChartVersionFollowChartRelease adds the chartVersionFollowChartRelease to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetChartVersionFollowChartRelease(chartVersionFollowChartRelease *string) {
	o.ChartVersionFollowChartRelease = chartVersionFollowChartRelease
}

// WithChartVersionReference adds the chartVersionReference to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithChartVersionReference(chartVersionReference *string) *GetAPIV2ChartReleasesParams {
	o.SetChartVersionReference(chartVersionReference)
	return o
}

// SetChartVersionReference adds the chartVersionReference to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetChartVersionReference(chartVersionReference *string) {
	o.ChartVersionReference = chartVersionReference
}

// WithChartVersionResolver adds the chartVersionResolver to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithChartVersionResolver(chartVersionResolver *string) *GetAPIV2ChartReleasesParams {
	o.SetChartVersionResolver(chartVersionResolver)
	return o
}

// SetChartVersionResolver adds the chartVersionResolver to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetChartVersionResolver(chartVersionResolver *string) {
	o.ChartVersionResolver = chartVersionResolver
}

// WithCluster adds the cluster to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithCluster(cluster *string) *GetAPIV2ChartReleasesParams {
	o.SetCluster(cluster)
	return o
}

// SetCluster adds the cluster to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetCluster(cluster *string) {
	o.Cluster = cluster
}

// WithCreatedAt adds the createdAt to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIV2ChartReleasesParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithDestinationType adds the destinationType to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithDestinationType(destinationType *string) *GetAPIV2ChartReleasesParams {
	o.SetDestinationType(destinationType)
	return o
}

// SetDestinationType adds the destinationType to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetDestinationType(destinationType *string) {
	o.DestinationType = destinationType
}

// WithEnvironment adds the environment to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithEnvironment(environment *string) *GetAPIV2ChartReleasesParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithFirecloudDevelopRef adds the firecloudDevelopRef to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithFirecloudDevelopRef(firecloudDevelopRef *string) *GetAPIV2ChartReleasesParams {
	o.SetFirecloudDevelopRef(firecloudDevelopRef)
	return o
}

// SetFirecloudDevelopRef adds the firecloudDevelopRef to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetFirecloudDevelopRef(firecloudDevelopRef *string) {
	o.FirecloudDevelopRef = firecloudDevelopRef
}

// WithHelmfileRef adds the helmfileRef to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithHelmfileRef(helmfileRef *string) *GetAPIV2ChartReleasesParams {
	o.SetHelmfileRef(helmfileRef)
	return o
}

// SetHelmfileRef adds the helmfileRef to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetHelmfileRef(helmfileRef *string) {
	o.HelmfileRef = helmfileRef
}

// WithID adds the id to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithID(id *int64) *GetAPIV2ChartReleasesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithLimit(limit *int64) *GetAPIV2ChartReleasesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithName(name *string) *GetAPIV2ChartReleasesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetName(name *string) {
	o.Name = name
}

// WithNamespace adds the namespace to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithNamespace(namespace *string) *GetAPIV2ChartReleasesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithPort adds the port to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithPort(port *int64) *GetAPIV2ChartReleasesParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetPort(port *int64) {
	o.Port = port
}

// WithProtocol adds the protocol to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithProtocol(protocol *string) *GetAPIV2ChartReleasesParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithSubdomain adds the subdomain to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithSubdomain(subdomain *string) *GetAPIV2ChartReleasesParams {
	o.SetSubdomain(subdomain)
	return o
}

// SetSubdomain adds the subdomain to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetSubdomain(subdomain *string) {
	o.Subdomain = subdomain
}

// WithUpdatedAt adds the updatedAt to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIV2ChartReleasesParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API v2 chart releases params
func (o *GetAPIV2ChartReleasesParams) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2ChartReleasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppVersionBranch != nil {

		// query param appVersionBranch
		var qrAppVersionBranch string

		if o.AppVersionBranch != nil {
			qrAppVersionBranch = *o.AppVersionBranch
		}
		qAppVersionBranch := qrAppVersionBranch
		if qAppVersionBranch != "" {

			if err := r.SetQueryParam("appVersionBranch", qAppVersionBranch); err != nil {
				return err
			}
		}
	}

	if o.AppVersionCommit != nil {

		// query param appVersionCommit
		var qrAppVersionCommit string

		if o.AppVersionCommit != nil {
			qrAppVersionCommit = *o.AppVersionCommit
		}
		qAppVersionCommit := qrAppVersionCommit
		if qAppVersionCommit != "" {

			if err := r.SetQueryParam("appVersionCommit", qAppVersionCommit); err != nil {
				return err
			}
		}
	}

	if o.AppVersionExact != nil {

		// query param appVersionExact
		var qrAppVersionExact string

		if o.AppVersionExact != nil {
			qrAppVersionExact = *o.AppVersionExact
		}
		qAppVersionExact := qrAppVersionExact
		if qAppVersionExact != "" {

			if err := r.SetQueryParam("appVersionExact", qAppVersionExact); err != nil {
				return err
			}
		}
	}

	if o.AppVersionFollowChartRelease != nil {

		// query param appVersionFollowChartRelease
		var qrAppVersionFollowChartRelease string

		if o.AppVersionFollowChartRelease != nil {
			qrAppVersionFollowChartRelease = *o.AppVersionFollowChartRelease
		}
		qAppVersionFollowChartRelease := qrAppVersionFollowChartRelease
		if qAppVersionFollowChartRelease != "" {

			if err := r.SetQueryParam("appVersionFollowChartRelease", qAppVersionFollowChartRelease); err != nil {
				return err
			}
		}
	}

	if o.AppVersionReference != nil {

		// query param appVersionReference
		var qrAppVersionReference string

		if o.AppVersionReference != nil {
			qrAppVersionReference = *o.AppVersionReference
		}
		qAppVersionReference := qrAppVersionReference
		if qAppVersionReference != "" {

			if err := r.SetQueryParam("appVersionReference", qAppVersionReference); err != nil {
				return err
			}
		}
	}

	if o.AppVersionResolver != nil {

		// query param appVersionResolver
		var qrAppVersionResolver string

		if o.AppVersionResolver != nil {
			qrAppVersionResolver = *o.AppVersionResolver
		}
		qAppVersionResolver := qrAppVersionResolver
		if qAppVersionResolver != "" {

			if err := r.SetQueryParam("appVersionResolver", qAppVersionResolver); err != nil {
				return err
			}
		}
	}

	if o.Chart != nil {

		// query param chart
		var qrChart string

		if o.Chart != nil {
			qrChart = *o.Chart
		}
		qChart := qrChart
		if qChart != "" {

			if err := r.SetQueryParam("chart", qChart); err != nil {
				return err
			}
		}
	}

	if o.ChartVersionExact != nil {

		// query param chartVersionExact
		var qrChartVersionExact string

		if o.ChartVersionExact != nil {
			qrChartVersionExact = *o.ChartVersionExact
		}
		qChartVersionExact := qrChartVersionExact
		if qChartVersionExact != "" {

			if err := r.SetQueryParam("chartVersionExact", qChartVersionExact); err != nil {
				return err
			}
		}
	}

	if o.ChartVersionFollowChartRelease != nil {

		// query param chartVersionFollowChartRelease
		var qrChartVersionFollowChartRelease string

		if o.ChartVersionFollowChartRelease != nil {
			qrChartVersionFollowChartRelease = *o.ChartVersionFollowChartRelease
		}
		qChartVersionFollowChartRelease := qrChartVersionFollowChartRelease
		if qChartVersionFollowChartRelease != "" {

			if err := r.SetQueryParam("chartVersionFollowChartRelease", qChartVersionFollowChartRelease); err != nil {
				return err
			}
		}
	}

	if o.ChartVersionReference != nil {

		// query param chartVersionReference
		var qrChartVersionReference string

		if o.ChartVersionReference != nil {
			qrChartVersionReference = *o.ChartVersionReference
		}
		qChartVersionReference := qrChartVersionReference
		if qChartVersionReference != "" {

			if err := r.SetQueryParam("chartVersionReference", qChartVersionReference); err != nil {
				return err
			}
		}
	}

	if o.ChartVersionResolver != nil {

		// query param chartVersionResolver
		var qrChartVersionResolver string

		if o.ChartVersionResolver != nil {
			qrChartVersionResolver = *o.ChartVersionResolver
		}
		qChartVersionResolver := qrChartVersionResolver
		if qChartVersionResolver != "" {

			if err := r.SetQueryParam("chartVersionResolver", qChartVersionResolver); err != nil {
				return err
			}
		}
	}

	if o.Cluster != nil {

		// query param cluster
		var qrCluster string

		if o.Cluster != nil {
			qrCluster = *o.Cluster
		}
		qCluster := qrCluster
		if qCluster != "" {

			if err := r.SetQueryParam("cluster", qCluster); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.DestinationType != nil {

		// query param destinationType
		var qrDestinationType string

		if o.DestinationType != nil {
			qrDestinationType = *o.DestinationType
		}
		qDestinationType := qrDestinationType
		if qDestinationType != "" {

			if err := r.SetQueryParam("destinationType", qDestinationType); err != nil {
				return err
			}
		}
	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string

		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {

			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}
	}

	if o.FirecloudDevelopRef != nil {

		// query param firecloudDevelopRef
		var qrFirecloudDevelopRef string

		if o.FirecloudDevelopRef != nil {
			qrFirecloudDevelopRef = *o.FirecloudDevelopRef
		}
		qFirecloudDevelopRef := qrFirecloudDevelopRef
		if qFirecloudDevelopRef != "" {

			if err := r.SetQueryParam("firecloudDevelopRef", qFirecloudDevelopRef); err != nil {
				return err
			}
		}
	}

	if o.HelmfileRef != nil {

		// query param helmfileRef
		var qrHelmfileRef string

		if o.HelmfileRef != nil {
			qrHelmfileRef = *o.HelmfileRef
		}
		qHelmfileRef := qrHelmfileRef
		if qHelmfileRef != "" {

			if err := r.SetQueryParam("helmfileRef", qHelmfileRef); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string

		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {

			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}
	}

	if o.Port != nil {

		// query param port
		var qrPort int64

		if o.Port != nil {
			qrPort = *o.Port
		}
		qPort := swag.FormatInt64(qrPort)
		if qPort != "" {

			if err := r.SetQueryParam("port", qPort); err != nil {
				return err
			}
		}
	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string

		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {

			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}
	}

	if o.Subdomain != nil {

		// query param subdomain
		var qrSubdomain string

		if o.Subdomain != nil {
			qrSubdomain = *o.Subdomain
		}
		qSubdomain := qrSubdomain
		if qSubdomain != "" {

			if err := r.SetQueryParam("subdomain", qSubdomain); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
