// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/clients/go/client/models"
)

// PatchAPIV2EnvironmentsSelectorReader is a Reader for the PatchAPIV2EnvironmentsSelector structure.
type PatchAPIV2EnvironmentsSelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIV2EnvironmentsSelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIV2EnvironmentsSelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIV2EnvironmentsSelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIV2EnvironmentsSelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIV2EnvironmentsSelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIV2EnvironmentsSelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIV2EnvironmentsSelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIV2EnvironmentsSelectorOK creates a PatchAPIV2EnvironmentsSelectorOK with default headers values
func NewPatchAPIV2EnvironmentsSelectorOK() *PatchAPIV2EnvironmentsSelectorOK {
	return &PatchAPIV2EnvironmentsSelectorOK{}
}

/*
PatchAPIV2EnvironmentsSelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIV2EnvironmentsSelectorOK struct {
	Payload *models.V2controllersEnvironment
}

// IsSuccess returns true when this patch Api v2 environments selector o k response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch Api v2 environments selector o k response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector o k response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch Api v2 environments selector o k response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Api v2 environments selector o k response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchAPIV2EnvironmentsSelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorOK  %+v", 200, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorOK) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorOK  %+v", 200, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorOK) GetPayload() *models.V2controllersEnvironment {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V2controllersEnvironment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2EnvironmentsSelectorBadRequest creates a PatchAPIV2EnvironmentsSelectorBadRequest with default headers values
func NewPatchAPIV2EnvironmentsSelectorBadRequest() *PatchAPIV2EnvironmentsSelectorBadRequest {
	return &PatchAPIV2EnvironmentsSelectorBadRequest{}
}

/*
PatchAPIV2EnvironmentsSelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIV2EnvironmentsSelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

// IsSuccess returns true when this patch Api v2 environments selector bad request response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Api v2 environments selector bad request response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector bad request response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Api v2 environments selector bad request response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Api v2 environments selector bad request response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchAPIV2EnvironmentsSelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorBadRequest) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorBadRequest  %+v", 400, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2EnvironmentsSelectorForbidden creates a PatchAPIV2EnvironmentsSelectorForbidden with default headers values
func NewPatchAPIV2EnvironmentsSelectorForbidden() *PatchAPIV2EnvironmentsSelectorForbidden {
	return &PatchAPIV2EnvironmentsSelectorForbidden{}
}

/*
PatchAPIV2EnvironmentsSelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIV2EnvironmentsSelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

// IsSuccess returns true when this patch Api v2 environments selector forbidden response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Api v2 environments selector forbidden response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector forbidden response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Api v2 environments selector forbidden response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Api v2 environments selector forbidden response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchAPIV2EnvironmentsSelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorForbidden  %+v", 403, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorForbidden) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorForbidden  %+v", 403, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2EnvironmentsSelectorNotFound creates a PatchAPIV2EnvironmentsSelectorNotFound with default headers values
func NewPatchAPIV2EnvironmentsSelectorNotFound() *PatchAPIV2EnvironmentsSelectorNotFound {
	return &PatchAPIV2EnvironmentsSelectorNotFound{}
}

/*
PatchAPIV2EnvironmentsSelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIV2EnvironmentsSelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

// IsSuccess returns true when this patch Api v2 environments selector not found response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Api v2 environments selector not found response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector not found response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Api v2 environments selector not found response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Api v2 environments selector not found response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PatchAPIV2EnvironmentsSelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorNotFound  %+v", 404, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorNotFound) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorNotFound  %+v", 404, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired creates a PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired() *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired {
	return &PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired{}
}

/*
PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

// IsSuccess returns true when this patch Api v2 environments selector proxy authentication required response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Api v2 environments selector proxy authentication required response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector proxy authentication required response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Api v2 environments selector proxy authentication required response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Api v2 environments selector proxy authentication required response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) IsCode(code int) bool {
	return code == 407
}

func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2EnvironmentsSelectorConflict creates a PatchAPIV2EnvironmentsSelectorConflict with default headers values
func NewPatchAPIV2EnvironmentsSelectorConflict() *PatchAPIV2EnvironmentsSelectorConflict {
	return &PatchAPIV2EnvironmentsSelectorConflict{}
}

/*
PatchAPIV2EnvironmentsSelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIV2EnvironmentsSelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

// IsSuccess returns true when this patch Api v2 environments selector conflict response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Api v2 environments selector conflict response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector conflict response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch Api v2 environments selector conflict response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch Api v2 environments selector conflict response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorConflict) IsCode(code int) bool {
	return code == 409
}

func (o *PatchAPIV2EnvironmentsSelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorConflict  %+v", 409, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorConflict) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorConflict  %+v", 409, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2EnvironmentsSelectorInternalServerError creates a PatchAPIV2EnvironmentsSelectorInternalServerError with default headers values
func NewPatchAPIV2EnvironmentsSelectorInternalServerError() *PatchAPIV2EnvironmentsSelectorInternalServerError {
	return &PatchAPIV2EnvironmentsSelectorInternalServerError{}
}

/*
PatchAPIV2EnvironmentsSelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIV2EnvironmentsSelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

// IsSuccess returns true when this patch Api v2 environments selector internal server error response has a 2xx status code
func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch Api v2 environments selector internal server error response has a 3xx status code
func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch Api v2 environments selector internal server error response has a 4xx status code
func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch Api v2 environments selector internal server error response has a 5xx status code
func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch Api v2 environments selector internal server error response a status code equal to that given
func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /api/v2/environments/{selector}][%d] patchApiV2EnvironmentsSelectorInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2EnvironmentsSelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
