// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new environments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for environments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2EnvironmentsSelector(params *DeleteAPIV2EnvironmentsSelectorParams, opts ...ClientOption) (*DeleteAPIV2EnvironmentsSelectorOK, error)

	GetAPIV2Environments(params *GetAPIV2EnvironmentsParams, opts ...ClientOption) (*GetAPIV2EnvironmentsOK, error)

	GetAPIV2EnvironmentsSelector(params *GetAPIV2EnvironmentsSelectorParams, opts ...ClientOption) (*GetAPIV2EnvironmentsSelectorOK, error)

	GetAPIV2SelectorsEnvironmentsSelector(params *GetAPIV2SelectorsEnvironmentsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsEnvironmentsSelectorOK, error)

	PatchAPIV2EnvironmentsSelector(params *PatchAPIV2EnvironmentsSelectorParams, opts ...ClientOption) (*PatchAPIV2EnvironmentsSelectorOK, error)

	PostAPIV2Environments(params *PostAPIV2EnvironmentsParams, opts ...ClientOption) (*PostAPIV2EnvironmentsCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIV2EnvironmentsSelector deletes a environment entry

  Delete an existing Environment entry via one of its "selectors": name or numeric ID.
*/
func (a *Client) DeleteAPIV2EnvironmentsSelector(params *DeleteAPIV2EnvironmentsSelectorParams, opts ...ClientOption) (*DeleteAPIV2EnvironmentsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2EnvironmentsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2EnvironmentsSelector",
		Method:             "DELETE",
		PathPattern:        "/api/v2/environments/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV2EnvironmentsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2EnvironmentsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2EnvironmentsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2Environments lists environment entries

  List existing Environment entries, ordered by most recently updated.
*/
func (a *Client) GetAPIV2Environments(params *GetAPIV2EnvironmentsParams, opts ...ClientOption) (*GetAPIV2EnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2EnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Environments",
		Method:             "GET",
		PathPattern:        "/api/v2/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2EnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2EnvironmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Environments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2EnvironmentsSelector gets a environment entry

  Get an existing Environment entry via one of its "selectors": name or numeric ID.
*/
func (a *Client) GetAPIV2EnvironmentsSelector(params *GetAPIV2EnvironmentsSelectorParams, opts ...ClientOption) (*GetAPIV2EnvironmentsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2EnvironmentsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2EnvironmentsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/environments/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2EnvironmentsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2EnvironmentsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2EnvironmentsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2SelectorsEnvironmentsSelector lists environment selectors

  Validate a given Environment selector and provide any other selectors that would match the same Environment.
*/
func (a *Client) GetAPIV2SelectorsEnvironmentsSelector(params *GetAPIV2SelectorsEnvironmentsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsEnvironmentsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SelectorsEnvironmentsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SelectorsEnvironmentsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/selectors/environments/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2SelectorsEnvironmentsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SelectorsEnvironmentsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SelectorsEnvironmentsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIV2EnvironmentsSelector edits a environment entry

  Edit an existing Environment entry via one of its "selectors": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
*/
func (a *Client) PatchAPIV2EnvironmentsSelector(params *PatchAPIV2EnvironmentsSelectorParams, opts ...ClientOption) (*PatchAPIV2EnvironmentsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2EnvironmentsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2EnvironmentsSelector",
		Method:             "PATCH",
		PathPattern:        "/api/v2/environments/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIV2EnvironmentsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2EnvironmentsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2EnvironmentsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2Environments creates a new environment entry

  Create a new Environment entry. Note that some fields are immutable after creation; /edit lists mutable fields.
Creating a dynamic environment based on a template will also copy ChartReleases from the template.
*/
func (a *Client) PostAPIV2Environments(params *PostAPIV2EnvironmentsParams, opts ...ClientOption) (*PostAPIV2EnvironmentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2EnvironmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Environments",
		Method:             "POST",
		PathPattern:        "/api/v2/environments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2EnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2EnvironmentsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Environments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
