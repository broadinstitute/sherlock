// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthModelsUser auth models user
//
// swagger:model auth_models.User
type AuthModelsUser struct {

	// auth method
	AuthMethod AuthModelsAuthMethod `json:"authMethod,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// github ID
	GithubID string `json:"githubID,omitempty"`

	// github username
	GithubUsername string `json:"githubUsername,omitempty"`

	// google ID
	GoogleID string `json:"googleID,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// matched extra permissions
	MatchedExtraPermissions *AuthModelsExtraPermissions `json:"matchedExtraPermissions,omitempty"`

	// matched firecloud account
	MatchedFirecloudAccount *AuthModelsFirecloudAccount `json:"matchedFirecloudAccount,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// via
	Via *AuthModelsUser `json:"via,omitempty"`
}

// Validate validates this auth models user
func (m *AuthModelsUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedExtraPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedFirecloudAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVia(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthModelsUser) validateAuthMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthMethod) { // not required
		return nil
	}

	if err := m.AuthMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authMethod")
		}
		return err
	}

	return nil
}

func (m *AuthModelsUser) validateMatchedExtraPermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchedExtraPermissions) { // not required
		return nil
	}

	if m.MatchedExtraPermissions != nil {
		if err := m.MatchedExtraPermissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedExtraPermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedExtraPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *AuthModelsUser) validateMatchedFirecloudAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchedFirecloudAccount) { // not required
		return nil
	}

	if m.MatchedFirecloudAccount != nil {
		if err := m.MatchedFirecloudAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedFirecloudAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedFirecloudAccount")
			}
			return err
		}
	}

	return nil
}

func (m *AuthModelsUser) validateVia(formats strfmt.Registry) error {
	if swag.IsZero(m.Via) { // not required
		return nil
	}

	if m.Via != nil {
		if err := m.Via.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("via")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("via")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auth models user based on the context it is used
func (m *AuthModelsUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchedExtraPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchedFirecloudAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVia(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthModelsUser) contextValidateAuthMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AuthMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("authMethod")
		}
		return err
	}

	return nil
}

func (m *AuthModelsUser) contextValidateMatchedExtraPermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchedExtraPermissions != nil {
		if err := m.MatchedExtraPermissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedExtraPermissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedExtraPermissions")
			}
			return err
		}
	}

	return nil
}

func (m *AuthModelsUser) contextValidateMatchedFirecloudAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.MatchedFirecloudAccount != nil {
		if err := m.MatchedFirecloudAccount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("matchedFirecloudAccount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("matchedFirecloudAccount")
			}
			return err
		}
	}

	return nil
}

func (m *AuthModelsUser) contextValidateVia(ctx context.Context, formats strfmt.Registry) error {

	if m.Via != nil {
		if err := m.Via.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("via")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("via")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthModelsUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthModelsUser) UnmarshalBinary(b []byte) error {
	var res AuthModelsUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
