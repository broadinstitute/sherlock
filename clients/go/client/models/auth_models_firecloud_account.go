// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuthModelsFirecloudAccount auth models firecloud account
//
// swagger:model auth_models.FirecloudAccount
type AuthModelsFirecloudAccount struct {

	// accepted google terms
	AcceptedGoogleTerms bool `json:"acceptedGoogleTerms,omitempty"`

	// archived
	Archived bool `json:"archived,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// enrolled in2 fa
	EnrolledIn2Fa bool `json:"enrolledIn2Fa,omitempty"`

	// groups
	Groups *AuthModelsFirecloudGroupMembership `json:"groups,omitempty"`

	// suspended
	Suspended bool `json:"suspended,omitempty"`

	// suspension reason
	SuspensionReason string `json:"suspensionReason,omitempty"`
}

// Validate validates this auth models firecloud account
func (m *AuthModelsFirecloudAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthModelsFirecloudAccount) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	if m.Groups != nil {
		if err := m.Groups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this auth models firecloud account based on the context it is used
func (m *AuthModelsFirecloudAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthModelsFirecloudAccount) contextValidateGroups(ctx context.Context, formats strfmt.Registry) error {

	if m.Groups != nil {
		if err := m.Groups.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("groups")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("groups")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthModelsFirecloudAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthModelsFirecloudAccount) UnmarshalBinary(b []byte) error {
	var res AuthModelsFirecloudAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
