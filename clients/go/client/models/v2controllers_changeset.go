// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2controllersChangeset v2controllers changeset
//
// swagger:model v2controllers.Changeset
type V2controllersChangeset struct {

	// applied at
	// Format: date-time
	AppliedAt strfmt.DateTime `json:"appliedAt,omitempty"`

	// chart release
	ChartRelease string `json:"chartRelease,omitempty"`

	// chart release info
	ChartReleaseInfo *V2controllersChartRelease `json:"chartReleaseInfo,omitempty"`

	// ci identifier
	CiIdentifier *V2controllersCiIdentifier `json:"ciIdentifier,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// from app version branch
	FromAppVersionBranch string `json:"fromAppVersionBranch,omitempty"`

	// from app version commit
	FromAppVersionCommit string `json:"fromAppVersionCommit,omitempty"`

	// from app version exact
	FromAppVersionExact string `json:"fromAppVersionExact,omitempty"`

	// from app version follow chart release
	FromAppVersionFollowChartRelease string `json:"fromAppVersionFollowChartRelease,omitempty"`

	// from app version reference
	FromAppVersionReference string `json:"fromAppVersionReference,omitempty"`

	// from app version resolver
	FromAppVersionResolver string `json:"fromAppVersionResolver,omitempty"`

	// from chart version exact
	FromChartVersionExact string `json:"fromChartVersionExact,omitempty"`

	// from chart version follow chart release
	FromChartVersionFollowChartRelease string `json:"fromChartVersionFollowChartRelease,omitempty"`

	// from chart version reference
	FromChartVersionReference string `json:"fromChartVersionReference,omitempty"`

	// from chart version resolver
	FromChartVersionResolver string `json:"fromChartVersionResolver,omitempty"`

	// from firecloud develop ref
	FromFirecloudDevelopRef string `json:"fromFirecloudDevelopRef,omitempty"`

	// from helmfile ref
	FromHelmfileRef string `json:"fromHelmfileRef,omitempty"`

	// from resolved at
	// Format: date-time
	FromResolvedAt strfmt.DateTime `json:"fromResolvedAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// new app versions
	NewAppVersions []*V2controllersAppVersion `json:"newAppVersions"`

	// new chart versions
	NewChartVersions []*V2controllersChartVersion `json:"newChartVersions"`

	// superseded at
	// Format: date-time
	SupersededAt strfmt.DateTime `json:"supersededAt,omitempty"`

	// to app version branch
	ToAppVersionBranch string `json:"toAppVersionBranch,omitempty"`

	// to app version commit
	ToAppVersionCommit string `json:"toAppVersionCommit,omitempty"`

	// to app version exact
	ToAppVersionExact string `json:"toAppVersionExact,omitempty"`

	// to app version follow chart release
	ToAppVersionFollowChartRelease string `json:"toAppVersionFollowChartRelease,omitempty"`

	// to app version reference
	ToAppVersionReference string `json:"toAppVersionReference,omitempty"`

	// to app version resolver
	ToAppVersionResolver string `json:"toAppVersionResolver,omitempty"`

	// to chart version exact
	ToChartVersionExact string `json:"toChartVersionExact,omitempty"`

	// to chart version follow chart release
	ToChartVersionFollowChartRelease string `json:"toChartVersionFollowChartRelease,omitempty"`

	// to chart version reference
	ToChartVersionReference string `json:"toChartVersionReference,omitempty"`

	// to chart version resolver
	ToChartVersionResolver string `json:"toChartVersionResolver,omitempty"`

	// to firecloud develop ref
	ToFirecloudDevelopRef string `json:"toFirecloudDevelopRef,omitempty"`

	// to helmfile ref
	ToHelmfileRef string `json:"toHelmfileRef,omitempty"`

	// to resolved at
	// Format: date-time
	ToResolvedAt strfmt.DateTime `json:"toResolvedAt,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this v2controllers changeset
func (m *V2controllersChangeset) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppliedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartReleaseInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromResolvedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewAppVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewChartVersions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupersededAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToResolvedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersChangeset) validateAppliedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.AppliedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("appliedAt", "body", "date-time", m.AppliedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2controllersChangeset) validateChartReleaseInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartReleaseInfo) { // not required
		return nil
	}

	if m.ChartReleaseInfo != nil {
		if err := m.ChartReleaseInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartReleaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartReleaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChangeset) validateCiIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.CiIdentifier) { // not required
		return nil
	}

	if m.CiIdentifier != nil {
		if err := m.CiIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ciIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChangeset) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2controllersChangeset) validateFromResolvedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FromResolvedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("fromResolvedAt", "body", "date-time", m.FromResolvedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2controllersChangeset) validateNewAppVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.NewAppVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.NewAppVersions); i++ {
		if swag.IsZero(m.NewAppVersions[i]) { // not required
			continue
		}

		if m.NewAppVersions[i] != nil {
			if err := m.NewAppVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newAppVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("newAppVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2controllersChangeset) validateNewChartVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.NewChartVersions) { // not required
		return nil
	}

	for i := 0; i < len(m.NewChartVersions); i++ {
		if swag.IsZero(m.NewChartVersions[i]) { // not required
			continue
		}

		if m.NewChartVersions[i] != nil {
			if err := m.NewChartVersions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newChartVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("newChartVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2controllersChangeset) validateSupersededAt(formats strfmt.Registry) error {
	if swag.IsZero(m.SupersededAt) { // not required
		return nil
	}

	if err := validate.FormatOf("supersededAt", "body", "date-time", m.SupersededAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2controllersChangeset) validateToResolvedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ToResolvedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("toResolvedAt", "body", "date-time", m.ToResolvedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2controllersChangeset) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v2controllers changeset based on the context it is used
func (m *V2controllersChangeset) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartReleaseInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCiIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewAppVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewChartVersions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersChangeset) contextValidateChartReleaseInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ChartReleaseInfo != nil {
		if err := m.ChartReleaseInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartReleaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartReleaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChangeset) contextValidateCiIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.CiIdentifier != nil {
		if err := m.CiIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ciIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersChangeset) contextValidateNewAppVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewAppVersions); i++ {

		if m.NewAppVersions[i] != nil {
			if err := m.NewAppVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newAppVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("newAppVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V2controllersChangeset) contextValidateNewChartVersions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewChartVersions); i++ {

		if m.NewChartVersions[i] != nil {
			if err := m.NewChartVersions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newChartVersions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("newChartVersions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersChangeset) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersChangeset) UnmarshalBinary(b []byte) error {
	var res V2controllersChangeset
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
