// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2controllersDatabaseInstance v2controllers database instance
//
// swagger:model v2controllers.DatabaseInstance
type V2controllersDatabaseInstance struct {

	// Required if platform is 'azure'
	AzureManagedResourceGroup string `json:"azureManagedResourceGroup,omitempty"`

	// Required if platform is 'azure'
	AzureSubscription string `json:"azureSubscription,omitempty"`

	// Required when creating
	ChartRelease string `json:"chartRelease,omitempty"`

	// chart release info
	ChartReleaseInfo *V2controllersChartRelease `json:"chartReleaseInfo,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// When creating, defaults to the chart name
	DefaultDatabase string `json:"defaultDatabase,omitempty"`

	// Required if platform is 'google'
	GoogleLocation string `json:"googleLocation,omitempty"`

	// Required if platform is 'google'
	GoogleProject string `json:"googleProject,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// Required if platform is 'google' or 'azure'
	InstanceName string `json:"instanceName,omitempty"`

	// 'google', 'azure', or default 'kubernetes'
	Platform *string `json:"platform,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this v2controllers database instance
func (m *V2controllersDatabaseInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartReleaseInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersDatabaseInstance) validateChartReleaseInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartReleaseInfo) { // not required
		return nil
	}

	if m.ChartReleaseInfo != nil {
		if err := m.ChartReleaseInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartReleaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartReleaseInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V2controllersDatabaseInstance) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V2controllersDatabaseInstance) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v2controllers database instance based on the context it is used
func (m *V2controllersDatabaseInstance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartReleaseInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersDatabaseInstance) contextValidateChartReleaseInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ChartReleaseInfo != nil {
		if err := m.ChartReleaseInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartReleaseInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartReleaseInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersDatabaseInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersDatabaseInstance) UnmarshalBinary(b []byte) error {
	var res V2controllersDatabaseInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
