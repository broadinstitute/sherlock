// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2controllersEditableChartRelease v2controllers editable chart release
//
// swagger:model v2controllers.EditableChartRelease
type V2controllersEditableChartRelease struct {

	// current app version exact
	CurrentAppVersionExact string `json:"currentAppVersionExact,omitempty"`

	// current chart version exact
	CurrentChartVersionExact string `json:"currentChartVersionExact,omitempty"`

	// helmfile ref
	HelmfileRef *string `json:"helmfileRef,omitempty"`

	// When creating, will default to the app's main branch if it has one recorded
	TargetAppVersionBranch string `json:"targetAppVersionBranch,omitempty"`

	// target app version commit
	TargetAppVersionCommit string `json:"targetAppVersionCommit,omitempty"`

	// target app version exact
	TargetAppVersionExact string `json:"targetAppVersionExact,omitempty"`

	// When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
	// Enum: [branch commit exact]
	TargetAppVersionUse string `json:"targetAppVersionUse,omitempty"`

	// target chart version exact
	TargetChartVersionExact string `json:"targetChartVersionExact,omitempty"`

	// When creating, will default to latest unless an exact target chart version is provided
	// Enum: [latest exact]
	TargetChartVersionUse string `json:"targetChartVersionUse,omitempty"`

	// thelma mode
	ThelmaMode string `json:"thelmaMode,omitempty"`
}

// Validate validates this v2controllers editable chart release
func (m *V2controllersEditableChartRelease) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetAppVersionUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetChartVersionUse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v2controllersEditableChartReleaseTypeTargetAppVersionUsePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["branch","commit","exact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2controllersEditableChartReleaseTypeTargetAppVersionUsePropEnum = append(v2controllersEditableChartReleaseTypeTargetAppVersionUsePropEnum, v)
	}
}

const (

	// V2controllersEditableChartReleaseTargetAppVersionUseBranch captures enum value "branch"
	V2controllersEditableChartReleaseTargetAppVersionUseBranch string = "branch"

	// V2controllersEditableChartReleaseTargetAppVersionUseCommit captures enum value "commit"
	V2controllersEditableChartReleaseTargetAppVersionUseCommit string = "commit"

	// V2controllersEditableChartReleaseTargetAppVersionUseExact captures enum value "exact"
	V2controllersEditableChartReleaseTargetAppVersionUseExact string = "exact"
)

// prop value enum
func (m *V2controllersEditableChartRelease) validateTargetAppVersionUseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v2controllersEditableChartReleaseTypeTargetAppVersionUsePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V2controllersEditableChartRelease) validateTargetAppVersionUse(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetAppVersionUse) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetAppVersionUseEnum("targetAppVersionUse", "body", m.TargetAppVersionUse); err != nil {
		return err
	}

	return nil
}

var v2controllersEditableChartReleaseTypeTargetChartVersionUsePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["latest","exact"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2controllersEditableChartReleaseTypeTargetChartVersionUsePropEnum = append(v2controllersEditableChartReleaseTypeTargetChartVersionUsePropEnum, v)
	}
}

const (

	// V2controllersEditableChartReleaseTargetChartVersionUseLatest captures enum value "latest"
	V2controllersEditableChartReleaseTargetChartVersionUseLatest string = "latest"

	// V2controllersEditableChartReleaseTargetChartVersionUseExact captures enum value "exact"
	V2controllersEditableChartReleaseTargetChartVersionUseExact string = "exact"
)

// prop value enum
func (m *V2controllersEditableChartRelease) validateTargetChartVersionUseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, v2controllersEditableChartReleaseTypeTargetChartVersionUsePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *V2controllersEditableChartRelease) validateTargetChartVersionUse(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetChartVersionUse) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetChartVersionUseEnum("targetChartVersionUse", "body", m.TargetChartVersionUse); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v2controllers editable chart release based on context it is used
func (m *V2controllersEditableChartRelease) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersEditableChartRelease) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersEditableChartRelease) UnmarshalBinary(b []byte) error {
	var res V2controllersEditableChartRelease
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
