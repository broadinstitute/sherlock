// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2controllersEditableEnvironment v2controllers editable environment
//
// swagger:model v2controllers.EditableEnvironment
type V2controllersEditableEnvironment struct {

	// Used to schedule automatic deletion of BEEs
	AutoDelete struct {
		EnvironmentAutoDelete
	} `json:"autoDelete,omitempty"`

	// base domain
	BaseDomain *string `json:"baseDomain,omitempty"`

	// default cluster
	DefaultCluster string `json:"defaultCluster,omitempty"`

	// should be the environment branch for live envs. Is usually dev for template/dynamic but not necessarily
	DefaultFirecloudDevelopRef *string `json:"defaultFirecloudDevelopRef,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// helmfile ref
	HelmfileRef *string `json:"helmfileRef,omitempty"`

	// name prefixes domain
	NamePrefixesDomain *bool `json:"namePrefixesDomain,omitempty"`

	// When creating, will be set to your email
	Owner string `json:"owner,omitempty"`

	// Used to protect specific BEEs from deletion (thelma checks this field)
	PreventDeletion *bool `json:"preventDeletion,omitempty"`

	// requires suitability
	RequiresSuitability *bool `json:"requiresSuitability,omitempty"`
}

// Validate validates this v2controllers editable environment
func (m *V2controllersEditableEnvironment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoDelete(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersEditableEnvironment) validateAutoDelete(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoDelete) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this v2controllers editable environment based on the context it is used
func (m *V2controllersEditableEnvironment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2controllersEditableEnvironment) contextValidateAutoDelete(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersEditableEnvironment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersEditableEnvironment) UnmarshalBinary(b []byte) error {
	var res V2controllersEditableEnvironment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
