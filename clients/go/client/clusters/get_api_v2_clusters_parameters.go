// Code generated by go-swagger; DO NOT EDIT.

package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2ClustersParams creates a new GetAPIV2ClustersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2ClustersParams() *GetAPIV2ClustersParams {
	return &GetAPIV2ClustersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2ClustersParamsWithTimeout creates a new GetAPIV2ClustersParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2ClustersParamsWithTimeout(timeout time.Duration) *GetAPIV2ClustersParams {
	return &GetAPIV2ClustersParams{
		timeout: timeout,
	}
}

// NewGetAPIV2ClustersParamsWithContext creates a new GetAPIV2ClustersParams object
// with the ability to set a context for a request.
func NewGetAPIV2ClustersParamsWithContext(ctx context.Context) *GetAPIV2ClustersParams {
	return &GetAPIV2ClustersParams{
		Context: ctx,
	}
}

// NewGetAPIV2ClustersParamsWithHTTPClient creates a new GetAPIV2ClustersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2ClustersParamsWithHTTPClient(client *http.Client) *GetAPIV2ClustersParams {
	return &GetAPIV2ClustersParams{
		HTTPClient: client,
	}
}

/*
GetAPIV2ClustersParams contains all the parameters to send to the API endpoint

	for the get API v2 clusters operation.

	Typically these are written to a http.Request.
*/
type GetAPIV2ClustersParams struct {

	/* Address.

	   Required when creating
	*/
	Address *string

	/* AzureSubscription.

	   Required when creating if providers is 'azure'
	*/
	AzureSubscription *string

	/* Base.

	   Required when creating
	*/
	Base *string

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	/* GoogleProject.

	   Required when creating if provider is 'google'
	*/
	GoogleProject *string

	// HelmfileRef.
	//
	// Default: "HEAD"
	HelmfileRef *string

	// ID.
	ID *int64

	/* Limit.

	   An optional limit to the number of entries returned
	*/
	Limit *int64

	// Location.
	//
	// Default: "us-central1-a"
	Location *string

	/* Name.

	   Required when creating
	*/
	Name *string

	// Provider.
	//
	// Default: "google"
	Provider *string

	// RequiresSuitability.
	RequiresSuitability *bool

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ClustersParams) WithDefaults() *GetAPIV2ClustersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ClustersParams) SetDefaults() {
	var (
		helmfileRefDefault = string("HEAD")

		locationDefault = string("us-central1-a")

		providerDefault = string("google")

		requiresSuitabilityDefault = bool(false)
	)

	val := GetAPIV2ClustersParams{
		HelmfileRef:         &helmfileRefDefault,
		Location:            &locationDefault,
		Provider:            &providerDefault,
		RequiresSuitability: &requiresSuitabilityDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithTimeout(timeout time.Duration) *GetAPIV2ClustersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithContext(ctx context.Context) *GetAPIV2ClustersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithHTTPClient(client *http.Client) *GetAPIV2ClustersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithAddress(address *string) *GetAPIV2ClustersParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetAddress(address *string) {
	o.Address = address
}

// WithAzureSubscription adds the azureSubscription to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithAzureSubscription(azureSubscription *string) *GetAPIV2ClustersParams {
	o.SetAzureSubscription(azureSubscription)
	return o
}

// SetAzureSubscription adds the azureSubscription to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetAzureSubscription(azureSubscription *string) {
	o.AzureSubscription = azureSubscription
}

// WithBase adds the base to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithBase(base *string) *GetAPIV2ClustersParams {
	o.SetBase(base)
	return o
}

// SetBase adds the base to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetBase(base *string) {
	o.Base = base
}

// WithCreatedAt adds the createdAt to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIV2ClustersParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithGoogleProject adds the googleProject to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithGoogleProject(googleProject *string) *GetAPIV2ClustersParams {
	o.SetGoogleProject(googleProject)
	return o
}

// SetGoogleProject adds the googleProject to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetGoogleProject(googleProject *string) {
	o.GoogleProject = googleProject
}

// WithHelmfileRef adds the helmfileRef to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithHelmfileRef(helmfileRef *string) *GetAPIV2ClustersParams {
	o.SetHelmfileRef(helmfileRef)
	return o
}

// SetHelmfileRef adds the helmfileRef to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetHelmfileRef(helmfileRef *string) {
	o.HelmfileRef = helmfileRef
}

// WithID adds the id to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithID(id *int64) *GetAPIV2ClustersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithLimit(limit *int64) *GetAPIV2ClustersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLocation adds the location to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithLocation(location *string) *GetAPIV2ClustersParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetLocation(location *string) {
	o.Location = location
}

// WithName adds the name to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithName(name *string) *GetAPIV2ClustersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetName(name *string) {
	o.Name = name
}

// WithProvider adds the provider to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithProvider(provider *string) *GetAPIV2ClustersParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithRequiresSuitability adds the requiresSuitability to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithRequiresSuitability(requiresSuitability *bool) *GetAPIV2ClustersParams {
	o.SetRequiresSuitability(requiresSuitability)
	return o
}

// SetRequiresSuitability adds the requiresSuitability to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetRequiresSuitability(requiresSuitability *bool) {
	o.RequiresSuitability = requiresSuitability
}

// WithUpdatedAt adds the updatedAt to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIV2ClustersParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API v2 clusters params
func (o *GetAPIV2ClustersParams) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2ClustersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// query param address
		var qrAddress string

		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {

			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}
	}

	if o.AzureSubscription != nil {

		// query param azureSubscription
		var qrAzureSubscription string

		if o.AzureSubscription != nil {
			qrAzureSubscription = *o.AzureSubscription
		}
		qAzureSubscription := qrAzureSubscription
		if qAzureSubscription != "" {

			if err := r.SetQueryParam("azureSubscription", qAzureSubscription); err != nil {
				return err
			}
		}
	}

	if o.Base != nil {

		// query param base
		var qrBase string

		if o.Base != nil {
			qrBase = *o.Base
		}
		qBase := qrBase
		if qBase != "" {

			if err := r.SetQueryParam("base", qBase); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.GoogleProject != nil {

		// query param googleProject
		var qrGoogleProject string

		if o.GoogleProject != nil {
			qrGoogleProject = *o.GoogleProject
		}
		qGoogleProject := qrGoogleProject
		if qGoogleProject != "" {

			if err := r.SetQueryParam("googleProject", qGoogleProject); err != nil {
				return err
			}
		}
	}

	if o.HelmfileRef != nil {

		// query param helmfileRef
		var qrHelmfileRef string

		if o.HelmfileRef != nil {
			qrHelmfileRef = *o.HelmfileRef
		}
		qHelmfileRef := qrHelmfileRef
		if qHelmfileRef != "" {

			if err := r.SetQueryParam("helmfileRef", qHelmfileRef); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Location != nil {

		// query param location
		var qrLocation string

		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {

			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string

		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {

			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}
	}

	if o.RequiresSuitability != nil {

		// query param requiresSuitability
		var qrRequiresSuitability bool

		if o.RequiresSuitability != nil {
			qrRequiresSuitability = *o.RequiresSuitability
		}
		qRequiresSuitability := swag.FormatBool(qrRequiresSuitability)
		if qRequiresSuitability != "" {

			if err := r.SetQueryParam("requiresSuitability", qRequiresSuitability); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
