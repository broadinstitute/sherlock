// Code generated by go-swagger; DO NOT EDIT.

package changesets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new changesets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for changesets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV2Changesets(params *GetAPIV2ChangesetsParams, opts ...ClientOption) (*GetAPIV2ChangesetsOK, error)

	GetAPIV2ChangesetsSelector(params *GetAPIV2ChangesetsSelectorParams, opts ...ClientOption) (*GetAPIV2ChangesetsSelectorOK, error)

	GetAPIV2SelectorsChangesetsSelector(params *GetAPIV2SelectorsChangesetsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsChangesetsSelectorOK, error)

	PostAPIV2Changesets(params *PostAPIV2ChangesetsParams, opts ...ClientOption) (*PostAPIV2ChangesetsOK, *PostAPIV2ChangesetsCreated, error)

	PostAPIV2ProceduresChangesetsApply(params *PostAPIV2ProceduresChangesetsApplyParams, opts ...ClientOption) (*PostAPIV2ProceduresChangesetsApplyOK, error)

	PostAPIV2ProceduresChangesetsPlan(params *PostAPIV2ProceduresChangesetsPlanParams, opts ...ClientOption) (*PostAPIV2ProceduresChangesetsPlanOK, *PostAPIV2ProceduresChangesetsPlanCreated, error)

	PostAPIV2ProceduresChangesetsPlanAndApply(params *PostAPIV2ProceduresChangesetsPlanAndApplyParams, opts ...ClientOption) (*PostAPIV2ProceduresChangesetsPlanAndApplyOK, *PostAPIV2ProceduresChangesetsPlanAndApplyCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPIV2Changesets lists changeset entries

  List existing Changeset entries, ordered by most recently updated.
*/
func (a *Client) GetAPIV2Changesets(params *GetAPIV2ChangesetsParams, opts ...ClientOption) (*GetAPIV2ChangesetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ChangesetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Changesets",
		Method:             "GET",
		PathPattern:        "/api/v2/changesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2ChangesetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2ChangesetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Changesets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2ChangesetsSelector gets a changeset entry

  Get an existing Changeset entry via its "selector"--its numeric ID.
*/
func (a *Client) GetAPIV2ChangesetsSelector(params *GetAPIV2ChangesetsSelectorParams, opts ...ClientOption) (*GetAPIV2ChangesetsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ChangesetsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2ChangesetsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/changesets/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2ChangesetsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2ChangesetsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2ChangesetsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2SelectorsChangesetsSelector lists changeset selectors

  Validate a given Changeset selector and provide any other selectors that would match the same Changeset.
*/
func (a *Client) GetAPIV2SelectorsChangesetsSelector(params *GetAPIV2SelectorsChangesetsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsChangesetsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SelectorsChangesetsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SelectorsChangesetsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/selectors/changesets/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2SelectorsChangesetsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SelectorsChangesetsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SelectorsChangesetsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2Changesets creates a new changeset entry

  Create a new Changeset entry. Note that fields are immutable after creation.
You'll likely want to use the plan endpoint instead, which conditionally creates a Changeset based on there actually being a version diff.
*/
func (a *Client) PostAPIV2Changesets(params *PostAPIV2ChangesetsParams, opts ...ClientOption) (*PostAPIV2ChangesetsOK, *PostAPIV2ChangesetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2ChangesetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Changesets",
		Method:             "POST",
		PathPattern:        "/api/v2/changesets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2ChangesetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAPIV2ChangesetsOK:
		return value, nil, nil
	case *PostAPIV2ChangesetsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changesets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2ProceduresChangesetsApply applies previously planned version changes to chart releases

  Looks up and applies previously-planned version diffs given by the ID. Other stored plans against the same Chart Releases are marked as superseded.
Multiple Changesets can be specified simply by passing multiple IDs in the list.
*/
func (a *Client) PostAPIV2ProceduresChangesetsApply(params *PostAPIV2ProceduresChangesetsApplyParams, opts ...ClientOption) (*PostAPIV2ProceduresChangesetsApplyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2ProceduresChangesetsApplyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2ProceduresChangesetsApply",
		Method:             "POST",
		PathPattern:        "/api/v2/procedures/changesets/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2ProceduresChangesetsApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2ProceduresChangesetsApplyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2ProceduresChangesetsApply: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2ProceduresChangesetsPlan plans but do not apply version changes to chart releases

  Refreshes and calculates version diffs for Chart Releases. If there's a diff, the plan is stored and returned so it can be applied later.
Multiple Chart Releases can be specified--as can groups of Chart Releases from multiple Environments.
*/
func (a *Client) PostAPIV2ProceduresChangesetsPlan(params *PostAPIV2ProceduresChangesetsPlanParams, opts ...ClientOption) (*PostAPIV2ProceduresChangesetsPlanOK, *PostAPIV2ProceduresChangesetsPlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2ProceduresChangesetsPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2ProceduresChangesetsPlan",
		Method:             "POST",
		PathPattern:        "/api/v2/procedures/changesets/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2ProceduresChangesetsPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAPIV2ProceduresChangesetsPlanOK:
		return value, nil, nil
	case *PostAPIV2ProceduresChangesetsPlanCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changesets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2ProceduresChangesetsPlanAndApply plans and apply version changes in one step

  Like the plan and apply endpoints immediately in sequence.
*/
func (a *Client) PostAPIV2ProceduresChangesetsPlanAndApply(params *PostAPIV2ProceduresChangesetsPlanAndApplyParams, opts ...ClientOption) (*PostAPIV2ProceduresChangesetsPlanAndApplyOK, *PostAPIV2ProceduresChangesetsPlanAndApplyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2ProceduresChangesetsPlanAndApplyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2ProceduresChangesetsPlanAndApply",
		Method:             "POST",
		PathPattern:        "/api/v2/procedures/changesets/plan-and-apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2ProceduresChangesetsPlanAndApplyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAPIV2ProceduresChangesetsPlanAndApplyOK:
		return value, nil, nil
	case *PostAPIV2ProceduresChangesetsPlanAndApplyCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changesets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
