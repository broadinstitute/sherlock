// Code generated by go-swagger; DO NOT EDIT.

package changesets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2ChangesetsParams creates a new GetAPIV2ChangesetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2ChangesetsParams() *GetAPIV2ChangesetsParams {
	return &GetAPIV2ChangesetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2ChangesetsParamsWithTimeout creates a new GetAPIV2ChangesetsParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2ChangesetsParamsWithTimeout(timeout time.Duration) *GetAPIV2ChangesetsParams {
	return &GetAPIV2ChangesetsParams{
		timeout: timeout,
	}
}

// NewGetAPIV2ChangesetsParamsWithContext creates a new GetAPIV2ChangesetsParams object
// with the ability to set a context for a request.
func NewGetAPIV2ChangesetsParamsWithContext(ctx context.Context) *GetAPIV2ChangesetsParams {
	return &GetAPIV2ChangesetsParams{
		Context: ctx,
	}
}

// NewGetAPIV2ChangesetsParamsWithHTTPClient creates a new GetAPIV2ChangesetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2ChangesetsParamsWithHTTPClient(client *http.Client) *GetAPIV2ChangesetsParams {
	return &GetAPIV2ChangesetsParams{
		HTTPClient: client,
	}
}

/* GetAPIV2ChangesetsParams contains all the parameters to send to the API endpoint
   for the get API v2 changesets operation.

   Typically these are written to a http.Request.
*/
type GetAPIV2ChangesetsParams struct {

	// AppliedAt.
	AppliedAt *string

	// ChartRelease.
	ChartRelease *string

	// CreatedAt.
	CreatedAt *string

	// FromAppVersionBranch.
	FromAppVersionBranch *string

	// FromAppVersionCommit.
	FromAppVersionCommit *string

	// FromAppVersionExact.
	FromAppVersionExact *string

	// FromAppVersionReference.
	FromAppVersionReference *string

	// FromAppVersionResolver.
	FromAppVersionResolver *string

	// FromChartVersionExact.
	FromChartVersionExact *string

	// FromChartVersionReference.
	FromChartVersionReference *string

	// FromChartVersionResolver.
	FromChartVersionResolver *string

	// FromFirecloudDevelopRef.
	FromFirecloudDevelopRef *string

	// FromHelmfileRef.
	FromHelmfileRef *string

	// FromResolvedAt.
	FromResolvedAt *string

	// ID.
	ID *int64

	/* Limit.

	   An optional limit to the number of entries returned
	*/
	Limit *int64

	// SupersededAt.
	SupersededAt *string

	// ToAppVersionBranch.
	ToAppVersionBranch *string

	// ToAppVersionCommit.
	ToAppVersionCommit *string

	// ToAppVersionExact.
	ToAppVersionExact *string

	// ToAppVersionReference.
	ToAppVersionReference *string

	// ToAppVersionResolver.
	ToAppVersionResolver *string

	// ToChartVersionExact.
	ToChartVersionExact *string

	// ToChartVersionReference.
	ToChartVersionReference *string

	// ToChartVersionResolver.
	ToChartVersionResolver *string

	// ToFirecloudDevelopRef.
	ToFirecloudDevelopRef *string

	// ToHelmfileRef.
	ToHelmfileRef *string

	// ToResolvedAt.
	ToResolvedAt *string

	// UpdatedAt.
	UpdatedAt *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 changesets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ChangesetsParams) WithDefaults() *GetAPIV2ChangesetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 changesets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ChangesetsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithTimeout(timeout time.Duration) *GetAPIV2ChangesetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithContext(ctx context.Context) *GetAPIV2ChangesetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithHTTPClient(client *http.Client) *GetAPIV2ChangesetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppliedAt adds the appliedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithAppliedAt(appliedAt *string) *GetAPIV2ChangesetsParams {
	o.SetAppliedAt(appliedAt)
	return o
}

// SetAppliedAt adds the appliedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetAppliedAt(appliedAt *string) {
	o.AppliedAt = appliedAt
}

// WithChartRelease adds the chartRelease to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithChartRelease(chartRelease *string) *GetAPIV2ChangesetsParams {
	o.SetChartRelease(chartRelease)
	return o
}

// SetChartRelease adds the chartRelease to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetChartRelease(chartRelease *string) {
	o.ChartRelease = chartRelease
}

// WithCreatedAt adds the createdAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithCreatedAt(createdAt *string) *GetAPIV2ChangesetsParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithFromAppVersionBranch adds the fromAppVersionBranch to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromAppVersionBranch(fromAppVersionBranch *string) *GetAPIV2ChangesetsParams {
	o.SetFromAppVersionBranch(fromAppVersionBranch)
	return o
}

// SetFromAppVersionBranch adds the fromAppVersionBranch to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromAppVersionBranch(fromAppVersionBranch *string) {
	o.FromAppVersionBranch = fromAppVersionBranch
}

// WithFromAppVersionCommit adds the fromAppVersionCommit to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromAppVersionCommit(fromAppVersionCommit *string) *GetAPIV2ChangesetsParams {
	o.SetFromAppVersionCommit(fromAppVersionCommit)
	return o
}

// SetFromAppVersionCommit adds the fromAppVersionCommit to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromAppVersionCommit(fromAppVersionCommit *string) {
	o.FromAppVersionCommit = fromAppVersionCommit
}

// WithFromAppVersionExact adds the fromAppVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromAppVersionExact(fromAppVersionExact *string) *GetAPIV2ChangesetsParams {
	o.SetFromAppVersionExact(fromAppVersionExact)
	return o
}

// SetFromAppVersionExact adds the fromAppVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromAppVersionExact(fromAppVersionExact *string) {
	o.FromAppVersionExact = fromAppVersionExact
}

// WithFromAppVersionReference adds the fromAppVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromAppVersionReference(fromAppVersionReference *string) *GetAPIV2ChangesetsParams {
	o.SetFromAppVersionReference(fromAppVersionReference)
	return o
}

// SetFromAppVersionReference adds the fromAppVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromAppVersionReference(fromAppVersionReference *string) {
	o.FromAppVersionReference = fromAppVersionReference
}

// WithFromAppVersionResolver adds the fromAppVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromAppVersionResolver(fromAppVersionResolver *string) *GetAPIV2ChangesetsParams {
	o.SetFromAppVersionResolver(fromAppVersionResolver)
	return o
}

// SetFromAppVersionResolver adds the fromAppVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromAppVersionResolver(fromAppVersionResolver *string) {
	o.FromAppVersionResolver = fromAppVersionResolver
}

// WithFromChartVersionExact adds the fromChartVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromChartVersionExact(fromChartVersionExact *string) *GetAPIV2ChangesetsParams {
	o.SetFromChartVersionExact(fromChartVersionExact)
	return o
}

// SetFromChartVersionExact adds the fromChartVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromChartVersionExact(fromChartVersionExact *string) {
	o.FromChartVersionExact = fromChartVersionExact
}

// WithFromChartVersionReference adds the fromChartVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromChartVersionReference(fromChartVersionReference *string) *GetAPIV2ChangesetsParams {
	o.SetFromChartVersionReference(fromChartVersionReference)
	return o
}

// SetFromChartVersionReference adds the fromChartVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromChartVersionReference(fromChartVersionReference *string) {
	o.FromChartVersionReference = fromChartVersionReference
}

// WithFromChartVersionResolver adds the fromChartVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromChartVersionResolver(fromChartVersionResolver *string) *GetAPIV2ChangesetsParams {
	o.SetFromChartVersionResolver(fromChartVersionResolver)
	return o
}

// SetFromChartVersionResolver adds the fromChartVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromChartVersionResolver(fromChartVersionResolver *string) {
	o.FromChartVersionResolver = fromChartVersionResolver
}

// WithFromFirecloudDevelopRef adds the fromFirecloudDevelopRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromFirecloudDevelopRef(fromFirecloudDevelopRef *string) *GetAPIV2ChangesetsParams {
	o.SetFromFirecloudDevelopRef(fromFirecloudDevelopRef)
	return o
}

// SetFromFirecloudDevelopRef adds the fromFirecloudDevelopRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromFirecloudDevelopRef(fromFirecloudDevelopRef *string) {
	o.FromFirecloudDevelopRef = fromFirecloudDevelopRef
}

// WithFromHelmfileRef adds the fromHelmfileRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromHelmfileRef(fromHelmfileRef *string) *GetAPIV2ChangesetsParams {
	o.SetFromHelmfileRef(fromHelmfileRef)
	return o
}

// SetFromHelmfileRef adds the fromHelmfileRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromHelmfileRef(fromHelmfileRef *string) {
	o.FromHelmfileRef = fromHelmfileRef
}

// WithFromResolvedAt adds the fromResolvedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithFromResolvedAt(fromResolvedAt *string) *GetAPIV2ChangesetsParams {
	o.SetFromResolvedAt(fromResolvedAt)
	return o
}

// SetFromResolvedAt adds the fromResolvedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetFromResolvedAt(fromResolvedAt *string) {
	o.FromResolvedAt = fromResolvedAt
}

// WithID adds the id to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithID(id *int64) *GetAPIV2ChangesetsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithLimit(limit *int64) *GetAPIV2ChangesetsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSupersededAt adds the supersededAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithSupersededAt(supersededAt *string) *GetAPIV2ChangesetsParams {
	o.SetSupersededAt(supersededAt)
	return o
}

// SetSupersededAt adds the supersededAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetSupersededAt(supersededAt *string) {
	o.SupersededAt = supersededAt
}

// WithToAppVersionBranch adds the toAppVersionBranch to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToAppVersionBranch(toAppVersionBranch *string) *GetAPIV2ChangesetsParams {
	o.SetToAppVersionBranch(toAppVersionBranch)
	return o
}

// SetToAppVersionBranch adds the toAppVersionBranch to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToAppVersionBranch(toAppVersionBranch *string) {
	o.ToAppVersionBranch = toAppVersionBranch
}

// WithToAppVersionCommit adds the toAppVersionCommit to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToAppVersionCommit(toAppVersionCommit *string) *GetAPIV2ChangesetsParams {
	o.SetToAppVersionCommit(toAppVersionCommit)
	return o
}

// SetToAppVersionCommit adds the toAppVersionCommit to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToAppVersionCommit(toAppVersionCommit *string) {
	o.ToAppVersionCommit = toAppVersionCommit
}

// WithToAppVersionExact adds the toAppVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToAppVersionExact(toAppVersionExact *string) *GetAPIV2ChangesetsParams {
	o.SetToAppVersionExact(toAppVersionExact)
	return o
}

// SetToAppVersionExact adds the toAppVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToAppVersionExact(toAppVersionExact *string) {
	o.ToAppVersionExact = toAppVersionExact
}

// WithToAppVersionReference adds the toAppVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToAppVersionReference(toAppVersionReference *string) *GetAPIV2ChangesetsParams {
	o.SetToAppVersionReference(toAppVersionReference)
	return o
}

// SetToAppVersionReference adds the toAppVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToAppVersionReference(toAppVersionReference *string) {
	o.ToAppVersionReference = toAppVersionReference
}

// WithToAppVersionResolver adds the toAppVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToAppVersionResolver(toAppVersionResolver *string) *GetAPIV2ChangesetsParams {
	o.SetToAppVersionResolver(toAppVersionResolver)
	return o
}

// SetToAppVersionResolver adds the toAppVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToAppVersionResolver(toAppVersionResolver *string) {
	o.ToAppVersionResolver = toAppVersionResolver
}

// WithToChartVersionExact adds the toChartVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToChartVersionExact(toChartVersionExact *string) *GetAPIV2ChangesetsParams {
	o.SetToChartVersionExact(toChartVersionExact)
	return o
}

// SetToChartVersionExact adds the toChartVersionExact to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToChartVersionExact(toChartVersionExact *string) {
	o.ToChartVersionExact = toChartVersionExact
}

// WithToChartVersionReference adds the toChartVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToChartVersionReference(toChartVersionReference *string) *GetAPIV2ChangesetsParams {
	o.SetToChartVersionReference(toChartVersionReference)
	return o
}

// SetToChartVersionReference adds the toChartVersionReference to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToChartVersionReference(toChartVersionReference *string) {
	o.ToChartVersionReference = toChartVersionReference
}

// WithToChartVersionResolver adds the toChartVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToChartVersionResolver(toChartVersionResolver *string) *GetAPIV2ChangesetsParams {
	o.SetToChartVersionResolver(toChartVersionResolver)
	return o
}

// SetToChartVersionResolver adds the toChartVersionResolver to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToChartVersionResolver(toChartVersionResolver *string) {
	o.ToChartVersionResolver = toChartVersionResolver
}

// WithToFirecloudDevelopRef adds the toFirecloudDevelopRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToFirecloudDevelopRef(toFirecloudDevelopRef *string) *GetAPIV2ChangesetsParams {
	o.SetToFirecloudDevelopRef(toFirecloudDevelopRef)
	return o
}

// SetToFirecloudDevelopRef adds the toFirecloudDevelopRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToFirecloudDevelopRef(toFirecloudDevelopRef *string) {
	o.ToFirecloudDevelopRef = toFirecloudDevelopRef
}

// WithToHelmfileRef adds the toHelmfileRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToHelmfileRef(toHelmfileRef *string) *GetAPIV2ChangesetsParams {
	o.SetToHelmfileRef(toHelmfileRef)
	return o
}

// SetToHelmfileRef adds the toHelmfileRef to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToHelmfileRef(toHelmfileRef *string) {
	o.ToHelmfileRef = toHelmfileRef
}

// WithToResolvedAt adds the toResolvedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithToResolvedAt(toResolvedAt *string) *GetAPIV2ChangesetsParams {
	o.SetToResolvedAt(toResolvedAt)
	return o
}

// SetToResolvedAt adds the toResolvedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetToResolvedAt(toResolvedAt *string) {
	o.ToResolvedAt = toResolvedAt
}

// WithUpdatedAt adds the updatedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) WithUpdatedAt(updatedAt *string) *GetAPIV2ChangesetsParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API v2 changesets params
func (o *GetAPIV2ChangesetsParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2ChangesetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppliedAt != nil {

		// query param appliedAt
		var qrAppliedAt string

		if o.AppliedAt != nil {
			qrAppliedAt = *o.AppliedAt
		}
		qAppliedAt := qrAppliedAt
		if qAppliedAt != "" {

			if err := r.SetQueryParam("appliedAt", qAppliedAt); err != nil {
				return err
			}
		}
	}

	if o.ChartRelease != nil {

		// query param chartRelease
		var qrChartRelease string

		if o.ChartRelease != nil {
			qrChartRelease = *o.ChartRelease
		}
		qChartRelease := qrChartRelease
		if qChartRelease != "" {

			if err := r.SetQueryParam("chartRelease", qChartRelease); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.FromAppVersionBranch != nil {

		// query param fromAppVersionBranch
		var qrFromAppVersionBranch string

		if o.FromAppVersionBranch != nil {
			qrFromAppVersionBranch = *o.FromAppVersionBranch
		}
		qFromAppVersionBranch := qrFromAppVersionBranch
		if qFromAppVersionBranch != "" {

			if err := r.SetQueryParam("fromAppVersionBranch", qFromAppVersionBranch); err != nil {
				return err
			}
		}
	}

	if o.FromAppVersionCommit != nil {

		// query param fromAppVersionCommit
		var qrFromAppVersionCommit string

		if o.FromAppVersionCommit != nil {
			qrFromAppVersionCommit = *o.FromAppVersionCommit
		}
		qFromAppVersionCommit := qrFromAppVersionCommit
		if qFromAppVersionCommit != "" {

			if err := r.SetQueryParam("fromAppVersionCommit", qFromAppVersionCommit); err != nil {
				return err
			}
		}
	}

	if o.FromAppVersionExact != nil {

		// query param fromAppVersionExact
		var qrFromAppVersionExact string

		if o.FromAppVersionExact != nil {
			qrFromAppVersionExact = *o.FromAppVersionExact
		}
		qFromAppVersionExact := qrFromAppVersionExact
		if qFromAppVersionExact != "" {

			if err := r.SetQueryParam("fromAppVersionExact", qFromAppVersionExact); err != nil {
				return err
			}
		}
	}

	if o.FromAppVersionReference != nil {

		// query param fromAppVersionReference
		var qrFromAppVersionReference string

		if o.FromAppVersionReference != nil {
			qrFromAppVersionReference = *o.FromAppVersionReference
		}
		qFromAppVersionReference := qrFromAppVersionReference
		if qFromAppVersionReference != "" {

			if err := r.SetQueryParam("fromAppVersionReference", qFromAppVersionReference); err != nil {
				return err
			}
		}
	}

	if o.FromAppVersionResolver != nil {

		// query param fromAppVersionResolver
		var qrFromAppVersionResolver string

		if o.FromAppVersionResolver != nil {
			qrFromAppVersionResolver = *o.FromAppVersionResolver
		}
		qFromAppVersionResolver := qrFromAppVersionResolver
		if qFromAppVersionResolver != "" {

			if err := r.SetQueryParam("fromAppVersionResolver", qFromAppVersionResolver); err != nil {
				return err
			}
		}
	}

	if o.FromChartVersionExact != nil {

		// query param fromChartVersionExact
		var qrFromChartVersionExact string

		if o.FromChartVersionExact != nil {
			qrFromChartVersionExact = *o.FromChartVersionExact
		}
		qFromChartVersionExact := qrFromChartVersionExact
		if qFromChartVersionExact != "" {

			if err := r.SetQueryParam("fromChartVersionExact", qFromChartVersionExact); err != nil {
				return err
			}
		}
	}

	if o.FromChartVersionReference != nil {

		// query param fromChartVersionReference
		var qrFromChartVersionReference string

		if o.FromChartVersionReference != nil {
			qrFromChartVersionReference = *o.FromChartVersionReference
		}
		qFromChartVersionReference := qrFromChartVersionReference
		if qFromChartVersionReference != "" {

			if err := r.SetQueryParam("fromChartVersionReference", qFromChartVersionReference); err != nil {
				return err
			}
		}
	}

	if o.FromChartVersionResolver != nil {

		// query param fromChartVersionResolver
		var qrFromChartVersionResolver string

		if o.FromChartVersionResolver != nil {
			qrFromChartVersionResolver = *o.FromChartVersionResolver
		}
		qFromChartVersionResolver := qrFromChartVersionResolver
		if qFromChartVersionResolver != "" {

			if err := r.SetQueryParam("fromChartVersionResolver", qFromChartVersionResolver); err != nil {
				return err
			}
		}
	}

	if o.FromFirecloudDevelopRef != nil {

		// query param fromFirecloudDevelopRef
		var qrFromFirecloudDevelopRef string

		if o.FromFirecloudDevelopRef != nil {
			qrFromFirecloudDevelopRef = *o.FromFirecloudDevelopRef
		}
		qFromFirecloudDevelopRef := qrFromFirecloudDevelopRef
		if qFromFirecloudDevelopRef != "" {

			if err := r.SetQueryParam("fromFirecloudDevelopRef", qFromFirecloudDevelopRef); err != nil {
				return err
			}
		}
	}

	if o.FromHelmfileRef != nil {

		// query param fromHelmfileRef
		var qrFromHelmfileRef string

		if o.FromHelmfileRef != nil {
			qrFromHelmfileRef = *o.FromHelmfileRef
		}
		qFromHelmfileRef := qrFromHelmfileRef
		if qFromHelmfileRef != "" {

			if err := r.SetQueryParam("fromHelmfileRef", qFromHelmfileRef); err != nil {
				return err
			}
		}
	}

	if o.FromResolvedAt != nil {

		// query param fromResolvedAt
		var qrFromResolvedAt string

		if o.FromResolvedAt != nil {
			qrFromResolvedAt = *o.FromResolvedAt
		}
		qFromResolvedAt := qrFromResolvedAt
		if qFromResolvedAt != "" {

			if err := r.SetQueryParam("fromResolvedAt", qFromResolvedAt); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.SupersededAt != nil {

		// query param supersededAt
		var qrSupersededAt string

		if o.SupersededAt != nil {
			qrSupersededAt = *o.SupersededAt
		}
		qSupersededAt := qrSupersededAt
		if qSupersededAt != "" {

			if err := r.SetQueryParam("supersededAt", qSupersededAt); err != nil {
				return err
			}
		}
	}

	if o.ToAppVersionBranch != nil {

		// query param toAppVersionBranch
		var qrToAppVersionBranch string

		if o.ToAppVersionBranch != nil {
			qrToAppVersionBranch = *o.ToAppVersionBranch
		}
		qToAppVersionBranch := qrToAppVersionBranch
		if qToAppVersionBranch != "" {

			if err := r.SetQueryParam("toAppVersionBranch", qToAppVersionBranch); err != nil {
				return err
			}
		}
	}

	if o.ToAppVersionCommit != nil {

		// query param toAppVersionCommit
		var qrToAppVersionCommit string

		if o.ToAppVersionCommit != nil {
			qrToAppVersionCommit = *o.ToAppVersionCommit
		}
		qToAppVersionCommit := qrToAppVersionCommit
		if qToAppVersionCommit != "" {

			if err := r.SetQueryParam("toAppVersionCommit", qToAppVersionCommit); err != nil {
				return err
			}
		}
	}

	if o.ToAppVersionExact != nil {

		// query param toAppVersionExact
		var qrToAppVersionExact string

		if o.ToAppVersionExact != nil {
			qrToAppVersionExact = *o.ToAppVersionExact
		}
		qToAppVersionExact := qrToAppVersionExact
		if qToAppVersionExact != "" {

			if err := r.SetQueryParam("toAppVersionExact", qToAppVersionExact); err != nil {
				return err
			}
		}
	}

	if o.ToAppVersionReference != nil {

		// query param toAppVersionReference
		var qrToAppVersionReference string

		if o.ToAppVersionReference != nil {
			qrToAppVersionReference = *o.ToAppVersionReference
		}
		qToAppVersionReference := qrToAppVersionReference
		if qToAppVersionReference != "" {

			if err := r.SetQueryParam("toAppVersionReference", qToAppVersionReference); err != nil {
				return err
			}
		}
	}

	if o.ToAppVersionResolver != nil {

		// query param toAppVersionResolver
		var qrToAppVersionResolver string

		if o.ToAppVersionResolver != nil {
			qrToAppVersionResolver = *o.ToAppVersionResolver
		}
		qToAppVersionResolver := qrToAppVersionResolver
		if qToAppVersionResolver != "" {

			if err := r.SetQueryParam("toAppVersionResolver", qToAppVersionResolver); err != nil {
				return err
			}
		}
	}

	if o.ToChartVersionExact != nil {

		// query param toChartVersionExact
		var qrToChartVersionExact string

		if o.ToChartVersionExact != nil {
			qrToChartVersionExact = *o.ToChartVersionExact
		}
		qToChartVersionExact := qrToChartVersionExact
		if qToChartVersionExact != "" {

			if err := r.SetQueryParam("toChartVersionExact", qToChartVersionExact); err != nil {
				return err
			}
		}
	}

	if o.ToChartVersionReference != nil {

		// query param toChartVersionReference
		var qrToChartVersionReference string

		if o.ToChartVersionReference != nil {
			qrToChartVersionReference = *o.ToChartVersionReference
		}
		qToChartVersionReference := qrToChartVersionReference
		if qToChartVersionReference != "" {

			if err := r.SetQueryParam("toChartVersionReference", qToChartVersionReference); err != nil {
				return err
			}
		}
	}

	if o.ToChartVersionResolver != nil {

		// query param toChartVersionResolver
		var qrToChartVersionResolver string

		if o.ToChartVersionResolver != nil {
			qrToChartVersionResolver = *o.ToChartVersionResolver
		}
		qToChartVersionResolver := qrToChartVersionResolver
		if qToChartVersionResolver != "" {

			if err := r.SetQueryParam("toChartVersionResolver", qToChartVersionResolver); err != nil {
				return err
			}
		}
	}

	if o.ToFirecloudDevelopRef != nil {

		// query param toFirecloudDevelopRef
		var qrToFirecloudDevelopRef string

		if o.ToFirecloudDevelopRef != nil {
			qrToFirecloudDevelopRef = *o.ToFirecloudDevelopRef
		}
		qToFirecloudDevelopRef := qrToFirecloudDevelopRef
		if qToFirecloudDevelopRef != "" {

			if err := r.SetQueryParam("toFirecloudDevelopRef", qToFirecloudDevelopRef); err != nil {
				return err
			}
		}
	}

	if o.ToHelmfileRef != nil {

		// query param toHelmfileRef
		var qrToHelmfileRef string

		if o.ToHelmfileRef != nil {
			qrToHelmfileRef = *o.ToHelmfileRef
		}
		qToHelmfileRef := qrToHelmfileRef
		if qToHelmfileRef != "" {

			if err := r.SetQueryParam("toHelmfileRef", qToHelmfileRef); err != nil {
				return err
			}
		}
	}

	if o.ToResolvedAt != nil {

		// query param toResolvedAt
		var qrToResolvedAt string

		if o.ToResolvedAt != nil {
			qrToResolvedAt = *o.ToResolvedAt
		}
		qToResolvedAt := qrToResolvedAt
		if qToResolvedAt != "" {

			if err := r.SetQueryParam("toResolvedAt", qToResolvedAt); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
