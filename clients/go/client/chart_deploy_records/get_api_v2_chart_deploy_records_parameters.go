// Code generated by go-swagger; DO NOT EDIT.

package chart_deploy_records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2ChartDeployRecordsParams creates a new GetAPIV2ChartDeployRecordsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2ChartDeployRecordsParams() *GetAPIV2ChartDeployRecordsParams {
	return &GetAPIV2ChartDeployRecordsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2ChartDeployRecordsParamsWithTimeout creates a new GetAPIV2ChartDeployRecordsParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2ChartDeployRecordsParamsWithTimeout(timeout time.Duration) *GetAPIV2ChartDeployRecordsParams {
	return &GetAPIV2ChartDeployRecordsParams{
		timeout: timeout,
	}
}

// NewGetAPIV2ChartDeployRecordsParamsWithContext creates a new GetAPIV2ChartDeployRecordsParams object
// with the ability to set a context for a request.
func NewGetAPIV2ChartDeployRecordsParamsWithContext(ctx context.Context) *GetAPIV2ChartDeployRecordsParams {
	return &GetAPIV2ChartDeployRecordsParams{
		Context: ctx,
	}
}

// NewGetAPIV2ChartDeployRecordsParamsWithHTTPClient creates a new GetAPIV2ChartDeployRecordsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2ChartDeployRecordsParamsWithHTTPClient(client *http.Client) *GetAPIV2ChartDeployRecordsParams {
	return &GetAPIV2ChartDeployRecordsParams{
		HTTPClient: client,
	}
}

/* GetAPIV2ChartDeployRecordsParams contains all the parameters to send to the API endpoint
   for the get API v2 chart deploy records operation.

   Typically these are written to a http.Request.
*/
type GetAPIV2ChartDeployRecordsParams struct {

	/* ChartRelease.

	   Required when creating
	*/
	ChartRelease *string

	// CreatedAt.
	CreatedAt *string

	/* ExactAppVersion.

	   When creating, will default to the value currently held by the chart release
	*/
	ExactAppVersion *string

	/* ExactChartVersion.

	   When creating, will default to the value currently held by the chart release
	*/
	ExactChartVersion *string

	/* HelmfileRef.

	   When creating, will default to the value currently held by the chart release
	*/
	HelmfileRef *string

	// ID.
	ID *int64

	/* Limit.

	   An optional limit to the number of entries returned
	*/
	Limit *int64

	// UpdatedAt.
	UpdatedAt *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 chart deploy records params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ChartDeployRecordsParams) WithDefaults() *GetAPIV2ChartDeployRecordsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 chart deploy records params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2ChartDeployRecordsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithTimeout(timeout time.Duration) *GetAPIV2ChartDeployRecordsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithContext(ctx context.Context) *GetAPIV2ChartDeployRecordsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithHTTPClient(client *http.Client) *GetAPIV2ChartDeployRecordsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChartRelease adds the chartRelease to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithChartRelease(chartRelease *string) *GetAPIV2ChartDeployRecordsParams {
	o.SetChartRelease(chartRelease)
	return o
}

// SetChartRelease adds the chartRelease to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetChartRelease(chartRelease *string) {
	o.ChartRelease = chartRelease
}

// WithCreatedAt adds the createdAt to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithCreatedAt(createdAt *string) *GetAPIV2ChartDeployRecordsParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetCreatedAt(createdAt *string) {
	o.CreatedAt = createdAt
}

// WithExactAppVersion adds the exactAppVersion to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithExactAppVersion(exactAppVersion *string) *GetAPIV2ChartDeployRecordsParams {
	o.SetExactAppVersion(exactAppVersion)
	return o
}

// SetExactAppVersion adds the exactAppVersion to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetExactAppVersion(exactAppVersion *string) {
	o.ExactAppVersion = exactAppVersion
}

// WithExactChartVersion adds the exactChartVersion to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithExactChartVersion(exactChartVersion *string) *GetAPIV2ChartDeployRecordsParams {
	o.SetExactChartVersion(exactChartVersion)
	return o
}

// SetExactChartVersion adds the exactChartVersion to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetExactChartVersion(exactChartVersion *string) {
	o.ExactChartVersion = exactChartVersion
}

// WithHelmfileRef adds the helmfileRef to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithHelmfileRef(helmfileRef *string) *GetAPIV2ChartDeployRecordsParams {
	o.SetHelmfileRef(helmfileRef)
	return o
}

// SetHelmfileRef adds the helmfileRef to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetHelmfileRef(helmfileRef *string) {
	o.HelmfileRef = helmfileRef
}

// WithID adds the id to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithID(id *int64) *GetAPIV2ChartDeployRecordsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithLimit(limit *int64) *GetAPIV2ChartDeployRecordsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithUpdatedAt adds the updatedAt to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) WithUpdatedAt(updatedAt *string) *GetAPIV2ChartDeployRecordsParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API v2 chart deploy records params
func (o *GetAPIV2ChartDeployRecordsParams) SetUpdatedAt(updatedAt *string) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2ChartDeployRecordsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ChartRelease != nil {

		// query param chartRelease
		var qrChartRelease string

		if o.ChartRelease != nil {
			qrChartRelease = *o.ChartRelease
		}
		qChartRelease := qrChartRelease
		if qChartRelease != "" {

			if err := r.SetQueryParam("chartRelease", qChartRelease); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt string

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ExactAppVersion != nil {

		// query param exactAppVersion
		var qrExactAppVersion string

		if o.ExactAppVersion != nil {
			qrExactAppVersion = *o.ExactAppVersion
		}
		qExactAppVersion := qrExactAppVersion
		if qExactAppVersion != "" {

			if err := r.SetQueryParam("exactAppVersion", qExactAppVersion); err != nil {
				return err
			}
		}
	}

	if o.ExactChartVersion != nil {

		// query param exactChartVersion
		var qrExactChartVersion string

		if o.ExactChartVersion != nil {
			qrExactChartVersion = *o.ExactChartVersion
		}
		qExactChartVersion := qrExactChartVersion
		if qExactChartVersion != "" {

			if err := r.SetQueryParam("exactChartVersion", qExactChartVersion); err != nil {
				return err
			}
		}
	}

	if o.HelmfileRef != nil {

		// query param helmfileRef
		var qrHelmfileRef string

		if o.HelmfileRef != nil {
			qrHelmfileRef = *o.HelmfileRef
		}
		qHelmfileRef := qrHelmfileRef
		if qHelmfileRef != "" {

			if err := r.SetQueryParam("helmfileRef", qHelmfileRef); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt string

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
