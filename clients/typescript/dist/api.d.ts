/**
 * Sherlock
 * The Data Science Platform's source-of-truth service
 *
 * OpenAPI spec version: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface AuthExtraPermissions
 */
export interface AuthExtraPermissions {
    /**
     *
     * @type {boolean}
     * @memberof AuthExtraPermissions
     */
    suitable?: boolean;
}
/**
 *
 * @export
 * @interface AuthFirecloudAccount
 */
export interface AuthFirecloudAccount {
    /**
     *
     * @type {boolean}
     * @memberof AuthFirecloudAccount
     */
    acceptedGoogleTerms?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AuthFirecloudAccount
     */
    archived?: boolean;
    /**
     *
     * @type {string}
     * @memberof AuthFirecloudAccount
     */
    email?: string;
    /**
     *
     * @type {boolean}
     * @memberof AuthFirecloudAccount
     */
    enrolledIn2Fa?: boolean;
    /**
     *
     * @type {AuthFirecloudGroupMembership}
     * @memberof AuthFirecloudAccount
     */
    groups?: AuthFirecloudGroupMembership;
    /**
     *
     * @type {boolean}
     * @memberof AuthFirecloudAccount
     */
    suspended?: boolean;
    /**
     *
     * @type {string}
     * @memberof AuthFirecloudAccount
     */
    suspensionReason?: string;
}
/**
 *
 * @export
 * @interface AuthFirecloudGroupMembership
 */
export interface AuthFirecloudGroupMembership {
    /**
     *
     * @type {boolean}
     * @memberof AuthFirecloudGroupMembership
     */
    fcAdmins?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AuthFirecloudGroupMembership
     */
    firecloudProjectOwners?: boolean;
}
/**
 *
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     *
     * @type {string}
     * @memberof AuthUser
     */
    authenticatedEmail?: string;
    /**
     *
     * @type {AuthExtraPermissions}
     * @memberof AuthUser
     */
    matchedExtraPermissions?: AuthExtraPermissions;
    /**
     *
     * @type {AuthFirecloudAccount}
     * @memberof AuthUser
     */
    matchedFirecloudAccount?: AuthFirecloudAccount;
}
/**
 *
 * @export
 * @interface ErrorsErrorResponse
 */
export interface ErrorsErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorsErrorResponse
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsErrorResponse
     */
    toBlame?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorsErrorResponse
     */
    type?: string;
}
/**
 *
 * @export
 * @interface MiscMyUserResponse
 */
export interface MiscMyUserResponse {
    /**
     *
     * @type {string}
     * @memberof MiscMyUserResponse
     */
    email?: string;
    /**
     *
     * @type {AuthUser}
     * @memberof MiscMyUserResponse
     */
    rawInfo?: AuthUser;
    /**
     *
     * @type {string}
     * @memberof MiscMyUserResponse
     */
    suitability?: string;
}
/**
 *
 * @export
 * @interface MiscStatusResponse
 */
export interface MiscStatusResponse {
    /**
     *
     * @type {boolean}
     * @memberof MiscStatusResponse
     */
    ok?: boolean;
}
/**
 *
 * @export
 * @interface MiscVersionResponse
 */
export interface MiscVersionResponse {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MiscVersionResponse
     */
    buildInfo?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof MiscVersionResponse
     */
    goVersion?: string;
    /**
     *
     * @type {string}
     * @memberof MiscVersionResponse
     */
    version?: string;
}
/**
 *
 * @export
 * @interface V2controllersAppVersion
 */
export interface V2controllersAppVersion {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersAppVersion
     */
    appVersion?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersAppVersion
     */
    chart?: string;
    /**
     *
     * @type {V2controllersChart}
     * @memberof V2controllersAppVersion
     */
    chartInfo?: V2controllersChart;
    /**
     *
     * @type {string}
     * @memberof V2controllersAppVersion
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersAppVersion
     */
    gitBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersAppVersion
     */
    gitCommit?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersAppVersion
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof V2controllersAppVersion
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface V2controllersChart
 */
export interface V2controllersChart {
    /**
     *
     * @type {string}
     * @memberof V2controllersChart
     */
    appImageGitMainBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChart
     */
    appImageGitRepo?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChart
     */
    chartRepo?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChart
     */
    createdAt?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersChart
     */
    id?: number;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersChart
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChart
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface V2controllersChartDeployRecord
 */
export interface V2controllersChartDeployRecord {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersChartDeployRecord
     */
    chartRelease?: string;
    /**
     *
     * @type {V2controllersChartRelease}
     * @memberof V2controllersChartDeployRecord
     */
    chartReleaseInfo?: V2controllersChartRelease;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartDeployRecord
     */
    createdAt?: string;
    /**
     * When creating, will default to the value currently held by the chart release
     * @type {string}
     * @memberof V2controllersChartDeployRecord
     */
    exactAppVersion?: string;
    /**
     * When creating, will default to the value currently held by the chart release
     * @type {string}
     * @memberof V2controllersChartDeployRecord
     */
    exactChartVersion?: string;
    /**
     * When creating, will default to the value currently held by the chart release
     * @type {string}
     * @memberof V2controllersChartDeployRecord
     */
    helmfileRef?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersChartDeployRecord
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartDeployRecord
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface V2controllersChartRelease
 */
export interface V2controllersChartRelease {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    chart?: string;
    /**
     *
     * @type {V2controllersChart}
     * @memberof V2controllersChartRelease
     */
    chartInfo?: V2controllersChart;
    /**
     * When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    cluster?: string;
    /**
     *
     * @type {V2controllersCluster}
     * @memberof V2controllersChartRelease
     */
    clusterInfo?: V2controllersCluster;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    currentAppVersionExact?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    currentChartVersionExact?: string;
    /**
     * Calculated field
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    destinationType?: string;
    /**
     * Either this or cluster must be provided.
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    environment?: string;
    /**
     *
     * @type {V2controllersEnvironment}
     * @memberof V2controllersChartRelease
     */
    environmentInfo?: V2controllersEnvironment;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    helmfileRef?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersChartRelease
     */
    id?: number;
    /**
     * When creating, will be calculated if left empty
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    name?: string;
    /**
     * When creating, will default to the environment's default namespace, if provided
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    namespace?: string;
    /**
     * When creating, will default to the app's main branch if it has one recorded
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    targetAppVersionBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    targetAppVersionCommit?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    targetAppVersionExact?: string;
    /**
     * When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    targetAppVersionUse?: V2controllersChartRelease.TargetAppVersionUseEnum;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    targetChartVersionExact?: string;
    /**
     * When creating, will default to latest unless an exact target chart version is provided
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    targetChartVersionUse?: V2controllersChartRelease.TargetChartVersionUseEnum;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    thelmaMode?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartRelease
     */
    updatedAt?: string;
}
/**
 * @export
 * @namespace V2controllersChartRelease
 */
export declare namespace V2controllersChartRelease {
    /**
     * @export
     * @enum {string}
     */
    enum TargetAppVersionUseEnum {
        Branch,
        Commit,
        Exact
    }
    /**
     * @export
     * @enum {string}
     */
    enum TargetChartVersionUseEnum {
        Latest,
        Exact
    }
}
/**
 *
 * @export
 * @interface V2controllersChartVersion
 */
export interface V2controllersChartVersion {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersChartVersion
     */
    chart?: string;
    /**
     *
     * @type {V2controllersChart}
     * @memberof V2controllersChartVersion
     */
    chartInfo?: V2controllersChart;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersChartVersion
     */
    chartVersion?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartVersion
     */
    createdAt?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersChartVersion
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof V2controllersChartVersion
     */
    updatedAt?: string;
}
/**
 * The full set of Cluster fields that can be read or used for filtering queries
 * @export
 * @interface V2controllersCluster
 */
export interface V2controllersCluster {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCluster
     */
    address?: string;
    /**
     * Required when creating if providers is 'azure'
     * @type {string}
     * @memberof V2controllersCluster
     */
    azureSubscription?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCluster
     */
    base?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCluster
     */
    createdAt?: string;
    /**
     * Required when creating if provider is 'google'
     * @type {string}
     * @memberof V2controllersCluster
     */
    googleProject?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersCluster
     */
    id?: number;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCluster
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCluster
     */
    provider?: V2controllersCluster.ProviderEnum;
    /**
     *
     * @type {boolean}
     * @memberof V2controllersCluster
     */
    requiresSuitability?: boolean;
    /**
     *
     * @type {string}
     * @memberof V2controllersCluster
     */
    updatedAt?: string;
}
/**
 * @export
 * @namespace V2controllersCluster
 */
export declare namespace V2controllersCluster {
    /**
     * @export
     * @enum {string}
     */
    enum ProviderEnum {
        Google,
        Azure
    }
}
/**
 *
 * @export
 * @interface V2controllersCreatableAppVersion
 */
export interface V2controllersCreatableAppVersion {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableAppVersion
     */
    appVersion?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableAppVersion
     */
    chart?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableAppVersion
     */
    gitBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableAppVersion
     */
    gitCommit?: string;
}
/**
 *
 * @export
 * @interface V2controllersCreatableChart
 */
export interface V2controllersCreatableChart {
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChart
     */
    appImageGitMainBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChart
     */
    appImageGitRepo?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChart
     */
    chartRepo?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableChart
     */
    name?: string;
}
/**
 *
 * @export
 * @interface V2controllersCreatableChartDeployRecord
 */
export interface V2controllersCreatableChartDeployRecord {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableChartDeployRecord
     */
    chartRelease?: string;
    /**
     * When creating, will default to the value currently held by the chart release
     * @type {string}
     * @memberof V2controllersCreatableChartDeployRecord
     */
    exactAppVersion?: string;
    /**
     * When creating, will default to the value currently held by the chart release
     * @type {string}
     * @memberof V2controllersCreatableChartDeployRecord
     */
    exactChartVersion?: string;
    /**
     * When creating, will default to the value currently held by the chart release
     * @type {string}
     * @memberof V2controllersCreatableChartDeployRecord
     */
    helmfileRef?: string;
}
/**
 *
 * @export
 * @interface V2controllersCreatableChartRelease
 */
export interface V2controllersCreatableChartRelease {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    chart?: string;
    /**
     * When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    cluster?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    currentAppVersionExact?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    currentChartVersionExact?: string;
    /**
     * Either this or cluster must be provided.
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    environment?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    helmfileRef?: string;
    /**
     * When creating, will be calculated if left empty
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    name?: string;
    /**
     * When creating, will default to the environment's default namespace, if provided
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    namespace?: string;
    /**
     * When creating, will default to the app's main branch if it has one recorded
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionCommit?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionExact?: string;
    /**
     * When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionUse?: V2controllersCreatableChartRelease.TargetAppVersionUseEnum;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetChartVersionExact?: string;
    /**
     * When creating, will default to latest unless an exact target chart version is provided
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetChartVersionUse?: V2controllersCreatableChartRelease.TargetChartVersionUseEnum;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    thelmaMode?: string;
}
/**
 * @export
 * @namespace V2controllersCreatableChartRelease
 */
export declare namespace V2controllersCreatableChartRelease {
    /**
     * @export
     * @enum {string}
     */
    enum TargetAppVersionUseEnum {
        Branch,
        Commit,
        Exact
    }
    /**
     * @export
     * @enum {string}
     */
    enum TargetChartVersionUseEnum {
        Latest,
        Exact
    }
}
/**
 *
 * @export
 * @interface V2controllersCreatableChartVersion
 */
export interface V2controllersCreatableChartVersion {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableChartVersion
     */
    chart?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableChartVersion
     */
    chartVersion?: string;
}
/**
 * The subset of Cluster fields that can be set upon creation
 * @export
 * @interface V2controllersCreatableCluster
 */
export interface V2controllersCreatableCluster {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableCluster
     */
    address?: string;
    /**
     * Required when creating if providers is 'azure'
     * @type {string}
     * @memberof V2controllersCreatableCluster
     */
    azureSubscription?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableCluster
     */
    base?: string;
    /**
     * Required when creating if provider is 'google'
     * @type {string}
     * @memberof V2controllersCreatableCluster
     */
    googleProject?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableCluster
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableCluster
     */
    provider?: V2controllersCreatableCluster.ProviderEnum;
    /**
     *
     * @type {boolean}
     * @memberof V2controllersCreatableCluster
     */
    requiresSuitability?: boolean;
}
/**
 * @export
 * @namespace V2controllersCreatableCluster
 */
export declare namespace V2controllersCreatableCluster {
    /**
     * @export
     * @enum {string}
     */
    enum ProviderEnum {
        Google,
        Azure
    }
}
/**
 *
 * @export
 * @interface V2controllersCreatableEnvironment
 */
export interface V2controllersCreatableEnvironment {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    base?: string;
    /**
     * Upon creation of a dynamic environment, if this is true the template's chart releases will be copied to the new environment
     * @type {boolean}
     * @memberof V2controllersCreatableEnvironment
     */
    chartReleasesFromTemplate?: boolean;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    defaultCluster?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    defaultNamespace?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    lifecycle?: string;
    /**
     * When creating, will be calculated if dynamic, required otherwise
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    name?: string;
    /**
     * When creating, will be set to your email
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    owner?: string;
    /**
     *
     * @type {boolean}
     * @memberof V2controllersCreatableEnvironment
     */
    requiresSuitability?: boolean;
    /**
     * Required for dynamic environments
     * @type {string}
     * @memberof V2controllersCreatableEnvironment
     */
    templateEnvironment?: string;
}
/**
 *
 * @export
 * @interface V2controllersEditableChart
 */
export interface V2controllersEditableChart {
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChart
     */
    appImageGitMainBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChart
     */
    appImageGitRepo?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChart
     */
    chartRepo?: string;
}
/**
 *
 * @export
 * @interface V2controllersEditableChartRelease
 */
export interface V2controllersEditableChartRelease {
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    currentAppVersionExact?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    currentChartVersionExact?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    helmfileRef?: string;
    /**
     * When creating, will default to the app's main branch if it has one recorded
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    targetAppVersionBranch?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    targetAppVersionCommit?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    targetAppVersionExact?: string;
    /**
     * When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    targetAppVersionUse?: V2controllersEditableChartRelease.TargetAppVersionUseEnum;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    targetChartVersionExact?: string;
    /**
     * When creating, will default to latest unless an exact target chart version is provided
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    targetChartVersionUse?: V2controllersEditableChartRelease.TargetChartVersionUseEnum;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableChartRelease
     */
    thelmaMode?: string;
}
/**
 * @export
 * @namespace V2controllersEditableChartRelease
 */
export declare namespace V2controllersEditableChartRelease {
    /**
     * @export
     * @enum {string}
     */
    enum TargetAppVersionUseEnum {
        Branch,
        Commit,
        Exact
    }
    /**
     * @export
     * @enum {string}
     */
    enum TargetChartVersionUseEnum {
        Latest,
        Exact
    }
}
/**
 * The subset of Cluster fields that can be edited after creation
 * @export
 * @interface V2controllersEditableCluster
 */
export interface V2controllersEditableCluster {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersEditableCluster
     */
    address?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersEditableCluster
     */
    base?: string;
    /**
     *
     * @type {boolean}
     * @memberof V2controllersEditableCluster
     */
    requiresSuitability?: boolean;
}
/**
 *
 * @export
 * @interface V2controllersEditableEnvironment
 */
export interface V2controllersEditableEnvironment {
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableEnvironment
     */
    defaultCluster?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEditableEnvironment
     */
    defaultNamespace?: string;
    /**
     * When creating, will be set to your email
     * @type {string}
     * @memberof V2controllersEditableEnvironment
     */
    owner?: string;
    /**
     *
     * @type {boolean}
     * @memberof V2controllersEditableEnvironment
     */
    requiresSuitability?: boolean;
}
/**
 *
 * @export
 * @interface V2controllersEnvironment
 */
export interface V2controllersEnvironment {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    base?: string;
    /**
     * Upon creation of a dynamic environment, if this is true the template's chart releases will be copied to the new environment
     * @type {boolean}
     * @memberof V2controllersEnvironment
     */
    chartReleasesFromTemplate?: boolean;
    /**
     *
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    defaultCluster?: string;
    /**
     *
     * @type {V2controllersCluster}
     * @memberof V2controllersEnvironment
     */
    defaultClusterInfo?: V2controllersCluster;
    /**
     *
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    defaultNamespace?: string;
    /**
     *
     * @type {number}
     * @memberof V2controllersEnvironment
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    lifecycle?: string;
    /**
     * When creating, will be calculated if dynamic, required otherwise
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    name?: string;
    /**
     * When creating, will be set to your email
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    owner?: string;
    /**
     *
     * @type {boolean}
     * @memberof V2controllersEnvironment
     */
    requiresSuitability?: boolean;
    /**
     * Required for dynamic environments
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    templateEnvironment?: string;
    /**
     * Single-layer recursive; provides info of the template environment if this environment has one
     * @type {any}
     * @memberof V2controllersEnvironment
     */
    templateEnvironmentInfo?: any;
    /**
     *
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof V2controllersEnvironment
     */
    valuesName?: string;
}
/**
 * AppVersionsApi - fetch parameter creator
 * @export
 */
export declare const AppVersionsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing AppVersion entries, ordered by most recently updated.
     * @summary List AppVersion entries
     * @param {string} [appVersion] Required when creating
     * @param {string} [chart] Required when creating
     * @param {string} [createdAt]
     * @param {string} [gitBranch]
     * @param {string} [gitCommit]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsGet(appVersion?: string, chart?: string, createdAt?: string, gitBranch?: string, gitCommit?: string, id?: number, updatedAt?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new AppVersion entry. Note that fields are immutable after creation.
     * @summary Create a new AppVersion entry
     * @param {V2controllersCreatableAppVersion} body The AppVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsPost(body: V2controllersCreatableAppVersion, options?: any): FetchArgs;
    /**
     * Get an existing AppVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a AppVersion entry
     * @param {string} selector The AppVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Validate a given AppVersion selector and provide any other selectors that would match the same AppVersion.
     * @summary List AppVersion selectors
     * @param {string} selector The selector of the AppVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsAppVersionsSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * AppVersionsApi - functional programming interface
 * @export
 */
export declare const AppVersionsApiFp: (configuration?: Configuration) => {
    /**
     * List existing AppVersion entries, ordered by most recently updated.
     * @summary List AppVersion entries
     * @param {string} [appVersion] Required when creating
     * @param {string} [chart] Required when creating
     * @param {string} [createdAt]
     * @param {string} [gitBranch]
     * @param {string} [gitCommit]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsGet(appVersion?: string, chart?: string, createdAt?: string, gitBranch?: string, gitCommit?: string, id?: number, updatedAt?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersAppVersion>>;
    /**
     * Create a new AppVersion entry. Note that fields are immutable after creation.
     * @summary Create a new AppVersion entry
     * @param {V2controllersCreatableAppVersion} body The AppVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsPost(body: V2controllersCreatableAppVersion, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersAppVersion>;
    /**
     * Get an existing AppVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a AppVersion entry
     * @param {string} selector The AppVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersAppVersion>;
    /**
     * Validate a given AppVersion selector and provide any other selectors that would match the same AppVersion.
     * @summary List AppVersion selectors
     * @param {string} selector The selector of the AppVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsAppVersionsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * AppVersionsApi - factory interface
 * @export
 */
export declare const AppVersionsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing AppVersion entries, ordered by most recently updated.
     * @summary List AppVersion entries
     * @param {string} [appVersion] Required when creating
     * @param {string} [chart] Required when creating
     * @param {string} [createdAt]
     * @param {string} [gitBranch]
     * @param {string} [gitCommit]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsGet(appVersion?: string, chart?: string, createdAt?: string, gitBranch?: string, gitCommit?: string, id?: number, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersAppVersion[]>;
    /**
     * Create a new AppVersion entry. Note that fields are immutable after creation.
     * @summary Create a new AppVersion entry
     * @param {V2controllersCreatableAppVersion} body The AppVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsPost(body: V2controllersCreatableAppVersion, options?: any): Promise<V2controllersAppVersion>;
    /**
     * Get an existing AppVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a AppVersion entry
     * @param {string} selector The AppVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2AppVersionsSelectorGet(selector: string, options?: any): Promise<V2controllersAppVersion>;
    /**
     * Validate a given AppVersion selector and provide any other selectors that would match the same AppVersion.
     * @summary List AppVersion selectors
     * @param {string} selector The selector of the AppVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsAppVersionsSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * AppVersionsApi - object-oriented interface
 * @export
 * @class AppVersionsApi
 * @extends {BaseAPI}
 */
export declare class AppVersionsApi extends BaseAPI {
    /**
     * List existing AppVersion entries, ordered by most recently updated.
     * @summary List AppVersion entries
     * @param {string} [appVersion] Required when creating
     * @param {string} [chart] Required when creating
     * @param {string} [createdAt]
     * @param {string} [gitBranch]
     * @param {string} [gitCommit]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppVersionsApi
     */
    apiV2AppVersionsGet(appVersion?: string, chart?: string, createdAt?: string, gitBranch?: string, gitCommit?: string, id?: number, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersAppVersion[]>;
    /**
     * Create a new AppVersion entry. Note that fields are immutable after creation.
     * @summary Create a new AppVersion entry
     * @param {V2controllersCreatableAppVersion} body The AppVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppVersionsApi
     */
    apiV2AppVersionsPost(body: V2controllersCreatableAppVersion, options?: any): Promise<V2controllersAppVersion>;
    /**
     * Get an existing AppVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a AppVersion entry
     * @param {string} selector The AppVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppVersionsApi
     */
    apiV2AppVersionsSelectorGet(selector: string, options?: any): Promise<V2controllersAppVersion>;
    /**
     * Validate a given AppVersion selector and provide any other selectors that would match the same AppVersion.
     * @summary List AppVersion selectors
     * @param {string} selector The selector of the AppVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppVersionsApi
     */
    apiV2SelectorsAppVersionsSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * ChartDeployRecordsApi - fetch parameter creator
 * @export
 */
export declare const ChartDeployRecordsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing ChartDeployRecord entries, ordered by most recently updated.
     * @summary List ChartDeployRecord entries
     * @param {string} [chartRelease] Required when creating
     * @param {string} [createdAt]
     * @param {string} [exactAppVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [exactChartVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [helmfileRef] When creating, will default to the value currently held by the chart release
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsGet(chartRelease?: string, createdAt?: string, exactAppVersion?: string, exactChartVersion?: string, helmfileRef?: string, id?: number, updatedAt?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new ChartDeployRecord entry. Note that fields are immutable after creation.
     * @summary Create a new ChartDeployRecord entry
     * @param {V2controllersCreatableChartDeployRecord} body The ChartDeployRecord to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsPost(body: V2controllersCreatableChartDeployRecord, options?: any): FetchArgs;
    /**
     * Get an existing ChartDeployRecord entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartDeployRecord entry
     * @param {string} selector The ChartDeployRecord to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Validate a given ChartDeployRecord selector and provide any other selectors that would match the same ChartDeployRecord.
     * @summary List ChartDeployRecord selectors
     * @param {string} selector The selector of the ChartDeployRecord to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartDeployRecordsSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * ChartDeployRecordsApi - functional programming interface
 * @export
 */
export declare const ChartDeployRecordsApiFp: (configuration?: Configuration) => {
    /**
     * List existing ChartDeployRecord entries, ordered by most recently updated.
     * @summary List ChartDeployRecord entries
     * @param {string} [chartRelease] Required when creating
     * @param {string} [createdAt]
     * @param {string} [exactAppVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [exactChartVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [helmfileRef] When creating, will default to the value currently held by the chart release
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsGet(chartRelease?: string, createdAt?: string, exactAppVersion?: string, exactChartVersion?: string, helmfileRef?: string, id?: number, updatedAt?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersChartDeployRecord>>;
    /**
     * Create a new ChartDeployRecord entry. Note that fields are immutable after creation.
     * @summary Create a new ChartDeployRecord entry
     * @param {V2controllersCreatableChartDeployRecord} body The ChartDeployRecord to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsPost(body: V2controllersCreatableChartDeployRecord, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartDeployRecord>;
    /**
     * Get an existing ChartDeployRecord entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartDeployRecord entry
     * @param {string} selector The ChartDeployRecord to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartDeployRecord>;
    /**
     * Validate a given ChartDeployRecord selector and provide any other selectors that would match the same ChartDeployRecord.
     * @summary List ChartDeployRecord selectors
     * @param {string} selector The selector of the ChartDeployRecord to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartDeployRecordsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * ChartDeployRecordsApi - factory interface
 * @export
 */
export declare const ChartDeployRecordsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing ChartDeployRecord entries, ordered by most recently updated.
     * @summary List ChartDeployRecord entries
     * @param {string} [chartRelease] Required when creating
     * @param {string} [createdAt]
     * @param {string} [exactAppVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [exactChartVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [helmfileRef] When creating, will default to the value currently held by the chart release
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsGet(chartRelease?: string, createdAt?: string, exactAppVersion?: string, exactChartVersion?: string, helmfileRef?: string, id?: number, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChartDeployRecord[]>;
    /**
     * Create a new ChartDeployRecord entry. Note that fields are immutable after creation.
     * @summary Create a new ChartDeployRecord entry
     * @param {V2controllersCreatableChartDeployRecord} body The ChartDeployRecord to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsPost(body: V2controllersCreatableChartDeployRecord, options?: any): Promise<V2controllersChartDeployRecord>;
    /**
     * Get an existing ChartDeployRecord entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartDeployRecord entry
     * @param {string} selector The ChartDeployRecord to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartDeployRecordsSelectorGet(selector: string, options?: any): Promise<V2controllersChartDeployRecord>;
    /**
     * Validate a given ChartDeployRecord selector and provide any other selectors that would match the same ChartDeployRecord.
     * @summary List ChartDeployRecord selectors
     * @param {string} selector The selector of the ChartDeployRecord to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartDeployRecordsSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * ChartDeployRecordsApi - object-oriented interface
 * @export
 * @class ChartDeployRecordsApi
 * @extends {BaseAPI}
 */
export declare class ChartDeployRecordsApi extends BaseAPI {
    /**
     * List existing ChartDeployRecord entries, ordered by most recently updated.
     * @summary List ChartDeployRecord entries
     * @param {string} [chartRelease] Required when creating
     * @param {string} [createdAt]
     * @param {string} [exactAppVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [exactChartVersion] When creating, will default to the value currently held by the chart release
     * @param {string} [helmfileRef] When creating, will default to the value currently held by the chart release
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartDeployRecordsApi
     */
    apiV2ChartDeployRecordsGet(chartRelease?: string, createdAt?: string, exactAppVersion?: string, exactChartVersion?: string, helmfileRef?: string, id?: number, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChartDeployRecord[]>;
    /**
     * Create a new ChartDeployRecord entry. Note that fields are immutable after creation.
     * @summary Create a new ChartDeployRecord entry
     * @param {V2controllersCreatableChartDeployRecord} body The ChartDeployRecord to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartDeployRecordsApi
     */
    apiV2ChartDeployRecordsPost(body: V2controllersCreatableChartDeployRecord, options?: any): Promise<V2controllersChartDeployRecord>;
    /**
     * Get an existing ChartDeployRecord entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartDeployRecord entry
     * @param {string} selector The ChartDeployRecord to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartDeployRecordsApi
     */
    apiV2ChartDeployRecordsSelectorGet(selector: string, options?: any): Promise<V2controllersChartDeployRecord>;
    /**
     * Validate a given ChartDeployRecord selector and provide any other selectors that would match the same ChartDeployRecord.
     * @summary List ChartDeployRecord selectors
     * @param {string} selector The selector of the ChartDeployRecord to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartDeployRecordsApi
     */
    apiV2SelectorsChartDeployRecordsSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * ChartReleasesApi - fetch parameter creator
 * @export
 */
export declare const ChartReleasesApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * @summary List ChartRelease entries
     * @param {string} [chart] Required when creating
     * @param {string} [cluster] When creating, will default the environment&#x27;s default cluster, if provided. Either this or environment must be provided.
     * @param {string} [createdAt]
     * @param {string} [currentAppVersionExact]
     * @param {string} [currentChartVersionExact]
     * @param {string} [destinationType] Calculated field
     * @param {string} [environment] Either this or cluster must be provided.
     * @param {string} [helmfileRef]
     * @param {number} [id]
     * @param {string} [name] When creating, will be calculated if left empty
     * @param {string} [namespace] When creating, will default to the environment&#x27;s default namespace, if provided
     * @param {string} [targetAppVersionBranch] When creating, will default to the app&#x27;s main branch if it has one recorded
     * @param {string} [targetAppVersionCommit]
     * @param {string} [targetAppVersionExact]
     * @param {string} [targetAppVersionUse] When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @param {string} [targetChartVersionExact]
     * @param {string} [targetChartVersionUse] When creating, will default to latest unless an exact target chart version is provided
     * @param {string} [thelmaMode]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesGet(chart?: string, cluster?: string, createdAt?: string, currentAppVersionExact?: string, currentChartVersionExact?: string, destinationType?: string, environment?: string, helmfileRef?: string, id?: number, name?: string, namespace?: string, targetAppVersionBranch?: string, targetAppVersionCommit?: string, targetAppVersionExact?: string, targetAppVersionUse?: string, targetChartVersionExact?: string, targetChartVersionUse?: string, thelmaMode?: string, updatedAt?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new ChartRelease entry
     * @param {V2controllersCreatableChartRelease} body The ChartRelease to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesPost(body: V2controllersCreatableChartRelease, options?: any): FetchArgs;
    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Delete a ChartRelease entry
     * @param {string} selector The ChartRelease to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorDelete(selector: string, options?: any): FetchArgs;
    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Get a ChartRelease entry
     * @param {string} selector The ChartRelease to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a ChartRelease entry
     * @param {V2controllersEditableChartRelease} body The edits to make to the ChartRelease
     * @param {string} selector The ChartRelease to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorPatch(body: V2controllersEditableChartRelease, selector: string, options?: any): FetchArgs;
    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * @summary List ChartRelease selectors
     * @param {string} selector The selector of the ChartRelease to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartReleasesSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * ChartReleasesApi - functional programming interface
 * @export
 */
export declare const ChartReleasesApiFp: (configuration?: Configuration) => {
    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * @summary List ChartRelease entries
     * @param {string} [chart] Required when creating
     * @param {string} [cluster] When creating, will default the environment&#x27;s default cluster, if provided. Either this or environment must be provided.
     * @param {string} [createdAt]
     * @param {string} [currentAppVersionExact]
     * @param {string} [currentChartVersionExact]
     * @param {string} [destinationType] Calculated field
     * @param {string} [environment] Either this or cluster must be provided.
     * @param {string} [helmfileRef]
     * @param {number} [id]
     * @param {string} [name] When creating, will be calculated if left empty
     * @param {string} [namespace] When creating, will default to the environment&#x27;s default namespace, if provided
     * @param {string} [targetAppVersionBranch] When creating, will default to the app&#x27;s main branch if it has one recorded
     * @param {string} [targetAppVersionCommit]
     * @param {string} [targetAppVersionExact]
     * @param {string} [targetAppVersionUse] When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @param {string} [targetChartVersionExact]
     * @param {string} [targetChartVersionUse] When creating, will default to latest unless an exact target chart version is provided
     * @param {string} [thelmaMode]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesGet(chart?: string, cluster?: string, createdAt?: string, currentAppVersionExact?: string, currentChartVersionExact?: string, destinationType?: string, environment?: string, helmfileRef?: string, id?: number, name?: string, namespace?: string, targetAppVersionBranch?: string, targetAppVersionCommit?: string, targetAppVersionExact?: string, targetAppVersionUse?: string, targetChartVersionExact?: string, targetChartVersionUse?: string, thelmaMode?: string, updatedAt?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersChartRelease>>;
    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new ChartRelease entry
     * @param {V2controllersCreatableChartRelease} body The ChartRelease to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesPost(body: V2controllersCreatableChartRelease, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartRelease>;
    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Delete a ChartRelease entry
     * @param {string} selector The ChartRelease to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorDelete(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartRelease>;
    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Get a ChartRelease entry
     * @param {string} selector The ChartRelease to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartRelease>;
    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a ChartRelease entry
     * @param {V2controllersEditableChartRelease} body The edits to make to the ChartRelease
     * @param {string} selector The ChartRelease to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorPatch(body: V2controllersEditableChartRelease, selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartRelease>;
    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * @summary List ChartRelease selectors
     * @param {string} selector The selector of the ChartRelease to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartReleasesSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * ChartReleasesApi - factory interface
 * @export
 */
export declare const ChartReleasesApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * @summary List ChartRelease entries
     * @param {string} [chart] Required when creating
     * @param {string} [cluster] When creating, will default the environment&#x27;s default cluster, if provided. Either this or environment must be provided.
     * @param {string} [createdAt]
     * @param {string} [currentAppVersionExact]
     * @param {string} [currentChartVersionExact]
     * @param {string} [destinationType] Calculated field
     * @param {string} [environment] Either this or cluster must be provided.
     * @param {string} [helmfileRef]
     * @param {number} [id]
     * @param {string} [name] When creating, will be calculated if left empty
     * @param {string} [namespace] When creating, will default to the environment&#x27;s default namespace, if provided
     * @param {string} [targetAppVersionBranch] When creating, will default to the app&#x27;s main branch if it has one recorded
     * @param {string} [targetAppVersionCommit]
     * @param {string} [targetAppVersionExact]
     * @param {string} [targetAppVersionUse] When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @param {string} [targetChartVersionExact]
     * @param {string} [targetChartVersionUse] When creating, will default to latest unless an exact target chart version is provided
     * @param {string} [thelmaMode]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesGet(chart?: string, cluster?: string, createdAt?: string, currentAppVersionExact?: string, currentChartVersionExact?: string, destinationType?: string, environment?: string, helmfileRef?: string, id?: number, name?: string, namespace?: string, targetAppVersionBranch?: string, targetAppVersionCommit?: string, targetAppVersionExact?: string, targetAppVersionUse?: string, targetChartVersionExact?: string, targetChartVersionUse?: string, thelmaMode?: string, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChartRelease[]>;
    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new ChartRelease entry
     * @param {V2controllersCreatableChartRelease} body The ChartRelease to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesPost(body: V2controllersCreatableChartRelease, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Delete a ChartRelease entry
     * @param {string} selector The ChartRelease to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorDelete(selector: string, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Get a ChartRelease entry
     * @param {string} selector The ChartRelease to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorGet(selector: string, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a ChartRelease entry
     * @param {V2controllersEditableChartRelease} body The edits to make to the ChartRelease
     * @param {string} selector The ChartRelease to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartReleasesSelectorPatch(body: V2controllersEditableChartRelease, selector: string, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * @summary List ChartRelease selectors
     * @param {string} selector The selector of the ChartRelease to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartReleasesSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * ChartReleasesApi - object-oriented interface
 * @export
 * @class ChartReleasesApi
 * @extends {BaseAPI}
 */
export declare class ChartReleasesApi extends BaseAPI {
    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * @summary List ChartRelease entries
     * @param {string} [chart] Required when creating
     * @param {string} [cluster] When creating, will default the environment&#x27;s default cluster, if provided. Either this or environment must be provided.
     * @param {string} [createdAt]
     * @param {string} [currentAppVersionExact]
     * @param {string} [currentChartVersionExact]
     * @param {string} [destinationType] Calculated field
     * @param {string} [environment] Either this or cluster must be provided.
     * @param {string} [helmfileRef]
     * @param {number} [id]
     * @param {string} [name] When creating, will be calculated if left empty
     * @param {string} [namespace] When creating, will default to the environment&#x27;s default namespace, if provided
     * @param {string} [targetAppVersionBranch] When creating, will default to the app&#x27;s main branch if it has one recorded
     * @param {string} [targetAppVersionCommit]
     * @param {string} [targetAppVersionExact]
     * @param {string} [targetAppVersionUse] When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @param {string} [targetChartVersionExact]
     * @param {string} [targetChartVersionUse] When creating, will default to latest unless an exact target chart version is provided
     * @param {string} [thelmaMode]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartReleasesApi
     */
    apiV2ChartReleasesGet(chart?: string, cluster?: string, createdAt?: string, currentAppVersionExact?: string, currentChartVersionExact?: string, destinationType?: string, environment?: string, helmfileRef?: string, id?: number, name?: string, namespace?: string, targetAppVersionBranch?: string, targetAppVersionCommit?: string, targetAppVersionExact?: string, targetAppVersionUse?: string, targetChartVersionExact?: string, targetChartVersionUse?: string, thelmaMode?: string, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChartRelease[]>;
    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new ChartRelease entry
     * @param {V2controllersCreatableChartRelease} body The ChartRelease to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartReleasesApi
     */
    apiV2ChartReleasesPost(body: V2controllersCreatableChartRelease, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Delete a ChartRelease entry
     * @param {string} selector The ChartRelease to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartReleasesApi
     */
    apiV2ChartReleasesSelectorDelete(selector: string, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * @summary Get a ChartRelease entry
     * @param {string} selector The ChartRelease to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartReleasesApi
     */
    apiV2ChartReleasesSelectorGet(selector: string, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a ChartRelease entry
     * @param {V2controllersEditableChartRelease} body The edits to make to the ChartRelease
     * @param {string} selector The ChartRelease to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartReleasesApi
     */
    apiV2ChartReleasesSelectorPatch(body: V2controllersEditableChartRelease, selector: string, options?: any): Promise<V2controllersChartRelease>;
    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * @summary List ChartRelease selectors
     * @param {string} selector The selector of the ChartRelease to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartReleasesApi
     */
    apiV2SelectorsChartReleasesSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * ChartVersionsApi - fetch parameter creator
 * @export
 */
export declare const ChartVersionsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing ChartVersion entries, ordered by most recently updated.
     * @summary List ChartVersion entries
     * @param {string} [chart] Required when creating
     * @param {string} [chartVersion] Required when creating
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsGet(chart?: string, chartVersion?: string, createdAt?: string, id?: number, updatedAt?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new ChartVersion entry. Note that fields are immutable after creation.
     * @summary Create a new ChartVersion entry
     * @param {V2controllersCreatableChartVersion} body The ChartVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsPost(body: V2controllersCreatableChartVersion, options?: any): FetchArgs;
    /**
     * Get an existing ChartVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartVersion entry
     * @param {string} selector The ChartVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Validate a given ChartVersion selector and provide any other selectors that would match the same ChartVersion.
     * @summary List ChartVersion selectors
     * @param {string} selector The selector of the ChartVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartVersionsSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * ChartVersionsApi - functional programming interface
 * @export
 */
export declare const ChartVersionsApiFp: (configuration?: Configuration) => {
    /**
     * List existing ChartVersion entries, ordered by most recently updated.
     * @summary List ChartVersion entries
     * @param {string} [chart] Required when creating
     * @param {string} [chartVersion] Required when creating
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsGet(chart?: string, chartVersion?: string, createdAt?: string, id?: number, updatedAt?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersChartVersion>>;
    /**
     * Create a new ChartVersion entry. Note that fields are immutable after creation.
     * @summary Create a new ChartVersion entry
     * @param {V2controllersCreatableChartVersion} body The ChartVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsPost(body: V2controllersCreatableChartVersion, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartVersion>;
    /**
     * Get an existing ChartVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartVersion entry
     * @param {string} selector The ChartVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChartVersion>;
    /**
     * Validate a given ChartVersion selector and provide any other selectors that would match the same ChartVersion.
     * @summary List ChartVersion selectors
     * @param {string} selector The selector of the ChartVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartVersionsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * ChartVersionsApi - factory interface
 * @export
 */
export declare const ChartVersionsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing ChartVersion entries, ordered by most recently updated.
     * @summary List ChartVersion entries
     * @param {string} [chart] Required when creating
     * @param {string} [chartVersion] Required when creating
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsGet(chart?: string, chartVersion?: string, createdAt?: string, id?: number, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChartVersion[]>;
    /**
     * Create a new ChartVersion entry. Note that fields are immutable after creation.
     * @summary Create a new ChartVersion entry
     * @param {V2controllersCreatableChartVersion} body The ChartVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsPost(body: V2controllersCreatableChartVersion, options?: any): Promise<V2controllersChartVersion>;
    /**
     * Get an existing ChartVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartVersion entry
     * @param {string} selector The ChartVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartVersionsSelectorGet(selector: string, options?: any): Promise<V2controllersChartVersion>;
    /**
     * Validate a given ChartVersion selector and provide any other selectors that would match the same ChartVersion.
     * @summary List ChartVersion selectors
     * @param {string} selector The selector of the ChartVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartVersionsSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * ChartVersionsApi - object-oriented interface
 * @export
 * @class ChartVersionsApi
 * @extends {BaseAPI}
 */
export declare class ChartVersionsApi extends BaseAPI {
    /**
     * List existing ChartVersion entries, ordered by most recently updated.
     * @summary List ChartVersion entries
     * @param {string} [chart] Required when creating
     * @param {string} [chartVersion] Required when creating
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartVersionsApi
     */
    apiV2ChartVersionsGet(chart?: string, chartVersion?: string, createdAt?: string, id?: number, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChartVersion[]>;
    /**
     * Create a new ChartVersion entry. Note that fields are immutable after creation.
     * @summary Create a new ChartVersion entry
     * @param {V2controllersCreatableChartVersion} body The ChartVersion to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartVersionsApi
     */
    apiV2ChartVersionsPost(body: V2controllersCreatableChartVersion, options?: any): Promise<V2controllersChartVersion>;
    /**
     * Get an existing ChartVersion entry via one its \"selector\"--its numeric ID.
     * @summary Get a ChartVersion entry
     * @param {string} selector The ChartVersion to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartVersionsApi
     */
    apiV2ChartVersionsSelectorGet(selector: string, options?: any): Promise<V2controllersChartVersion>;
    /**
     * Validate a given ChartVersion selector and provide any other selectors that would match the same ChartVersion.
     * @summary List ChartVersion selectors
     * @param {string} selector The selector of the ChartVersion to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartVersionsApi
     */
    apiV2SelectorsChartVersionsSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * ChartsApi - fetch parameter creator
 * @export
 */
export declare const ChartsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing Chart entries, ordered by most recently updated.
     * @summary List Chart entries
     * @param {string} [appImageGitMainBranch]
     * @param {string} [appImageGitRepo]
     * @param {string} [chartRepo]
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [name] Required when creating
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsGet(appImageGitMainBranch?: string, appImageGitRepo?: string, chartRepo?: string, createdAt?: string, id?: number, name?: string, updatedAt?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new Chart entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Chart entry
     * @param {V2controllersCreatableChart} body The Chart to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsPost(body: V2controllersCreatableChart, options?: any): FetchArgs;
    /**
     * Delete an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Chart entry
     * @param {string} selector The Chart to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorDelete(selector: string, options?: any): FetchArgs;
    /**
     * Get an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Chart entry
     * @param {string} selector The Chart to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Edit an existing Chart entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Chart entry
     * @param {V2controllersEditableChart} body The edits to make to the Chart
     * @param {string} selector The Chart to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorPatch(body: V2controllersEditableChart, selector: string, options?: any): FetchArgs;
    /**
     * Validate a given Chart selector and provide any other selectors that would match the same Chart.
     * @summary List Chart selectors
     * @param {string} selector The selector of the Chart to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartsSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * ChartsApi - functional programming interface
 * @export
 */
export declare const ChartsApiFp: (configuration?: Configuration) => {
    /**
     * List existing Chart entries, ordered by most recently updated.
     * @summary List Chart entries
     * @param {string} [appImageGitMainBranch]
     * @param {string} [appImageGitRepo]
     * @param {string} [chartRepo]
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [name] Required when creating
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsGet(appImageGitMainBranch?: string, appImageGitRepo?: string, chartRepo?: string, createdAt?: string, id?: number, name?: string, updatedAt?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersChart>>;
    /**
     * Create a new Chart entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Chart entry
     * @param {V2controllersCreatableChart} body The Chart to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsPost(body: V2controllersCreatableChart, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChart>;
    /**
     * Delete an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Chart entry
     * @param {string} selector The Chart to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorDelete(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChart>;
    /**
     * Get an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Chart entry
     * @param {string} selector The Chart to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChart>;
    /**
     * Edit an existing Chart entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Chart entry
     * @param {V2controllersEditableChart} body The edits to make to the Chart
     * @param {string} selector The Chart to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorPatch(body: V2controllersEditableChart, selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersChart>;
    /**
     * Validate a given Chart selector and provide any other selectors that would match the same Chart.
     * @summary List Chart selectors
     * @param {string} selector The selector of the Chart to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * ChartsApi - factory interface
 * @export
 */
export declare const ChartsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing Chart entries, ordered by most recently updated.
     * @summary List Chart entries
     * @param {string} [appImageGitMainBranch]
     * @param {string} [appImageGitRepo]
     * @param {string} [chartRepo]
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [name] Required when creating
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsGet(appImageGitMainBranch?: string, appImageGitRepo?: string, chartRepo?: string, createdAt?: string, id?: number, name?: string, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChart[]>;
    /**
     * Create a new Chart entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Chart entry
     * @param {V2controllersCreatableChart} body The Chart to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsPost(body: V2controllersCreatableChart, options?: any): Promise<V2controllersChart>;
    /**
     * Delete an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Chart entry
     * @param {string} selector The Chart to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorDelete(selector: string, options?: any): Promise<V2controllersChart>;
    /**
     * Get an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Chart entry
     * @param {string} selector The Chart to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorGet(selector: string, options?: any): Promise<V2controllersChart>;
    /**
     * Edit an existing Chart entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Chart entry
     * @param {V2controllersEditableChart} body The edits to make to the Chart
     * @param {string} selector The Chart to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ChartsSelectorPatch(body: V2controllersEditableChart, selector: string, options?: any): Promise<V2controllersChart>;
    /**
     * Validate a given Chart selector and provide any other selectors that would match the same Chart.
     * @summary List Chart selectors
     * @param {string} selector The selector of the Chart to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsChartsSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * ChartsApi - object-oriented interface
 * @export
 * @class ChartsApi
 * @extends {BaseAPI}
 */
export declare class ChartsApi extends BaseAPI {
    /**
     * List existing Chart entries, ordered by most recently updated.
     * @summary List Chart entries
     * @param {string} [appImageGitMainBranch]
     * @param {string} [appImageGitRepo]
     * @param {string} [chartRepo]
     * @param {string} [createdAt]
     * @param {number} [id]
     * @param {string} [name] Required when creating
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV2ChartsGet(appImageGitMainBranch?: string, appImageGitRepo?: string, chartRepo?: string, createdAt?: string, id?: number, name?: string, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersChart[]>;
    /**
     * Create a new Chart entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Chart entry
     * @param {V2controllersCreatableChart} body The Chart to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV2ChartsPost(body: V2controllersCreatableChart, options?: any): Promise<V2controllersChart>;
    /**
     * Delete an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Chart entry
     * @param {string} selector The Chart to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV2ChartsSelectorDelete(selector: string, options?: any): Promise<V2controllersChart>;
    /**
     * Get an existing Chart entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Chart entry
     * @param {string} selector The Chart to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV2ChartsSelectorGet(selector: string, options?: any): Promise<V2controllersChart>;
    /**
     * Edit an existing Chart entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Chart entry
     * @param {V2controllersEditableChart} body The edits to make to the Chart
     * @param {string} selector The Chart to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV2ChartsSelectorPatch(body: V2controllersEditableChart, selector: string, options?: any): Promise<V2controllersChart>;
    /**
     * Validate a given Chart selector and provide any other selectors that would match the same Chart.
     * @summary List Chart selectors
     * @param {string} selector The selector of the Chart to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartsApi
     */
    apiV2SelectorsChartsSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * ClustersApi - fetch parameter creator
 * @export
 */
export declare const ClustersApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing Cluster entries, ordered by most recently updated.
     * @summary List Cluster entries
     * @param {string} name Required when creating
     * @param {string} [address] Required when creating
     * @param {string} [azureSubscription] Required when creating if providers is &#x27;azure&#x27;
     * @param {string} [base] Required when creating
     * @param {string} [createdAt]
     * @param {string} [googleProject] Required when creating if provider is &#x27;google&#x27;
     * @param {number} [id]
     * @param {string} [provider]
     * @param {boolean} [requiresSuitability]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersGet(name: string, address?: string, azureSubscription?: string, base?: string, createdAt?: string, googleProject?: string, id?: number, provider?: string, requiresSuitability?: boolean, updatedAt?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new Cluster entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Cluster entry
     * @param {V2controllersCreatableCluster} body The Cluster to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersPost(body: V2controllersCreatableCluster, options?: any): FetchArgs;
    /**
     * Delete an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Cluster entry
     * @param {string} selector The Cluster to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorDelete(selector: string, options?: any): FetchArgs;
    /**
     * Get an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Cluster entry
     * @param {string} selector The Cluster to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Edit an existing Cluster entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Cluster entry
     * @param {V2controllersEditableCluster} body The edits to make to the Cluster
     * @param {string} selector The Cluster to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorPatch(body: V2controllersEditableCluster, selector: string, options?: any): FetchArgs;
    /**
     * Validate a given Cluster selector and provide any other selectors that would match the same Cluster.
     * @summary List Cluster selectors
     * @param {string} selector The selector of the Cluster to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsClustersSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * ClustersApi - functional programming interface
 * @export
 */
export declare const ClustersApiFp: (configuration?: Configuration) => {
    /**
     * List existing Cluster entries, ordered by most recently updated.
     * @summary List Cluster entries
     * @param {string} name Required when creating
     * @param {string} [address] Required when creating
     * @param {string} [azureSubscription] Required when creating if providers is &#x27;azure&#x27;
     * @param {string} [base] Required when creating
     * @param {string} [createdAt]
     * @param {string} [googleProject] Required when creating if provider is &#x27;google&#x27;
     * @param {number} [id]
     * @param {string} [provider]
     * @param {boolean} [requiresSuitability]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersGet(name: string, address?: string, azureSubscription?: string, base?: string, createdAt?: string, googleProject?: string, id?: number, provider?: string, requiresSuitability?: boolean, updatedAt?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersCluster>>;
    /**
     * Create a new Cluster entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Cluster entry
     * @param {V2controllersCreatableCluster} body The Cluster to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersPost(body: V2controllersCreatableCluster, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersCluster>;
    /**
     * Delete an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Cluster entry
     * @param {string} selector The Cluster to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorDelete(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersCluster>;
    /**
     * Get an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Cluster entry
     * @param {string} selector The Cluster to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersCluster>;
    /**
     * Edit an existing Cluster entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Cluster entry
     * @param {V2controllersEditableCluster} body The edits to make to the Cluster
     * @param {string} selector The Cluster to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorPatch(body: V2controllersEditableCluster, selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersCluster>;
    /**
     * Validate a given Cluster selector and provide any other selectors that would match the same Cluster.
     * @summary List Cluster selectors
     * @param {string} selector The selector of the Cluster to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsClustersSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * ClustersApi - factory interface
 * @export
 */
export declare const ClustersApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing Cluster entries, ordered by most recently updated.
     * @summary List Cluster entries
     * @param {string} name Required when creating
     * @param {string} [address] Required when creating
     * @param {string} [azureSubscription] Required when creating if providers is &#x27;azure&#x27;
     * @param {string} [base] Required when creating
     * @param {string} [createdAt]
     * @param {string} [googleProject] Required when creating if provider is &#x27;google&#x27;
     * @param {number} [id]
     * @param {string} [provider]
     * @param {boolean} [requiresSuitability]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersGet(name: string, address?: string, azureSubscription?: string, base?: string, createdAt?: string, googleProject?: string, id?: number, provider?: string, requiresSuitability?: boolean, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersCluster[]>;
    /**
     * Create a new Cluster entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Cluster entry
     * @param {V2controllersCreatableCluster} body The Cluster to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersPost(body: V2controllersCreatableCluster, options?: any): Promise<V2controllersCluster>;
    /**
     * Delete an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Cluster entry
     * @param {string} selector The Cluster to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorDelete(selector: string, options?: any): Promise<V2controllersCluster>;
    /**
     * Get an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Cluster entry
     * @param {string} selector The Cluster to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorGet(selector: string, options?: any): Promise<V2controllersCluster>;
    /**
     * Edit an existing Cluster entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Cluster entry
     * @param {V2controllersEditableCluster} body The edits to make to the Cluster
     * @param {string} selector The Cluster to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2ClustersSelectorPatch(body: V2controllersEditableCluster, selector: string, options?: any): Promise<V2controllersCluster>;
    /**
     * Validate a given Cluster selector and provide any other selectors that would match the same Cluster.
     * @summary List Cluster selectors
     * @param {string} selector The selector of the Cluster to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsClustersSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * ClustersApi - object-oriented interface
 * @export
 * @class ClustersApi
 * @extends {BaseAPI}
 */
export declare class ClustersApi extends BaseAPI {
    /**
     * List existing Cluster entries, ordered by most recently updated.
     * @summary List Cluster entries
     * @param {string} name Required when creating
     * @param {string} [address] Required when creating
     * @param {string} [azureSubscription] Required when creating if providers is &#x27;azure&#x27;
     * @param {string} [base] Required when creating
     * @param {string} [createdAt]
     * @param {string} [googleProject] Required when creating if provider is &#x27;google&#x27;
     * @param {number} [id]
     * @param {string} [provider]
     * @param {boolean} [requiresSuitability]
     * @param {string} [updatedAt]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    apiV2ClustersGet(name: string, address?: string, azureSubscription?: string, base?: string, createdAt?: string, googleProject?: string, id?: number, provider?: string, requiresSuitability?: boolean, updatedAt?: string, limit?: number, options?: any): Promise<V2controllersCluster[]>;
    /**
     * Create a new Cluster entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * @summary Create a new Cluster entry
     * @param {V2controllersCreatableCluster} body The Cluster to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    apiV2ClustersPost(body: V2controllersCreatableCluster, options?: any): Promise<V2controllersCluster>;
    /**
     * Delete an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Cluster entry
     * @param {string} selector The Cluster to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    apiV2ClustersSelectorDelete(selector: string, options?: any): Promise<V2controllersCluster>;
    /**
     * Get an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Cluster entry
     * @param {string} selector The Cluster to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    apiV2ClustersSelectorGet(selector: string, options?: any): Promise<V2controllersCluster>;
    /**
     * Edit an existing Cluster entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Cluster entry
     * @param {V2controllersEditableCluster} body The edits to make to the Cluster
     * @param {string} selector The Cluster to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    apiV2ClustersSelectorPatch(body: V2controllersEditableCluster, selector: string, options?: any): Promise<V2controllersCluster>;
    /**
     * Validate a given Cluster selector and provide any other selectors that would match the same Cluster.
     * @summary List Cluster selectors
     * @param {string} selector The selector of the Cluster to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClustersApi
     */
    apiV2SelectorsClustersSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * EnvironmentsApi - fetch parameter creator
 * @export
 */
export declare const EnvironmentsApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * List existing Environment entries, ordered by most recently updated.
     * @summary List Environment entries
     * @param {string} [base] Required when creating
     * @param {boolean} [chartReleasesFromTemplate] Upon creation of a dynamic environment, if this is true the template&#x27;s chart releases will be copied to the new environment
     * @param {string} [createdAt]
     * @param {string} [defaultCluster]
     * @param {string} [defaultNamespace]
     * @param {number} [id]
     * @param {string} [lifecycle]
     * @param {string} [name] When creating, will be calculated if dynamic, required otherwise
     * @param {string} [owner] When creating, will be set to your email
     * @param {boolean} [requiresSuitability]
     * @param {string} [templateEnvironment] Required for dynamic environments
     * @param {string} [updatedAt]
     * @param {string} [valuesName]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsGet(base?: string, chartReleasesFromTemplate?: boolean, createdAt?: string, defaultCluster?: string, defaultNamespace?: string, id?: number, lifecycle?: string, name?: string, owner?: string, requiresSuitability?: boolean, templateEnvironment?: string, updatedAt?: string, valuesName?: string, limit?: number, options?: any): FetchArgs;
    /**
     * Create a new Environment entry. Note that some fields are immutable after creation; /edit lists mutable fields. Creating a dynamic environment based on a template will also copy ChartReleases from the template.
     * @summary Create a new Environment entry
     * @param {V2controllersCreatableEnvironment} body The Environment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsPost(body: V2controllersCreatableEnvironment, options?: any): FetchArgs;
    /**
     * Delete an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Environment entry
     * @param {string} selector The Environment to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorDelete(selector: string, options?: any): FetchArgs;
    /**
     * Get an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Environment entry
     * @param {string} selector The Environment to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorGet(selector: string, options?: any): FetchArgs;
    /**
     * Edit an existing Environment entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Environment entry
     * @param {V2controllersEditableEnvironment} body The edits to make to the Environment
     * @param {string} selector The Environment to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorPatch(body: V2controllersEditableEnvironment, selector: string, options?: any): FetchArgs;
    /**
     * Validate a given Environment selector and provide any other selectors that would match the same Environment.
     * @summary List Environment selectors
     * @param {string} selector The selector of the Environment to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsEnvironmentsSelectorGet(selector: string, options?: any): FetchArgs;
};
/**
 * EnvironmentsApi - functional programming interface
 * @export
 */
export declare const EnvironmentsApiFp: (configuration?: Configuration) => {
    /**
     * List existing Environment entries, ordered by most recently updated.
     * @summary List Environment entries
     * @param {string} [base] Required when creating
     * @param {boolean} [chartReleasesFromTemplate] Upon creation of a dynamic environment, if this is true the template&#x27;s chart releases will be copied to the new environment
     * @param {string} [createdAt]
     * @param {string} [defaultCluster]
     * @param {string} [defaultNamespace]
     * @param {number} [id]
     * @param {string} [lifecycle]
     * @param {string} [name] When creating, will be calculated if dynamic, required otherwise
     * @param {string} [owner] When creating, will be set to your email
     * @param {boolean} [requiresSuitability]
     * @param {string} [templateEnvironment] Required for dynamic environments
     * @param {string} [updatedAt]
     * @param {string} [valuesName]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsGet(base?: string, chartReleasesFromTemplate?: boolean, createdAt?: string, defaultCluster?: string, defaultNamespace?: string, id?: number, lifecycle?: string, name?: string, owner?: string, requiresSuitability?: boolean, templateEnvironment?: string, updatedAt?: string, valuesName?: string, limit?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<V2controllersEnvironment>>;
    /**
     * Create a new Environment entry. Note that some fields are immutable after creation; /edit lists mutable fields. Creating a dynamic environment based on a template will also copy ChartReleases from the template.
     * @summary Create a new Environment entry
     * @param {V2controllersCreatableEnvironment} body The Environment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsPost(body: V2controllersCreatableEnvironment, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersEnvironment>;
    /**
     * Delete an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Environment entry
     * @param {string} selector The Environment to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorDelete(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersEnvironment>;
    /**
     * Get an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Environment entry
     * @param {string} selector The Environment to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersEnvironment>;
    /**
     * Edit an existing Environment entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Environment entry
     * @param {V2controllersEditableEnvironment} body The edits to make to the Environment
     * @param {string} selector The Environment to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorPatch(body: V2controllersEditableEnvironment, selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V2controllersEnvironment>;
    /**
     * Validate a given Environment selector and provide any other selectors that would match the same Environment.
     * @summary List Environment selectors
     * @param {string} selector The selector of the Environment to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsEnvironmentsSelectorGet(selector: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<string>>;
};
/**
 * EnvironmentsApi - factory interface
 * @export
 */
export declare const EnvironmentsApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * List existing Environment entries, ordered by most recently updated.
     * @summary List Environment entries
     * @param {string} [base] Required when creating
     * @param {boolean} [chartReleasesFromTemplate] Upon creation of a dynamic environment, if this is true the template&#x27;s chart releases will be copied to the new environment
     * @param {string} [createdAt]
     * @param {string} [defaultCluster]
     * @param {string} [defaultNamespace]
     * @param {number} [id]
     * @param {string} [lifecycle]
     * @param {string} [name] When creating, will be calculated if dynamic, required otherwise
     * @param {string} [owner] When creating, will be set to your email
     * @param {boolean} [requiresSuitability]
     * @param {string} [templateEnvironment] Required for dynamic environments
     * @param {string} [updatedAt]
     * @param {string} [valuesName]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsGet(base?: string, chartReleasesFromTemplate?: boolean, createdAt?: string, defaultCluster?: string, defaultNamespace?: string, id?: number, lifecycle?: string, name?: string, owner?: string, requiresSuitability?: boolean, templateEnvironment?: string, updatedAt?: string, valuesName?: string, limit?: number, options?: any): Promise<V2controllersEnvironment[]>;
    /**
     * Create a new Environment entry. Note that some fields are immutable after creation; /edit lists mutable fields. Creating a dynamic environment based on a template will also copy ChartReleases from the template.
     * @summary Create a new Environment entry
     * @param {V2controllersCreatableEnvironment} body The Environment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsPost(body: V2controllersCreatableEnvironment, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Delete an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Environment entry
     * @param {string} selector The Environment to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorDelete(selector: string, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Get an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Environment entry
     * @param {string} selector The Environment to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorGet(selector: string, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Edit an existing Environment entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Environment entry
     * @param {V2controllersEditableEnvironment} body The edits to make to the Environment
     * @param {string} selector The Environment to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2EnvironmentsSelectorPatch(body: V2controllersEditableEnvironment, selector: string, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Validate a given Environment selector and provide any other selectors that would match the same Environment.
     * @summary List Environment selectors
     * @param {string} selector The selector of the Environment to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV2SelectorsEnvironmentsSelectorGet(selector: string, options?: any): Promise<string[]>;
};
/**
 * EnvironmentsApi - object-oriented interface
 * @export
 * @class EnvironmentsApi
 * @extends {BaseAPI}
 */
export declare class EnvironmentsApi extends BaseAPI {
    /**
     * List existing Environment entries, ordered by most recently updated.
     * @summary List Environment entries
     * @param {string} [base] Required when creating
     * @param {boolean} [chartReleasesFromTemplate] Upon creation of a dynamic environment, if this is true the template&#x27;s chart releases will be copied to the new environment
     * @param {string} [createdAt]
     * @param {string} [defaultCluster]
     * @param {string} [defaultNamespace]
     * @param {number} [id]
     * @param {string} [lifecycle]
     * @param {string} [name] When creating, will be calculated if dynamic, required otherwise
     * @param {string} [owner] When creating, will be set to your email
     * @param {boolean} [requiresSuitability]
     * @param {string} [templateEnvironment] Required for dynamic environments
     * @param {string} [updatedAt]
     * @param {string} [valuesName]
     * @param {number} [limit] An optional limit to the number of entries returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    apiV2EnvironmentsGet(base?: string, chartReleasesFromTemplate?: boolean, createdAt?: string, defaultCluster?: string, defaultNamespace?: string, id?: number, lifecycle?: string, name?: string, owner?: string, requiresSuitability?: boolean, templateEnvironment?: string, updatedAt?: string, valuesName?: string, limit?: number, options?: any): Promise<V2controllersEnvironment[]>;
    /**
     * Create a new Environment entry. Note that some fields are immutable after creation; /edit lists mutable fields. Creating a dynamic environment based on a template will also copy ChartReleases from the template.
     * @summary Create a new Environment entry
     * @param {V2controllersCreatableEnvironment} body The Environment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    apiV2EnvironmentsPost(body: V2controllersCreatableEnvironment, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Delete an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Delete a Environment entry
     * @param {string} selector The Environment to delete&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    apiV2EnvironmentsSelectorDelete(selector: string, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Get an existing Environment entry via one of its \"selectors\": name or numeric ID.
     * @summary Get a Environment entry
     * @param {string} selector The Environment to get&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    apiV2EnvironmentsSelectorGet(selector: string, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Edit an existing Environment entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * @summary Edit a Environment entry
     * @param {V2controllersEditableEnvironment} body The edits to make to the Environment
     * @param {string} selector The Environment to edit&#x27;s selector: name or numeric ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    apiV2EnvironmentsSelectorPatch(body: V2controllersEditableEnvironment, selector: string, options?: any): Promise<V2controllersEnvironment>;
    /**
     * Validate a given Environment selector and provide any other selectors that would match the same Environment.
     * @summary List Environment selectors
     * @param {string} selector The selector of the Environment to list other selectors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentsApi
     */
    apiV2SelectorsEnvironmentsSelectorGet(selector: string, options?: any): Promise<string[]>;
}
/**
 * MiscApi - fetch parameter creator
 * @export
 */
export declare const MiscApiFetchParamCreator: (configuration?: Configuration) => {
    /**
     * Get Sherlock's understanding of the calling user based on IAP and the Firecloud.org Google Workspace organization.
     * @summary Get information about the calling user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myUserGet(options?: any): FetchArgs;
    /**
     * Get Sherlock's current status. Right now, this endpoint always returned OK (if the server is online). This endpoint is acceptable to use for a readiness check.
     * @summary Get Sherlock's current status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: any): FetchArgs;
    /**
     * Get the build version of this Sherlock instance.
     * @summary Get Sherlock's own current version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): FetchArgs;
};
/**
 * MiscApi - functional programming interface
 * @export
 */
export declare const MiscApiFp: (configuration?: Configuration) => {
    /**
     * Get Sherlock's understanding of the calling user based on IAP and the Firecloud.org Google Workspace organization.
     * @summary Get information about the calling user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myUserGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MiscMyUserResponse>;
    /**
     * Get Sherlock's current status. Right now, this endpoint always returned OK (if the server is online). This endpoint is acceptable to use for a readiness check.
     * @summary Get Sherlock's current status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MiscStatusResponse>;
    /**
     * Get the build version of this Sherlock instance.
     * @summary Get Sherlock's own current version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MiscVersionResponse>;
};
/**
 * MiscApi - factory interface
 * @export
 */
export declare const MiscApiFactory: (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) => {
    /**
     * Get Sherlock's understanding of the calling user based on IAP and the Firecloud.org Google Workspace organization.
     * @summary Get information about the calling user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myUserGet(options?: any): Promise<MiscMyUserResponse>;
    /**
     * Get Sherlock's current status. Right now, this endpoint always returned OK (if the server is online). This endpoint is acceptable to use for a readiness check.
     * @summary Get Sherlock's current status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusGet(options?: any): Promise<MiscStatusResponse>;
    /**
     * Get the build version of this Sherlock instance.
     * @summary Get Sherlock's own current version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): Promise<MiscVersionResponse>;
};
/**
 * MiscApi - object-oriented interface
 * @export
 * @class MiscApi
 * @extends {BaseAPI}
 */
export declare class MiscApi extends BaseAPI {
    /**
     * Get Sherlock's understanding of the calling user based on IAP and the Firecloud.org Google Workspace organization.
     * @summary Get information about the calling user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    myUserGet(options?: any): Promise<MiscMyUserResponse>;
    /**
     * Get Sherlock's current status. Right now, this endpoint always returned OK (if the server is online). This endpoint is acceptable to use for a readiness check.
     * @summary Get Sherlock's current status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    statusGet(options?: any): Promise<MiscStatusResponse>;
    /**
     * Get the build version of this Sherlock instance.
     * @summary Get Sherlock's own current version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MiscApi
     */
    versionGet(options?: any): Promise<MiscVersionResponse>;
}
