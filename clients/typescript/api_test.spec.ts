/**
 * Sherlock
 * The Data Science Platform's source-of-truth service
 *
 * OpenAPI spec version: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AppVersionsApi", () => {
  let instance: api.AppVersionsApi
  beforeEach(function() {
    instance = new api.AppVersionsApi(config)
  });

  test("apiV2AppVersionsGet", () => {
    const appVersion: string = "appVersion_example"
    const chart: string = "chart_example"
    const createdAt: string = "createdAt_example"
    const gitBranch: string = "gitBranch_example"
    const gitCommit: string = "gitCommit_example"
    const id: number = 56
    const updatedAt: string = "updatedAt_example"
    const limit: number = 56
    return expect(instance.apiV2AppVersionsGet(appVersion, chart, createdAt, gitBranch, gitCommit, id, updatedAt, limit, {})).resolves.toBe(null)
  })
  test("apiV2AppVersionsPost", () => {
    const body: api.V2controllersCreatableAppVersion = undefined
    return expect(instance.apiV2AppVersionsPost(body, {})).resolves.toBe(null)
  })
  test("apiV2AppVersionsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2AppVersionsSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsAppVersionsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsAppVersionsSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("ChartDeployRecordsApi", () => {
  let instance: api.ChartDeployRecordsApi
  beforeEach(function() {
    instance = new api.ChartDeployRecordsApi(config)
  });

  test("apiV2ChartDeployRecordsGet", () => {
    const chartRelease: string = "chartRelease_example"
    const createdAt: string = "createdAt_example"
    const exactAppVersion: string = "exactAppVersion_example"
    const exactChartVersion: string = "exactChartVersion_example"
    const helmfileRef: string = "helmfileRef_example"
    const id: number = 56
    const updatedAt: string = "updatedAt_example"
    const limit: number = 56
    return expect(instance.apiV2ChartDeployRecordsGet(chartRelease, createdAt, exactAppVersion, exactChartVersion, helmfileRef, id, updatedAt, limit, {})).resolves.toBe(null)
  })
  test("apiV2ChartDeployRecordsPost", () => {
    const body: api.V2controllersCreatableChartDeployRecord = undefined
    return expect(instance.apiV2ChartDeployRecordsPost(body, {})).resolves.toBe(null)
  })
  test("apiV2ChartDeployRecordsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartDeployRecordsSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsChartDeployRecordsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsChartDeployRecordsSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("ChartReleasesApi", () => {
  let instance: api.ChartReleasesApi
  beforeEach(function() {
    instance = new api.ChartReleasesApi(config)
  });

  test("apiV2ChartReleasesGet", () => {
    const chart: string = "chart_example"
    const cluster: string = "cluster_example"
    const createdAt: string = "createdAt_example"
    const currentAppVersionExact: string = "currentAppVersionExact_example"
    const currentChartVersionExact: string = "currentChartVersionExact_example"
    const destinationType: string = "destinationType_example"
    const environment: string = "environment_example"
    const helmfileRef: string = "helmfileRef_example"
    const id: number = 56
    const name: string = "name_example"
    const namespace: string = "namespace_example"
    const targetAppVersionBranch: string = "targetAppVersionBranch_example"
    const targetAppVersionCommit: string = "targetAppVersionCommit_example"
    const targetAppVersionExact: string = "targetAppVersionExact_example"
    const targetAppVersionUse: string = "targetAppVersionUse_example"
    const targetChartVersionExact: string = "targetChartVersionExact_example"
    const targetChartVersionUse: string = "targetChartVersionUse_example"
    const thelmaMode: string = "thelmaMode_example"
    const updatedAt: string = "updatedAt_example"
    const limit: number = 56
    return expect(instance.apiV2ChartReleasesGet(chart, cluster, createdAt, currentAppVersionExact, currentChartVersionExact, destinationType, environment, helmfileRef, id, name, namespace, targetAppVersionBranch, targetAppVersionCommit, targetAppVersionExact, targetAppVersionUse, targetChartVersionExact, targetChartVersionUse, thelmaMode, updatedAt, limit, {})).resolves.toBe(null)
  })
  test("apiV2ChartReleasesPost", () => {
    const body: api.V2controllersCreatableChartRelease = undefined
    return expect(instance.apiV2ChartReleasesPost(body, {})).resolves.toBe(null)
  })
  test("apiV2ChartReleasesSelectorDelete", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartReleasesSelectorDelete(selector, {})).resolves.toBe(null)
  })
  test("apiV2ChartReleasesSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartReleasesSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2ChartReleasesSelectorPatch", () => {
    const body: api.V2controllersEditableChartRelease = undefined
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartReleasesSelectorPatch(body, selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsChartReleasesSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsChartReleasesSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("ChartVersionsApi", () => {
  let instance: api.ChartVersionsApi
  beforeEach(function() {
    instance = new api.ChartVersionsApi(config)
  });

  test("apiV2ChartVersionsGet", () => {
    const chart: string = "chart_example"
    const chartVersion: string = "chartVersion_example"
    const createdAt: string = "createdAt_example"
    const id: number = 56
    const updatedAt: string = "updatedAt_example"
    const limit: number = 56
    return expect(instance.apiV2ChartVersionsGet(chart, chartVersion, createdAt, id, updatedAt, limit, {})).resolves.toBe(null)
  })
  test("apiV2ChartVersionsPost", () => {
    const body: api.V2controllersCreatableChartVersion = undefined
    return expect(instance.apiV2ChartVersionsPost(body, {})).resolves.toBe(null)
  })
  test("apiV2ChartVersionsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartVersionsSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsChartVersionsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsChartVersionsSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("ChartsApi", () => {
  let instance: api.ChartsApi
  beforeEach(function() {
    instance = new api.ChartsApi(config)
  });

  test("apiV2ChartsGet", () => {
    const appImageGitMainBranch: string = "appImageGitMainBranch_example"
    const appImageGitRepo: string = "appImageGitRepo_example"
    const chartRepo: string = "chartRepo_example"
    const createdAt: string = "createdAt_example"
    const id: number = 56
    const name: string = "name_example"
    const updatedAt: string = "updatedAt_example"
    const limit: number = 56
    return expect(instance.apiV2ChartsGet(appImageGitMainBranch, appImageGitRepo, chartRepo, createdAt, id, name, updatedAt, limit, {})).resolves.toBe(null)
  })
  test("apiV2ChartsPost", () => {
    const body: api.V2controllersCreatableChart = undefined
    return expect(instance.apiV2ChartsPost(body, {})).resolves.toBe(null)
  })
  test("apiV2ChartsSelectorDelete", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartsSelectorDelete(selector, {})).resolves.toBe(null)
  })
  test("apiV2ChartsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartsSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2ChartsSelectorPatch", () => {
    const body: api.V2controllersEditableChart = undefined
    const selector: string = "selector_example"
    return expect(instance.apiV2ChartsSelectorPatch(body, selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsChartsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsChartsSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("ClustersApi", () => {
  let instance: api.ClustersApi
  beforeEach(function() {
    instance = new api.ClustersApi(config)
  });

  test("apiV2ClustersGet", () => {
    const name: string = "name_example"
    const address: string = "address_example"
    const azureSubscription: string = "azureSubscription_example"
    const base: string = "base_example"
    const createdAt: string = "createdAt_example"
    const googleProject: string = "googleProject_example"
    const id: number = 56
    const provider: string = "provider_example"
    const requiresSuitability: boolean = true
    const updatedAt: string = "updatedAt_example"
    const limit: number = 56
    return expect(instance.apiV2ClustersGet(name, address, azureSubscription, base, createdAt, googleProject, id, provider, requiresSuitability, updatedAt, limit, {})).resolves.toBe(null)
  })
  test("apiV2ClustersPost", () => {
    const body: api.V2controllersCreatableCluster = undefined
    return expect(instance.apiV2ClustersPost(body, {})).resolves.toBe(null)
  })
  test("apiV2ClustersSelectorDelete", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ClustersSelectorDelete(selector, {})).resolves.toBe(null)
  })
  test("apiV2ClustersSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2ClustersSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2ClustersSelectorPatch", () => {
    const body: api.V2controllersEditableCluster = undefined
    const selector: string = "selector_example"
    return expect(instance.apiV2ClustersSelectorPatch(body, selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsClustersSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsClustersSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("EnvironmentsApi", () => {
  let instance: api.EnvironmentsApi
  beforeEach(function() {
    instance = new api.EnvironmentsApi(config)
  });

  test("apiV2EnvironmentsGet", () => {
    const base: string = "base_example"
    const chartReleasesFromTemplate: boolean = true
    const createdAt: string = "createdAt_example"
    const defaultCluster: string = "defaultCluster_example"
    const defaultNamespace: string = "defaultNamespace_example"
    const id: number = 56
    const lifecycle: string = "lifecycle_example"
    const name: string = "name_example"
    const owner: string = "owner_example"
    const requiresSuitability: boolean = true
    const templateEnvironment: string = "templateEnvironment_example"
    const updatedAt: string = "updatedAt_example"
    const valuesName: string = "valuesName_example"
    const limit: number = 56
    return expect(instance.apiV2EnvironmentsGet(base, chartReleasesFromTemplate, createdAt, defaultCluster, defaultNamespace, id, lifecycle, name, owner, requiresSuitability, templateEnvironment, updatedAt, valuesName, limit, {})).resolves.toBe(null)
  })
  test("apiV2EnvironmentsPost", () => {
    const body: api.V2controllersCreatableEnvironment = undefined
    return expect(instance.apiV2EnvironmentsPost(body, {})).resolves.toBe(null)
  })
  test("apiV2EnvironmentsSelectorDelete", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2EnvironmentsSelectorDelete(selector, {})).resolves.toBe(null)
  })
  test("apiV2EnvironmentsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2EnvironmentsSelectorGet(selector, {})).resolves.toBe(null)
  })
  test("apiV2EnvironmentsSelectorPatch", () => {
    const body: api.V2controllersEditableEnvironment = undefined
    const selector: string = "selector_example"
    return expect(instance.apiV2EnvironmentsSelectorPatch(body, selector, {})).resolves.toBe(null)
  })
  test("apiV2SelectorsEnvironmentsSelectorGet", () => {
    const selector: string = "selector_example"
    return expect(instance.apiV2SelectorsEnvironmentsSelectorGet(selector, {})).resolves.toBe(null)
  })
})

describe("MiscApi", () => {
  let instance: api.MiscApi
  beforeEach(function() {
    instance = new api.MiscApi(config)
  });

  test("myUserGet", () => {
    return expect(instance.myUserGet({})).resolves.toBe(null)
  })
  test("statusGet", () => {
    return expect(instance.statusGet({})).resolves.toBe(null)
  })
  test("versionGet", () => {
    return expect(instance.versionGet({})).resolves.toBe(null)
  })
})

