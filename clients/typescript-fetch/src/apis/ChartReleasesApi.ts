/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  V2controllersChartRelease,
  V2controllersCreatableChartRelease,
  V2controllersEditableChartRelease,
} from '../models';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    V2controllersChartReleaseFromJSON,
    V2controllersChartReleaseToJSON,
    V2controllersCreatableChartReleaseFromJSON,
    V2controllersCreatableChartReleaseToJSON,
    V2controllersEditableChartReleaseFromJSON,
    V2controllersEditableChartReleaseToJSON,
} from '../models';

export interface ApiV2ChartReleasesGetRequest {
    chart?: string;
    cluster?: string;
    createdAt?: string;
    currentAppVersionExact?: string;
    currentChartVersionExact?: string;
    destinationType?: string;
    environment?: string;
    helmfileRef?: string;
    id?: number;
    name?: string;
    namespace?: string;
    targetAppVersionBranch?: string;
    targetAppVersionCommit?: string;
    targetAppVersionExact?: string;
    targetAppVersionUse?: ApiV2ChartReleasesGetTargetAppVersionUseEnum;
    targetChartVersionExact?: string;
    targetChartVersionUse?: ApiV2ChartReleasesGetTargetChartVersionUseEnum;
    thelmaMode?: string;
    updatedAt?: string;
    limit?: number;
}

export interface ApiV2ChartReleasesPostRequest {
    chartRelease: V2controllersCreatableChartRelease;
}

export interface ApiV2ChartReleasesSelectorDeleteRequest {
    selector: string;
}

export interface ApiV2ChartReleasesSelectorGetRequest {
    selector: string;
}

export interface ApiV2ChartReleasesSelectorPatchRequest {
    selector: string;
    chartRelease: V2controllersEditableChartRelease;
}

export interface ApiV2SelectorsChartReleasesSelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class ChartReleasesApi extends runtime.BaseAPI {

    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * List ChartRelease entries
     */
    async apiV2ChartReleasesGetRaw(requestParameters: ApiV2ChartReleasesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2controllersChartRelease>>> {
        const queryParameters: any = {};

        if (requestParameters.chart !== undefined) {
            queryParameters['chart'] = requestParameters.chart;
        }

        if (requestParameters.cluster !== undefined) {
            queryParameters['cluster'] = requestParameters.cluster;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = requestParameters.createdAt;
        }

        if (requestParameters.currentAppVersionExact !== undefined) {
            queryParameters['currentAppVersionExact'] = requestParameters.currentAppVersionExact;
        }

        if (requestParameters.currentChartVersionExact !== undefined) {
            queryParameters['currentChartVersionExact'] = requestParameters.currentChartVersionExact;
        }

        if (requestParameters.destinationType !== undefined) {
            queryParameters['destinationType'] = requestParameters.destinationType;
        }

        if (requestParameters.environment !== undefined) {
            queryParameters['environment'] = requestParameters.environment;
        }

        if (requestParameters.helmfileRef !== undefined) {
            queryParameters['helmfileRef'] = requestParameters.helmfileRef;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        if (requestParameters.targetAppVersionBranch !== undefined) {
            queryParameters['targetAppVersionBranch'] = requestParameters.targetAppVersionBranch;
        }

        if (requestParameters.targetAppVersionCommit !== undefined) {
            queryParameters['targetAppVersionCommit'] = requestParameters.targetAppVersionCommit;
        }

        if (requestParameters.targetAppVersionExact !== undefined) {
            queryParameters['targetAppVersionExact'] = requestParameters.targetAppVersionExact;
        }

        if (requestParameters.targetAppVersionUse !== undefined) {
            queryParameters['targetAppVersionUse'] = requestParameters.targetAppVersionUse;
        }

        if (requestParameters.targetChartVersionExact !== undefined) {
            queryParameters['targetChartVersionExact'] = requestParameters.targetChartVersionExact;
        }

        if (requestParameters.targetChartVersionUse !== undefined) {
            queryParameters['targetChartVersionUse'] = requestParameters.targetChartVersionUse;
        }

        if (requestParameters.thelmaMode !== undefined) {
            queryParameters['thelmaMode'] = requestParameters.thelmaMode;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-releases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2controllersChartReleaseFromJSON));
    }

    /**
     * List existing ChartRelease entries, ordered by most recently updated.
     * List ChartRelease entries
     */
    async apiV2ChartReleasesGet(requestParameters: ApiV2ChartReleasesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2controllersChartRelease>> {
        const response = await this.apiV2ChartReleasesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new ChartRelease entry
     */
    async apiV2ChartReleasesPostRaw(requestParameters: ApiV2ChartReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.chartRelease === null || requestParameters.chartRelease === undefined) {
            throw new runtime.RequiredError('chartRelease','Required parameter requestParameters.chartRelease was null or undefined when calling apiV2ChartReleasesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chart-releases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableChartReleaseToJSON(requestParameters.chartRelease),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new ChartRelease entry
     */
    async apiV2ChartReleasesPost(requestParameters: ApiV2ChartReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Delete a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorDeleteRaw(requestParameters: ApiV2ChartReleasesSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Delete an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Delete a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorDelete(requestParameters: ApiV2ChartReleasesSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Get a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorGetRaw(requestParameters: ApiV2ChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Get an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart.
     * Get a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorGet(requestParameters: ApiV2ChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorPatchRaw(requestParameters: ApiV2ChartReleasesSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartRelease>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartReleasesSelectorPatch.');
        }

        if (requestParameters.chartRelease === null || requestParameters.chartRelease === undefined) {
            throw new runtime.RequiredError('chartRelease','Required parameter requestParameters.chartRelease was null or undefined when calling apiV2ChartReleasesSelectorPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersEditableChartReleaseToJSON(requestParameters.chartRelease),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartReleaseFromJSON(jsonValue));
    }

    /**
     * Edit an existing ChartRelease entry via one of its \"selectors\": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a ChartRelease entry
     */
    async apiV2ChartReleasesSelectorPatch(requestParameters: ApiV2ChartReleasesSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartRelease> {
        const response = await this.apiV2ChartReleasesSelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * List ChartRelease selectors
     */
    async apiV2SelectorsChartReleasesSelectorGetRaw(requestParameters: ApiV2SelectorsChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2SelectorsChartReleasesSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/selectors/chart-releases/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.
     * List ChartRelease selectors
     */
    async apiV2SelectorsChartReleasesSelectorGet(requestParameters: ApiV2SelectorsChartReleasesSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2SelectorsChartReleasesSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV2ChartReleasesGetTargetAppVersionUseEnum = {
    Branch: 'branch',
    Commit: 'commit',
    Exact: 'exact'
} as const;
export type ApiV2ChartReleasesGetTargetAppVersionUseEnum = typeof ApiV2ChartReleasesGetTargetAppVersionUseEnum[keyof typeof ApiV2ChartReleasesGetTargetAppVersionUseEnum];
/**
 * @export
 */
export const ApiV2ChartReleasesGetTargetChartVersionUseEnum = {
    Latest: 'latest',
    Exact: 'exact'
} as const;
export type ApiV2ChartReleasesGetTargetChartVersionUseEnum = typeof ApiV2ChartReleasesGetTargetChartVersionUseEnum[keyof typeof ApiV2ChartReleasesGetTargetChartVersionUseEnum];
