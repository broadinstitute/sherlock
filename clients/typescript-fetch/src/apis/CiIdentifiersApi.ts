/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  V2controllersCiIdentifier,
  V2controllersCreatableCiIdentifier,
  V2controllersEditableCiIdentifier,
} from '../models';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    V2controllersCiIdentifierFromJSON,
    V2controllersCiIdentifierToJSON,
    V2controllersCreatableCiIdentifierFromJSON,
    V2controllersCreatableCiIdentifierToJSON,
    V2controllersEditableCiIdentifierFromJSON,
    V2controllersEditableCiIdentifierToJSON,
} from '../models';

export interface ApiV2CiIdentifiersGetRequest {
    createdAt?: Date;
    id?: number;
    resourceID?: number;
    resourceType?: string;
    updatedAt?: Date;
    limit?: number;
}

export interface ApiV2CiIdentifiersPostRequest {
    ciIdentifier: V2controllersCreatableCiIdentifier;
}

export interface ApiV2CiIdentifiersSelectorGetRequest {
    selector: string;
}

export interface ApiV2CiIdentifiersSelectorPatchRequest {
    selector: string;
    ciIdentifier: V2controllersEditableCiIdentifier;
}

export interface ApiV2CiIdentifiersSelectorPutRequest {
    selector: string;
    ciIdentifier: V2controllersCreatableCiIdentifier;
}

export interface ApiV2SelectorsCiIdentifiersSelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class CiIdentifiersApi extends runtime.BaseAPI {

    /**
     * List existing CiIdentifier entries, ordered by most recently updated.
     * List CiIdentifier entries
     */
    async apiV2CiIdentifiersGetRaw(requestParameters: ApiV2CiIdentifiersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2controllersCiIdentifier>>> {
        const queryParameters: any = {};

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = (requestParameters.createdAt as any).toISOString();
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.resourceID !== undefined) {
            queryParameters['resourceID'] = requestParameters.resourceID;
        }

        if (requestParameters.resourceType !== undefined) {
            queryParameters['resourceType'] = requestParameters.resourceType;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = (requestParameters.updatedAt as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/ci-identifiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2controllersCiIdentifierFromJSON));
    }

    /**
     * List existing CiIdentifier entries, ordered by most recently updated.
     * List CiIdentifier entries
     */
    async apiV2CiIdentifiersGet(requestParameters: ApiV2CiIdentifiersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2controllersCiIdentifier>> {
        const response = await this.apiV2CiIdentifiersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new CiIdentifier entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new CiIdentifier entry
     */
    async apiV2CiIdentifiersPostRaw(requestParameters: ApiV2CiIdentifiersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCiIdentifier>> {
        if (requestParameters.ciIdentifier === null || requestParameters.ciIdentifier === undefined) {
            throw new runtime.RequiredError('ciIdentifier','Required parameter requestParameters.ciIdentifier was null or undefined when calling apiV2CiIdentifiersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/ci-identifiers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableCiIdentifierToJSON(requestParameters.ciIdentifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersCiIdentifierFromJSON(jsonValue));
    }

    /**
     * Create a new CiIdentifier entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new CiIdentifier entry
     */
    async apiV2CiIdentifiersPost(requestParameters: ApiV2CiIdentifiersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCiIdentifier> {
        const response = await this.apiV2CiIdentifiersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing CiIdentifier entry via one of its \"selectors\": ID or type + \'/\' + selector of the referenced type.
     * Get a CiIdentifier entry
     */
    async apiV2CiIdentifiersSelectorGetRaw(requestParameters: ApiV2CiIdentifiersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCiIdentifier>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2CiIdentifiersSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/ci-identifiers/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersCiIdentifierFromJSON(jsonValue));
    }

    /**
     * Get an existing CiIdentifier entry via one of its \"selectors\": ID or type + \'/\' + selector of the referenced type.
     * Get a CiIdentifier entry
     */
    async apiV2CiIdentifiersSelectorGet(requestParameters: ApiV2CiIdentifiersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCiIdentifier> {
        const response = await this.apiV2CiIdentifiersSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing CiIdentifier entry via one of its \"selectors\": ID or type + \'/\' + selector of the referenced type. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a CiIdentifier entry
     */
    async apiV2CiIdentifiersSelectorPatchRaw(requestParameters: ApiV2CiIdentifiersSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCiIdentifier>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2CiIdentifiersSelectorPatch.');
        }

        if (requestParameters.ciIdentifier === null || requestParameters.ciIdentifier === undefined) {
            throw new runtime.RequiredError('ciIdentifier','Required parameter requestParameters.ciIdentifier was null or undefined when calling apiV2CiIdentifiersSelectorPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/ci-identifiers/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersEditableCiIdentifierToJSON(requestParameters.ciIdentifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersCiIdentifierFromJSON(jsonValue));
    }

    /**
     * Edit an existing CiIdentifier entry via one of its \"selectors\": ID or type + \'/\' + selector of the referenced type. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a CiIdentifier entry
     */
    async apiV2CiIdentifiersSelectorPatch(requestParameters: ApiV2CiIdentifiersSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCiIdentifier> {
        const response = await this.apiV2CiIdentifiersSelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or edit a CiIdentifier entry. Attempts to edit and will attempt to create upon an error. If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
     * Create or edit a CiIdentifier entry
     */
    async apiV2CiIdentifiersSelectorPutRaw(requestParameters: ApiV2CiIdentifiersSelectorPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCiIdentifier>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2CiIdentifiersSelectorPut.');
        }

        if (requestParameters.ciIdentifier === null || requestParameters.ciIdentifier === undefined) {
            throw new runtime.RequiredError('ciIdentifier','Required parameter requestParameters.ciIdentifier was null or undefined when calling apiV2CiIdentifiersSelectorPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/ci-identifiers/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableCiIdentifierToJSON(requestParameters.ciIdentifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersCiIdentifierFromJSON(jsonValue));
    }

    /**
     * Create or edit a CiIdentifier entry. Attempts to edit and will attempt to create upon an error. If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
     * Create or edit a CiIdentifier entry
     */
    async apiV2CiIdentifiersSelectorPut(requestParameters: ApiV2CiIdentifiersSelectorPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCiIdentifier> {
        const response = await this.apiV2CiIdentifiersSelectorPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a given CiIdentifier selector and provide any other selectors that would match the same CiIdentifier.
     * List CiIdentifier selectors
     */
    async apiV2SelectorsCiIdentifiersSelectorGetRaw(requestParameters: ApiV2SelectorsCiIdentifiersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2SelectorsCiIdentifiersSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/selectors/ci-identifiers/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a given CiIdentifier selector and provide any other selectors that would match the same CiIdentifier.
     * List CiIdentifier selectors
     */
    async apiV2SelectorsCiIdentifiersSelectorGet(requestParameters: ApiV2SelectorsCiIdentifiersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2SelectorsCiIdentifiersSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
