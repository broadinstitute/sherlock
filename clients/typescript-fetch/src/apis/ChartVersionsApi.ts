/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  V2controllersChartVersion,
  V2controllersCreatableChartVersion,
} from '../models';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    V2controllersChartVersionFromJSON,
    V2controllersChartVersionToJSON,
    V2controllersCreatableChartVersionFromJSON,
    V2controllersCreatableChartVersionToJSON,
} from '../models';

export interface ApiV2ChartVersionsGetRequest {
    chart?: string;
    chartVersion?: string;
    createdAt?: string;
    id?: number;
    updatedAt?: string;
    limit?: number;
}

export interface ApiV2ChartVersionsPostRequest {
    chartVersion: V2controllersCreatableChartVersion;
}

export interface ApiV2ChartVersionsSelectorGetRequest {
    selector: string;
}

export interface ApiV2SelectorsChartVersionsSelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class ChartVersionsApi extends runtime.BaseAPI {

    /**
     * List existing ChartVersion entries, ordered by most recently updated.
     * List ChartVersion entries
     */
    async apiV2ChartVersionsGetRaw(requestParameters: ApiV2ChartVersionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2controllersChartVersion>>> {
        const queryParameters: any = {};

        if (requestParameters.chart !== undefined) {
            queryParameters['chart'] = requestParameters.chart;
        }

        if (requestParameters.chartVersion !== undefined) {
            queryParameters['chartVersion'] = requestParameters.chartVersion;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = requestParameters.createdAt;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-versions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2controllersChartVersionFromJSON));
    }

    /**
     * List existing ChartVersion entries, ordered by most recently updated.
     * List ChartVersion entries
     */
    async apiV2ChartVersionsGet(requestParameters: ApiV2ChartVersionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2controllersChartVersion>> {
        const response = await this.apiV2ChartVersionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new ChartVersion entry. Note that fields are immutable after creation.
     * Create a new ChartVersion entry
     */
    async apiV2ChartVersionsPostRaw(requestParameters: ApiV2ChartVersionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartVersion>> {
        if (requestParameters.chartVersion === null || requestParameters.chartVersion === undefined) {
            throw new runtime.RequiredError('chartVersion','Required parameter requestParameters.chartVersion was null or undefined when calling apiV2ChartVersionsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/chart-versions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableChartVersionToJSON(requestParameters.chartVersion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartVersionFromJSON(jsonValue));
    }

    /**
     * Create a new ChartVersion entry. Note that fields are immutable after creation.
     * Create a new ChartVersion entry
     */
    async apiV2ChartVersionsPost(requestParameters: ApiV2ChartVersionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartVersion> {
        const response = await this.apiV2ChartVersionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing ChartVersion entry via one its \"selector\"--its numeric ID.
     * Get a ChartVersion entry
     */
    async apiV2ChartVersionsSelectorGetRaw(requestParameters: ApiV2ChartVersionsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersChartVersion>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ChartVersionsSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/chart-versions/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersChartVersionFromJSON(jsonValue));
    }

    /**
     * Get an existing ChartVersion entry via one its \"selector\"--its numeric ID.
     * Get a ChartVersion entry
     */
    async apiV2ChartVersionsSelectorGet(requestParameters: ApiV2ChartVersionsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersChartVersion> {
        const response = await this.apiV2ChartVersionsSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a given ChartVersion selector and provide any other selectors that would match the same ChartVersion.
     * List ChartVersion selectors
     */
    async apiV2SelectorsChartVersionsSelectorGetRaw(requestParameters: ApiV2SelectorsChartVersionsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2SelectorsChartVersionsSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/selectors/chart-versions/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a given ChartVersion selector and provide any other selectors that would match the same ChartVersion.
     * List ChartVersion selectors
     */
    async apiV2SelectorsChartVersionsSelectorGet(requestParameters: ApiV2SelectorsChartVersionsSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2SelectorsChartVersionsSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
