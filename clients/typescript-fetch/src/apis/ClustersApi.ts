/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorsErrorResponse,
  V2controllersCluster,
  V2controllersCreatableCluster,
  V2controllersEditableCluster,
} from '../models';
import {
    ErrorsErrorResponseFromJSON,
    ErrorsErrorResponseToJSON,
    V2controllersClusterFromJSON,
    V2controllersClusterToJSON,
    V2controllersCreatableClusterFromJSON,
    V2controllersCreatableClusterToJSON,
    V2controllersEditableClusterFromJSON,
    V2controllersEditableClusterToJSON,
} from '../models';

export interface ApiV2ClustersGetRequest {
    name: string;
    address?: string;
    azureSubscription?: string;
    base?: string;
    createdAt?: string;
    googleProject?: string;
    id?: number;
    provider?: ApiV2ClustersGetProviderEnum;
    requiresSuitability?: boolean;
    updatedAt?: string;
    limit?: number;
}

export interface ApiV2ClustersPostRequest {
    cluster: V2controllersCreatableCluster;
}

export interface ApiV2ClustersSelectorDeleteRequest {
    selector: string;
}

export interface ApiV2ClustersSelectorGetRequest {
    selector: string;
}

export interface ApiV2ClustersSelectorPatchRequest {
    selector: string;
    cluster: V2controllersEditableCluster;
}

export interface ApiV2SelectorsClustersSelectorGetRequest {
    selector: string;
}

/**
 * 
 */
export class ClustersApi extends runtime.BaseAPI {

    /**
     * List existing Cluster entries, ordered by most recently updated.
     * List Cluster entries
     */
    async apiV2ClustersGetRaw(requestParameters: ApiV2ClustersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<V2controllersCluster>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiV2ClustersGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.azureSubscription !== undefined) {
            queryParameters['azureSubscription'] = requestParameters.azureSubscription;
        }

        if (requestParameters.base !== undefined) {
            queryParameters['base'] = requestParameters.base;
        }

        if (requestParameters.createdAt !== undefined) {
            queryParameters['createdAt'] = requestParameters.createdAt;
        }

        if (requestParameters.googleProject !== undefined) {
            queryParameters['googleProject'] = requestParameters.googleProject;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.requiresSuitability !== undefined) {
            queryParameters['requiresSuitability'] = requestParameters.requiresSuitability;
        }

        if (requestParameters.updatedAt !== undefined) {
            queryParameters['updatedAt'] = requestParameters.updatedAt;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/clusters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(V2controllersClusterFromJSON));
    }

    /**
     * List existing Cluster entries, ordered by most recently updated.
     * List Cluster entries
     */
    async apiV2ClustersGet(requestParameters: ApiV2ClustersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<V2controllersCluster>> {
        const response = await this.apiV2ClustersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Cluster entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new Cluster entry
     */
    async apiV2ClustersPostRaw(requestParameters: ApiV2ClustersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCluster>> {
        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling apiV2ClustersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/clusters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersCreatableClusterToJSON(requestParameters.cluster),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersClusterFromJSON(jsonValue));
    }

    /**
     * Create a new Cluster entry. Note that some fields are immutable after creation; /edit lists mutable fields.
     * Create a new Cluster entry
     */
    async apiV2ClustersPost(requestParameters: ApiV2ClustersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCluster> {
        const response = await this.apiV2ClustersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * Delete a Cluster entry
     */
    async apiV2ClustersSelectorDeleteRaw(requestParameters: ApiV2ClustersSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCluster>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ClustersSelectorDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/clusters/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersClusterFromJSON(jsonValue));
    }

    /**
     * Delete an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * Delete a Cluster entry
     */
    async apiV2ClustersSelectorDelete(requestParameters: ApiV2ClustersSelectorDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCluster> {
        const response = await this.apiV2ClustersSelectorDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * Get a Cluster entry
     */
    async apiV2ClustersSelectorGetRaw(requestParameters: ApiV2ClustersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCluster>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ClustersSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/clusters/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersClusterFromJSON(jsonValue));
    }

    /**
     * Get an existing Cluster entry via one of its \"selectors\": name or numeric ID.
     * Get a Cluster entry
     */
    async apiV2ClustersSelectorGet(requestParameters: ApiV2ClustersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCluster> {
        const response = await this.apiV2ClustersSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit an existing Cluster entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a Cluster entry
     */
    async apiV2ClustersSelectorPatchRaw(requestParameters: ApiV2ClustersSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V2controllersCluster>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2ClustersSelectorPatch.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling apiV2ClustersSelectorPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/clusters/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V2controllersEditableClusterToJSON(requestParameters.cluster),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V2controllersClusterFromJSON(jsonValue));
    }

    /**
     * Edit an existing Cluster entry via one of its \"selectors\": name or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
     * Edit a Cluster entry
     */
    async apiV2ClustersSelectorPatch(requestParameters: ApiV2ClustersSelectorPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V2controllersCluster> {
        const response = await this.apiV2ClustersSelectorPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a given Cluster selector and provide any other selectors that would match the same Cluster.
     * List Cluster selectors
     */
    async apiV2SelectorsClustersSelectorGetRaw(requestParameters: ApiV2SelectorsClustersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.selector === null || requestParameters.selector === undefined) {
            throw new runtime.RequiredError('selector','Required parameter requestParameters.selector was null or undefined when calling apiV2SelectorsClustersSelectorGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/selectors/clusters/{selector}`.replace(`{${"selector"}}`, encodeURIComponent(String(requestParameters.selector))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validate a given Cluster selector and provide any other selectors that would match the same Cluster.
     * List Cluster selectors
     */
    async apiV2SelectorsClustersSelectorGet(requestParameters: ApiV2SelectorsClustersSelectorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.apiV2SelectorsClustersSelectorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ApiV2ClustersGetProviderEnum = {
    Google: 'google',
    Azure: 'azure'
} as const;
export type ApiV2ClustersGetProviderEnum = typeof ApiV2ClustersGetProviderEnum[keyof typeof ApiV2ClustersGetProviderEnum];
