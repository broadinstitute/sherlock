/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V2controllersCreatableChartRelease
 */
export interface V2controllersCreatableChartRelease {
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    chart?: string;
    /**
     * When creating, will default the environment's default cluster, if provided. Either this or environment must be provided.
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    cluster?: string;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    currentAppVersionExact?: string;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    currentChartVersionExact?: string;
    /**
     * Either this or cluster must be provided.
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    environment?: string;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    helmfileRef?: string;
    /**
     * When creating, will be calculated if left empty
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    name?: string;
    /**
     * When creating, will default to the environment's default namespace, if provided
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    namespace?: string;
    /**
     * When creating, will default to the app's main branch if it has one recorded
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionBranch?: string;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionCommit?: string;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionExact?: string;
    /**
     * When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetAppVersionUse?: V2controllersCreatableChartReleaseTargetAppVersionUseEnum;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetChartVersionExact?: string;
    /**
     * When creating, will default to latest unless an exact target chart version is provided
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    targetChartVersionUse?: V2controllersCreatableChartReleaseTargetChartVersionUseEnum;
    /**
     * 
     * @type {string}
     * @memberof V2controllersCreatableChartRelease
     */
    thelmaMode?: string;
}


/**
 * @export
 */
export const V2controllersCreatableChartReleaseTargetAppVersionUseEnum = {
    Branch: 'branch',
    Commit: 'commit',
    Exact: 'exact'
} as const;
export type V2controllersCreatableChartReleaseTargetAppVersionUseEnum = typeof V2controllersCreatableChartReleaseTargetAppVersionUseEnum[keyof typeof V2controllersCreatableChartReleaseTargetAppVersionUseEnum];

/**
 * @export
 */
export const V2controllersCreatableChartReleaseTargetChartVersionUseEnum = {
    Latest: 'latest',
    Exact: 'exact'
} as const;
export type V2controllersCreatableChartReleaseTargetChartVersionUseEnum = typeof V2controllersCreatableChartReleaseTargetChartVersionUseEnum[keyof typeof V2controllersCreatableChartReleaseTargetChartVersionUseEnum];


/**
 * Check if a given object implements the V2controllersCreatableChartRelease interface.
 */
export function instanceOfV2controllersCreatableChartRelease(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V2controllersCreatableChartReleaseFromJSON(json: any): V2controllersCreatableChartRelease {
    return V2controllersCreatableChartReleaseFromJSONTyped(json, false);
}

export function V2controllersCreatableChartReleaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V2controllersCreatableChartRelease {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chart': !exists(json, 'chart') ? undefined : json['chart'],
        'cluster': !exists(json, 'cluster') ? undefined : json['cluster'],
        'currentAppVersionExact': !exists(json, 'currentAppVersionExact') ? undefined : json['currentAppVersionExact'],
        'currentChartVersionExact': !exists(json, 'currentChartVersionExact') ? undefined : json['currentChartVersionExact'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
        'helmfileRef': !exists(json, 'helmfileRef') ? undefined : json['helmfileRef'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'targetAppVersionBranch': !exists(json, 'targetAppVersionBranch') ? undefined : json['targetAppVersionBranch'],
        'targetAppVersionCommit': !exists(json, 'targetAppVersionCommit') ? undefined : json['targetAppVersionCommit'],
        'targetAppVersionExact': !exists(json, 'targetAppVersionExact') ? undefined : json['targetAppVersionExact'],
        'targetAppVersionUse': !exists(json, 'targetAppVersionUse') ? undefined : json['targetAppVersionUse'],
        'targetChartVersionExact': !exists(json, 'targetChartVersionExact') ? undefined : json['targetChartVersionExact'],
        'targetChartVersionUse': !exists(json, 'targetChartVersionUse') ? undefined : json['targetChartVersionUse'],
        'thelmaMode': !exists(json, 'thelmaMode') ? undefined : json['thelmaMode'],
    };
}

export function V2controllersCreatableChartReleaseToJSON(value?: V2controllersCreatableChartRelease | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chart': value.chart,
        'cluster': value.cluster,
        'currentAppVersionExact': value.currentAppVersionExact,
        'currentChartVersionExact': value.currentChartVersionExact,
        'environment': value.environment,
        'helmfileRef': value.helmfileRef,
        'name': value.name,
        'namespace': value.namespace,
        'targetAppVersionBranch': value.targetAppVersionBranch,
        'targetAppVersionCommit': value.targetAppVersionCommit,
        'targetAppVersionExact': value.targetAppVersionExact,
        'targetAppVersionUse': value.targetAppVersionUse,
        'targetChartVersionExact': value.targetChartVersionExact,
        'targetChartVersionUse': value.targetChartVersionUse,
        'thelmaMode': value.thelmaMode,
    };
}

