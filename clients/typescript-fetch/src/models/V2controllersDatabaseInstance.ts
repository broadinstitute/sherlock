/* tslint:disable */
/* eslint-disable */
/**
 * Sherlock
 * The Data Science Platform\'s source-of-truth service. Note: this API will try to load and return associations in responses, so clients won\'t need to make as many requests. This behavior isn\'t recursive, though, so associations of associations are *not* fully loaded (even if it might seem that way from looking at the data types).
 *
 * The version of the OpenAPI document: development
 * Contact: dsp-devops@broadinstitute.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V2controllersChartRelease } from './V2controllersChartRelease';
import {
    V2controllersChartReleaseFromJSON,
    V2controllersChartReleaseFromJSONTyped,
    V2controllersChartReleaseToJSON,
} from './V2controllersChartRelease';

/**
 * 
 * @export
 * @interface V2controllersDatabaseInstance
 */
export interface V2controllersDatabaseInstance {
    /**
     * Required if platform is 'azure'
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    azureManagedResourceGroup?: string;
    /**
     * Required if platform is 'azure'
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    azureSubscription?: string;
    /**
     * Required when creating
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    chartRelease?: string;
    /**
     * 
     * @type {V2controllersChartRelease}
     * @memberof V2controllersDatabaseInstance
     */
    chartReleaseInfo?: V2controllersChartRelease;
    /**
     * 
     * @type {Date}
     * @memberof V2controllersDatabaseInstance
     */
    createdAt?: Date;
    /**
     * When creating, defaults to the chart name
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    defaultDatabase?: string;
    /**
     * Required if platform is 'google'
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    googleLocation?: string;
    /**
     * Required if platform is 'google'
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    googleProject?: string;
    /**
     * 
     * @type {number}
     * @memberof V2controllersDatabaseInstance
     */
    id?: number;
    /**
     * Required if platform is 'google' or 'azure'
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    instanceName?: string;
    /**
     * 'google', 'azure', or default 'kubernetes'
     * @type {string}
     * @memberof V2controllersDatabaseInstance
     */
    platform?: string;
    /**
     * 
     * @type {Date}
     * @memberof V2controllersDatabaseInstance
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the V2controllersDatabaseInstance interface.
 */
export function instanceOfV2controllersDatabaseInstance(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V2controllersDatabaseInstanceFromJSON(json: any): V2controllersDatabaseInstance {
    return V2controllersDatabaseInstanceFromJSONTyped(json, false);
}

export function V2controllersDatabaseInstanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V2controllersDatabaseInstance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'azureManagedResourceGroup': !exists(json, 'azureManagedResourceGroup') ? undefined : json['azureManagedResourceGroup'],
        'azureSubscription': !exists(json, 'azureSubscription') ? undefined : json['azureSubscription'],
        'chartRelease': !exists(json, 'chartRelease') ? undefined : json['chartRelease'],
        'chartReleaseInfo': !exists(json, 'chartReleaseInfo') ? undefined : V2controllersChartReleaseFromJSON(json['chartReleaseInfo']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'defaultDatabase': !exists(json, 'defaultDatabase') ? undefined : json['defaultDatabase'],
        'googleLocation': !exists(json, 'googleLocation') ? undefined : json['googleLocation'],
        'googleProject': !exists(json, 'googleProject') ? undefined : json['googleProject'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'instanceName': !exists(json, 'instanceName') ? undefined : json['instanceName'],
        'platform': !exists(json, 'platform') ? undefined : json['platform'],
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function V2controllersDatabaseInstanceToJSON(value?: V2controllersDatabaseInstance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'azureManagedResourceGroup': value.azureManagedResourceGroup,
        'azureSubscription': value.azureSubscription,
        'chartRelease': value.chartRelease,
        'chartReleaseInfo': V2controllersChartReleaseToJSON(value.chartReleaseInfo),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'defaultDatabase': value.defaultDatabase,
        'googleLocation': value.googleLocation,
        'googleProject': value.googleProject,
        'id': value.id,
        'instanceName': value.instanceName,
        'platform': value.platform,
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

