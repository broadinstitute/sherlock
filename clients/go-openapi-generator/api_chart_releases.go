/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ChartReleasesApiService ChartReleasesApi service
type ChartReleasesApiService service

type ApiApiV2ChartReleasesGetRequest struct {
	ctx context.Context
	ApiService *ChartReleasesApiService
	chart *string
	cluster *string
	createdAt *string
	currentAppVersionExact *string
	currentChartVersionExact *string
	destinationType *string
	environment *string
	helmfileRef *string
	id *int32
	name *string
	namespace *string
	targetAppVersionBranch *string
	targetAppVersionCommit *string
	targetAppVersionExact *string
	targetAppVersionUse *string
	targetChartVersionExact *string
	targetChartVersionUse *string
	thelmaMode *string
	updatedAt *string
	limit *int32
}

// Required when creating
func (r ApiApiV2ChartReleasesGetRequest) Chart(chart string) ApiApiV2ChartReleasesGetRequest {
	r.chart = &chart
	return r
}

// When creating, will default the environment&#39;s default cluster, if provided. Either this or environment must be provided.
func (r ApiApiV2ChartReleasesGetRequest) Cluster(cluster string) ApiApiV2ChartReleasesGetRequest {
	r.cluster = &cluster
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) CreatedAt(createdAt string) ApiApiV2ChartReleasesGetRequest {
	r.createdAt = &createdAt
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) CurrentAppVersionExact(currentAppVersionExact string) ApiApiV2ChartReleasesGetRequest {
	r.currentAppVersionExact = &currentAppVersionExact
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) CurrentChartVersionExact(currentChartVersionExact string) ApiApiV2ChartReleasesGetRequest {
	r.currentChartVersionExact = &currentChartVersionExact
	return r
}

// Calculated field
func (r ApiApiV2ChartReleasesGetRequest) DestinationType(destinationType string) ApiApiV2ChartReleasesGetRequest {
	r.destinationType = &destinationType
	return r
}

// Either this or cluster must be provided.
func (r ApiApiV2ChartReleasesGetRequest) Environment(environment string) ApiApiV2ChartReleasesGetRequest {
	r.environment = &environment
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) HelmfileRef(helmfileRef string) ApiApiV2ChartReleasesGetRequest {
	r.helmfileRef = &helmfileRef
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) Id(id int32) ApiApiV2ChartReleasesGetRequest {
	r.id = &id
	return r
}

// When creating, will be calculated if left empty
func (r ApiApiV2ChartReleasesGetRequest) Name(name string) ApiApiV2ChartReleasesGetRequest {
	r.name = &name
	return r
}

// When creating, will default to the environment&#39;s default namespace, if provided
func (r ApiApiV2ChartReleasesGetRequest) Namespace(namespace string) ApiApiV2ChartReleasesGetRequest {
	r.namespace = &namespace
	return r
}

// When creating, will default to the app&#39;s main branch if it has one recorded
func (r ApiApiV2ChartReleasesGetRequest) TargetAppVersionBranch(targetAppVersionBranch string) ApiApiV2ChartReleasesGetRequest {
	r.targetAppVersionBranch = &targetAppVersionBranch
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) TargetAppVersionCommit(targetAppVersionCommit string) ApiApiV2ChartReleasesGetRequest {
	r.targetAppVersionCommit = &targetAppVersionCommit
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) TargetAppVersionExact(targetAppVersionExact string) ApiApiV2ChartReleasesGetRequest {
	r.targetAppVersionExact = &targetAppVersionExact
	return r
}

// When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
func (r ApiApiV2ChartReleasesGetRequest) TargetAppVersionUse(targetAppVersionUse string) ApiApiV2ChartReleasesGetRequest {
	r.targetAppVersionUse = &targetAppVersionUse
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) TargetChartVersionExact(targetChartVersionExact string) ApiApiV2ChartReleasesGetRequest {
	r.targetChartVersionExact = &targetChartVersionExact
	return r
}

// When creating, will default to latest unless an exact target chart version is provided
func (r ApiApiV2ChartReleasesGetRequest) TargetChartVersionUse(targetChartVersionUse string) ApiApiV2ChartReleasesGetRequest {
	r.targetChartVersionUse = &targetChartVersionUse
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) ThelmaMode(thelmaMode string) ApiApiV2ChartReleasesGetRequest {
	r.thelmaMode = &thelmaMode
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) UpdatedAt(updatedAt string) ApiApiV2ChartReleasesGetRequest {
	r.updatedAt = &updatedAt
	return r
}

// An optional limit to the number of entries returned
func (r ApiApiV2ChartReleasesGetRequest) Limit(limit int32) ApiApiV2ChartReleasesGetRequest {
	r.limit = &limit
	return r
}

func (r ApiApiV2ChartReleasesGetRequest) Execute() ([]V2controllersChartRelease, *http.Response, error) {
	return r.ApiService.ApiV2ChartReleasesGetExecute(r)
}

/*
ApiV2ChartReleasesGet List ChartRelease entries

List existing ChartRelease entries, ordered by most recently updated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2ChartReleasesGetRequest
*/
func (a *ChartReleasesApiService) ApiV2ChartReleasesGet(ctx context.Context) ApiApiV2ChartReleasesGetRequest {
	return ApiApiV2ChartReleasesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []V2controllersChartRelease
func (a *ChartReleasesApiService) ApiV2ChartReleasesGetExecute(r ApiApiV2ChartReleasesGetRequest) ([]V2controllersChartRelease, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []V2controllersChartRelease
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartReleasesApiService.ApiV2ChartReleasesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/chart-releases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.chart != nil {
		localVarQueryParams.Add("chart", parameterToString(*r.chart, ""))
	}
	if r.cluster != nil {
		localVarQueryParams.Add("cluster", parameterToString(*r.cluster, ""))
	}
	if r.createdAt != nil {
		localVarQueryParams.Add("createdAt", parameterToString(*r.createdAt, ""))
	}
	if r.currentAppVersionExact != nil {
		localVarQueryParams.Add("currentAppVersionExact", parameterToString(*r.currentAppVersionExact, ""))
	}
	if r.currentChartVersionExact != nil {
		localVarQueryParams.Add("currentChartVersionExact", parameterToString(*r.currentChartVersionExact, ""))
	}
	if r.destinationType != nil {
		localVarQueryParams.Add("destinationType", parameterToString(*r.destinationType, ""))
	}
	if r.environment != nil {
		localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	}
	if r.helmfileRef != nil {
		localVarQueryParams.Add("helmfileRef", parameterToString(*r.helmfileRef, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.namespace != nil {
		localVarQueryParams.Add("namespace", parameterToString(*r.namespace, ""))
	}
	if r.targetAppVersionBranch != nil {
		localVarQueryParams.Add("targetAppVersionBranch", parameterToString(*r.targetAppVersionBranch, ""))
	}
	if r.targetAppVersionCommit != nil {
		localVarQueryParams.Add("targetAppVersionCommit", parameterToString(*r.targetAppVersionCommit, ""))
	}
	if r.targetAppVersionExact != nil {
		localVarQueryParams.Add("targetAppVersionExact", parameterToString(*r.targetAppVersionExact, ""))
	}
	if r.targetAppVersionUse != nil {
		localVarQueryParams.Add("targetAppVersionUse", parameterToString(*r.targetAppVersionUse, ""))
	}
	if r.targetChartVersionExact != nil {
		localVarQueryParams.Add("targetChartVersionExact", parameterToString(*r.targetChartVersionExact, ""))
	}
	if r.targetChartVersionUse != nil {
		localVarQueryParams.Add("targetChartVersionUse", parameterToString(*r.targetChartVersionUse, ""))
	}
	if r.thelmaMode != nil {
		localVarQueryParams.Add("thelmaMode", parameterToString(*r.thelmaMode, ""))
	}
	if r.updatedAt != nil {
		localVarQueryParams.Add("updatedAt", parameterToString(*r.updatedAt, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 407 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ChartReleasesPostRequest struct {
	ctx context.Context
	ApiService *ChartReleasesApiService
	chartRelease *V2controllersCreatableChartRelease
}

// The ChartRelease to create
func (r ApiApiV2ChartReleasesPostRequest) ChartRelease(chartRelease V2controllersCreatableChartRelease) ApiApiV2ChartReleasesPostRequest {
	r.chartRelease = &chartRelease
	return r
}

func (r ApiApiV2ChartReleasesPostRequest) Execute() (*V2controllersChartRelease, *http.Response, error) {
	return r.ApiService.ApiV2ChartReleasesPostExecute(r)
}

/*
ApiV2ChartReleasesPost Create a new ChartRelease entry

Create a new ChartRelease entry. Note that some fields are immutable after creation; /edit lists mutable fields.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2ChartReleasesPostRequest
*/
func (a *ChartReleasesApiService) ApiV2ChartReleasesPost(ctx context.Context) ApiApiV2ChartReleasesPostRequest {
	return ApiApiV2ChartReleasesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V2controllersChartRelease
func (a *ChartReleasesApiService) ApiV2ChartReleasesPostExecute(r ApiApiV2ChartReleasesPostRequest) (*V2controllersChartRelease, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2controllersChartRelease
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartReleasesApiService.ApiV2ChartReleasesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/chart-releases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chartRelease == nil {
		return localVarReturnValue, nil, reportError("chartRelease is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chartRelease
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 407 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ChartReleasesSelectorDeleteRequest struct {
	ctx context.Context
	ApiService *ChartReleasesApiService
	selector string
}

func (r ApiApiV2ChartReleasesSelectorDeleteRequest) Execute() (*V2controllersChartRelease, *http.Response, error) {
	return r.ApiService.ApiV2ChartReleasesSelectorDeleteExecute(r)
}

/*
ApiV2ChartReleasesSelectorDelete Delete a ChartRelease entry

Delete an existing ChartRelease entry via one of its "selectors": name, numeric ID, environment/chart, or cluster/namespace/chart.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selector The ChartRelease to delete's selector: name or numeric ID
 @return ApiApiV2ChartReleasesSelectorDeleteRequest
*/
func (a *ChartReleasesApiService) ApiV2ChartReleasesSelectorDelete(ctx context.Context, selector string) ApiApiV2ChartReleasesSelectorDeleteRequest {
	return ApiApiV2ChartReleasesSelectorDeleteRequest{
		ApiService: a,
		ctx: ctx,
		selector: selector,
	}
}

// Execute executes the request
//  @return V2controllersChartRelease
func (a *ChartReleasesApiService) ApiV2ChartReleasesSelectorDeleteExecute(r ApiApiV2ChartReleasesSelectorDeleteRequest) (*V2controllersChartRelease, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2controllersChartRelease
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartReleasesApiService.ApiV2ChartReleasesSelectorDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/chart-releases/{selector}"
	localVarPath = strings.Replace(localVarPath, "{"+"selector"+"}", url.PathEscape(parameterToString(r.selector, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 407 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ChartReleasesSelectorGetRequest struct {
	ctx context.Context
	ApiService *ChartReleasesApiService
	selector string
}

func (r ApiApiV2ChartReleasesSelectorGetRequest) Execute() (*V2controllersChartRelease, *http.Response, error) {
	return r.ApiService.ApiV2ChartReleasesSelectorGetExecute(r)
}

/*
ApiV2ChartReleasesSelectorGet Get a ChartRelease entry

Get an existing ChartRelease entry via one of its "selectors": name, numeric ID, environment/chart, or cluster/namespace/chart.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selector The ChartRelease to get's selector: name or numeric ID
 @return ApiApiV2ChartReleasesSelectorGetRequest
*/
func (a *ChartReleasesApiService) ApiV2ChartReleasesSelectorGet(ctx context.Context, selector string) ApiApiV2ChartReleasesSelectorGetRequest {
	return ApiApiV2ChartReleasesSelectorGetRequest{
		ApiService: a,
		ctx: ctx,
		selector: selector,
	}
}

// Execute executes the request
//  @return V2controllersChartRelease
func (a *ChartReleasesApiService) ApiV2ChartReleasesSelectorGetExecute(r ApiApiV2ChartReleasesSelectorGetRequest) (*V2controllersChartRelease, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2controllersChartRelease
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartReleasesApiService.ApiV2ChartReleasesSelectorGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/chart-releases/{selector}"
	localVarPath = strings.Replace(localVarPath, "{"+"selector"+"}", url.PathEscape(parameterToString(r.selector, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 407 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ChartReleasesSelectorPatchRequest struct {
	ctx context.Context
	ApiService *ChartReleasesApiService
	selector string
	chartRelease *V2controllersEditableChartRelease
}

// The edits to make to the ChartRelease
func (r ApiApiV2ChartReleasesSelectorPatchRequest) ChartRelease(chartRelease V2controllersEditableChartRelease) ApiApiV2ChartReleasesSelectorPatchRequest {
	r.chartRelease = &chartRelease
	return r
}

func (r ApiApiV2ChartReleasesSelectorPatchRequest) Execute() (*V2controllersChartRelease, *http.Response, error) {
	return r.ApiService.ApiV2ChartReleasesSelectorPatchExecute(r)
}

/*
ApiV2ChartReleasesSelectorPatch Edit a ChartRelease entry

Edit an existing ChartRelease entry via one of its "selectors": name, numeric ID, environment/chart, or cluster/namespace/chart. Note that only mutable fields are available here, immutable fields can only be set using /create.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selector The ChartRelease to edit's selector: name or numeric ID
 @return ApiApiV2ChartReleasesSelectorPatchRequest
*/
func (a *ChartReleasesApiService) ApiV2ChartReleasesSelectorPatch(ctx context.Context, selector string) ApiApiV2ChartReleasesSelectorPatchRequest {
	return ApiApiV2ChartReleasesSelectorPatchRequest{
		ApiService: a,
		ctx: ctx,
		selector: selector,
	}
}

// Execute executes the request
//  @return V2controllersChartRelease
func (a *ChartReleasesApiService) ApiV2ChartReleasesSelectorPatchExecute(r ApiApiV2ChartReleasesSelectorPatchRequest) (*V2controllersChartRelease, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2controllersChartRelease
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartReleasesApiService.ApiV2ChartReleasesSelectorPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/chart-releases/{selector}"
	localVarPath = strings.Replace(localVarPath, "{"+"selector"+"}", url.PathEscape(parameterToString(r.selector, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chartRelease == nil {
		return localVarReturnValue, nil, reportError("chartRelease is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.chartRelease
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 407 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SelectorsChartReleasesSelectorGetRequest struct {
	ctx context.Context
	ApiService *ChartReleasesApiService
	selector string
}

func (r ApiApiV2SelectorsChartReleasesSelectorGetRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.ApiV2SelectorsChartReleasesSelectorGetExecute(r)
}

/*
ApiV2SelectorsChartReleasesSelectorGet List ChartRelease selectors

Validate a given ChartRelease selector and provide any other selectors that would match the same ChartRelease.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param selector The selector of the ChartRelease to list other selectors for
 @return ApiApiV2SelectorsChartReleasesSelectorGetRequest
*/
func (a *ChartReleasesApiService) ApiV2SelectorsChartReleasesSelectorGet(ctx context.Context, selector string) ApiApiV2SelectorsChartReleasesSelectorGetRequest {
	return ApiApiV2SelectorsChartReleasesSelectorGetRequest{
		ApiService: a,
		ctx: ctx,
		selector: selector,
	}
}

// Execute executes the request
//  @return []string
func (a *ChartReleasesApiService) ApiV2SelectorsChartReleasesSelectorGetExecute(r ApiApiV2SelectorsChartReleasesSelectorGetRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartReleasesApiService.ApiV2SelectorsChartReleasesSelectorGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/selectors/chart-releases/{selector}"
	localVarPath = strings.Replace(localVarPath, "{"+"selector"+"}", url.PathEscape(parameterToString(r.selector, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 407 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorsErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
