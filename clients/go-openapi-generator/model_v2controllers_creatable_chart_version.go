/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// V2controllersCreatableChartVersion struct for V2controllersCreatableChartVersion
type V2controllersCreatableChartVersion struct {
	// Required when creating
	Chart *string `json:"chart,omitempty"`
	// Required when creating
	ChartVersion *string `json:"chartVersion,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V2controllersCreatableChartVersion V2controllersCreatableChartVersion

// NewV2controllersCreatableChartVersion instantiates a new V2controllersCreatableChartVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2controllersCreatableChartVersion() *V2controllersCreatableChartVersion {
	this := V2controllersCreatableChartVersion{}
	return &this
}

// NewV2controllersCreatableChartVersionWithDefaults instantiates a new V2controllersCreatableChartVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2controllersCreatableChartVersionWithDefaults() *V2controllersCreatableChartVersion {
	this := V2controllersCreatableChartVersion{}
	return &this
}

// GetChart returns the Chart field value if set, zero value otherwise.
func (o *V2controllersCreatableChartVersion) GetChart() string {
	if o == nil || o.Chart == nil {
		var ret string
		return ret
	}
	return *o.Chart
}

// GetChartOk returns a tuple with the Chart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersCreatableChartVersion) GetChartOk() (*string, bool) {
	if o == nil || o.Chart == nil {
		return nil, false
	}
	return o.Chart, true
}

// HasChart returns a boolean if a field has been set.
func (o *V2controllersCreatableChartVersion) HasChart() bool {
	if o != nil && o.Chart != nil {
		return true
	}

	return false
}

// SetChart gets a reference to the given string and assigns it to the Chart field.
func (o *V2controllersCreatableChartVersion) SetChart(v string) {
	o.Chart = &v
}

// GetChartVersion returns the ChartVersion field value if set, zero value otherwise.
func (o *V2controllersCreatableChartVersion) GetChartVersion() string {
	if o == nil || o.ChartVersion == nil {
		var ret string
		return ret
	}
	return *o.ChartVersion
}

// GetChartVersionOk returns a tuple with the ChartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersCreatableChartVersion) GetChartVersionOk() (*string, bool) {
	if o == nil || o.ChartVersion == nil {
		return nil, false
	}
	return o.ChartVersion, true
}

// HasChartVersion returns a boolean if a field has been set.
func (o *V2controllersCreatableChartVersion) HasChartVersion() bool {
	if o != nil && o.ChartVersion != nil {
		return true
	}

	return false
}

// SetChartVersion gets a reference to the given string and assigns it to the ChartVersion field.
func (o *V2controllersCreatableChartVersion) SetChartVersion(v string) {
	o.ChartVersion = &v
}

func (o V2controllersCreatableChartVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Chart != nil {
		toSerialize["chart"] = o.Chart
	}
	if o.ChartVersion != nil {
		toSerialize["chartVersion"] = o.ChartVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *V2controllersCreatableChartVersion) UnmarshalJSON(bytes []byte) (err error) {
	varV2controllersCreatableChartVersion := _V2controllersCreatableChartVersion{}

	if err = json.Unmarshal(bytes, &varV2controllersCreatableChartVersion); err == nil {
		*o = V2controllersCreatableChartVersion(varV2controllersCreatableChartVersion)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "chart")
		delete(additionalProperties, "chartVersion")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV2controllersCreatableChartVersion struct {
	value *V2controllersCreatableChartVersion
	isSet bool
}

func (v NullableV2controllersCreatableChartVersion) Get() *V2controllersCreatableChartVersion {
	return v.value
}

func (v *NullableV2controllersCreatableChartVersion) Set(val *V2controllersCreatableChartVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableV2controllersCreatableChartVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableV2controllersCreatableChartVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2controllersCreatableChartVersion(val *V2controllersCreatableChartVersion) *NullableV2controllersCreatableChartVersion {
	return &NullableV2controllersCreatableChartVersion{value: val, isSet: true}
}

func (v NullableV2controllersCreatableChartVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2controllersCreatableChartVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


