/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// MiscStatusResponse struct for MiscStatusResponse
type MiscStatusResponse struct {
	Ok *bool `json:"ok,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MiscStatusResponse MiscStatusResponse

// NewMiscStatusResponse instantiates a new MiscStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscStatusResponse() *MiscStatusResponse {
	this := MiscStatusResponse{}
	return &this
}

// NewMiscStatusResponseWithDefaults instantiates a new MiscStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscStatusResponseWithDefaults() *MiscStatusResponse {
	this := MiscStatusResponse{}
	return &this
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *MiscStatusResponse) GetOk() bool {
	if o == nil || o.Ok == nil {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscStatusResponse) GetOkOk() (*bool, bool) {
	if o == nil || o.Ok == nil {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *MiscStatusResponse) HasOk() bool {
	if o != nil && o.Ok != nil {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *MiscStatusResponse) SetOk(v bool) {
	o.Ok = &v
}

func (o MiscStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ok != nil {
		toSerialize["ok"] = o.Ok
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MiscStatusResponse) UnmarshalJSON(bytes []byte) (err error) {
	varMiscStatusResponse := _MiscStatusResponse{}

	if err = json.Unmarshal(bytes, &varMiscStatusResponse); err == nil {
		*o = MiscStatusResponse(varMiscStatusResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ok")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscStatusResponse struct {
	value *MiscStatusResponse
	isSet bool
}

func (v NullableMiscStatusResponse) Get() *MiscStatusResponse {
	return v.value
}

func (v *NullableMiscStatusResponse) Set(val *MiscStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscStatusResponse(val *MiscStatusResponse) *NullableMiscStatusResponse {
	return &NullableMiscStatusResponse{value: val, isSet: true}
}

func (v NullableMiscStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


