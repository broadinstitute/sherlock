/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// V2controllersCreatableAppVersion struct for V2controllersCreatableAppVersion
type V2controllersCreatableAppVersion struct {
	// Required when creating
	AppVersion *string `json:"appVersion,omitempty"`
	// Required when creating
	Chart *string `json:"chart,omitempty"`
	GitBranch *string `json:"gitBranch,omitempty"`
	GitCommit *string `json:"gitCommit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V2controllersCreatableAppVersion V2controllersCreatableAppVersion

// NewV2controllersCreatableAppVersion instantiates a new V2controllersCreatableAppVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2controllersCreatableAppVersion() *V2controllersCreatableAppVersion {
	this := V2controllersCreatableAppVersion{}
	return &this
}

// NewV2controllersCreatableAppVersionWithDefaults instantiates a new V2controllersCreatableAppVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2controllersCreatableAppVersionWithDefaults() *V2controllersCreatableAppVersion {
	this := V2controllersCreatableAppVersion{}
	return &this
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *V2controllersCreatableAppVersion) GetAppVersion() string {
	if o == nil || o.AppVersion == nil {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersCreatableAppVersion) GetAppVersionOk() (*string, bool) {
	if o == nil || o.AppVersion == nil {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *V2controllersCreatableAppVersion) HasAppVersion() bool {
	if o != nil && o.AppVersion != nil {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *V2controllersCreatableAppVersion) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetChart returns the Chart field value if set, zero value otherwise.
func (o *V2controllersCreatableAppVersion) GetChart() string {
	if o == nil || o.Chart == nil {
		var ret string
		return ret
	}
	return *o.Chart
}

// GetChartOk returns a tuple with the Chart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersCreatableAppVersion) GetChartOk() (*string, bool) {
	if o == nil || o.Chart == nil {
		return nil, false
	}
	return o.Chart, true
}

// HasChart returns a boolean if a field has been set.
func (o *V2controllersCreatableAppVersion) HasChart() bool {
	if o != nil && o.Chart != nil {
		return true
	}

	return false
}

// SetChart gets a reference to the given string and assigns it to the Chart field.
func (o *V2controllersCreatableAppVersion) SetChart(v string) {
	o.Chart = &v
}

// GetGitBranch returns the GitBranch field value if set, zero value otherwise.
func (o *V2controllersCreatableAppVersion) GetGitBranch() string {
	if o == nil || o.GitBranch == nil {
		var ret string
		return ret
	}
	return *o.GitBranch
}

// GetGitBranchOk returns a tuple with the GitBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersCreatableAppVersion) GetGitBranchOk() (*string, bool) {
	if o == nil || o.GitBranch == nil {
		return nil, false
	}
	return o.GitBranch, true
}

// HasGitBranch returns a boolean if a field has been set.
func (o *V2controllersCreatableAppVersion) HasGitBranch() bool {
	if o != nil && o.GitBranch != nil {
		return true
	}

	return false
}

// SetGitBranch gets a reference to the given string and assigns it to the GitBranch field.
func (o *V2controllersCreatableAppVersion) SetGitBranch(v string) {
	o.GitBranch = &v
}

// GetGitCommit returns the GitCommit field value if set, zero value otherwise.
func (o *V2controllersCreatableAppVersion) GetGitCommit() string {
	if o == nil || o.GitCommit == nil {
		var ret string
		return ret
	}
	return *o.GitCommit
}

// GetGitCommitOk returns a tuple with the GitCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersCreatableAppVersion) GetGitCommitOk() (*string, bool) {
	if o == nil || o.GitCommit == nil {
		return nil, false
	}
	return o.GitCommit, true
}

// HasGitCommit returns a boolean if a field has been set.
func (o *V2controllersCreatableAppVersion) HasGitCommit() bool {
	if o != nil && o.GitCommit != nil {
		return true
	}

	return false
}

// SetGitCommit gets a reference to the given string and assigns it to the GitCommit field.
func (o *V2controllersCreatableAppVersion) SetGitCommit(v string) {
	o.GitCommit = &v
}

func (o V2controllersCreatableAppVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppVersion != nil {
		toSerialize["appVersion"] = o.AppVersion
	}
	if o.Chart != nil {
		toSerialize["chart"] = o.Chart
	}
	if o.GitBranch != nil {
		toSerialize["gitBranch"] = o.GitBranch
	}
	if o.GitCommit != nil {
		toSerialize["gitCommit"] = o.GitCommit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *V2controllersCreatableAppVersion) UnmarshalJSON(bytes []byte) (err error) {
	varV2controllersCreatableAppVersion := _V2controllersCreatableAppVersion{}

	if err = json.Unmarshal(bytes, &varV2controllersCreatableAppVersion); err == nil {
		*o = V2controllersCreatableAppVersion(varV2controllersCreatableAppVersion)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "appVersion")
		delete(additionalProperties, "chart")
		delete(additionalProperties, "gitBranch")
		delete(additionalProperties, "gitCommit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV2controllersCreatableAppVersion struct {
	value *V2controllersCreatableAppVersion
	isSet bool
}

func (v NullableV2controllersCreatableAppVersion) Get() *V2controllersCreatableAppVersion {
	return v.value
}

func (v *NullableV2controllersCreatableAppVersion) Set(val *V2controllersCreatableAppVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableV2controllersCreatableAppVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableV2controllersCreatableAppVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2controllersCreatableAppVersion(val *V2controllersCreatableAppVersion) *NullableV2controllersCreatableAppVersion {
	return &NullableV2controllersCreatableAppVersion{value: val, isSet: true}
}

func (v NullableV2controllersCreatableAppVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2controllersCreatableAppVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


