/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// V2controllersEditableEnvironment struct for V2controllersEditableEnvironment
type V2controllersEditableEnvironment struct {
	DefaultCluster *string `json:"defaultCluster,omitempty"`
	DefaultNamespace *string `json:"defaultNamespace,omitempty"`
	// When creating, will be set to your email
	Owner *string `json:"owner,omitempty"`
	RequiresSuitability *bool `json:"requiresSuitability,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V2controllersEditableEnvironment V2controllersEditableEnvironment

// NewV2controllersEditableEnvironment instantiates a new V2controllersEditableEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2controllersEditableEnvironment() *V2controllersEditableEnvironment {
	this := V2controllersEditableEnvironment{}
	var requiresSuitability bool = false
	this.RequiresSuitability = &requiresSuitability
	return &this
}

// NewV2controllersEditableEnvironmentWithDefaults instantiates a new V2controllersEditableEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2controllersEditableEnvironmentWithDefaults() *V2controllersEditableEnvironment {
	this := V2controllersEditableEnvironment{}
	var requiresSuitability bool = false
	this.RequiresSuitability = &requiresSuitability
	return &this
}

// GetDefaultCluster returns the DefaultCluster field value if set, zero value otherwise.
func (o *V2controllersEditableEnvironment) GetDefaultCluster() string {
	if o == nil || o.DefaultCluster == nil {
		var ret string
		return ret
	}
	return *o.DefaultCluster
}

// GetDefaultClusterOk returns a tuple with the DefaultCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableEnvironment) GetDefaultClusterOk() (*string, bool) {
	if o == nil || o.DefaultCluster == nil {
		return nil, false
	}
	return o.DefaultCluster, true
}

// HasDefaultCluster returns a boolean if a field has been set.
func (o *V2controllersEditableEnvironment) HasDefaultCluster() bool {
	if o != nil && o.DefaultCluster != nil {
		return true
	}

	return false
}

// SetDefaultCluster gets a reference to the given string and assigns it to the DefaultCluster field.
func (o *V2controllersEditableEnvironment) SetDefaultCluster(v string) {
	o.DefaultCluster = &v
}

// GetDefaultNamespace returns the DefaultNamespace field value if set, zero value otherwise.
func (o *V2controllersEditableEnvironment) GetDefaultNamespace() string {
	if o == nil || o.DefaultNamespace == nil {
		var ret string
		return ret
	}
	return *o.DefaultNamespace
}

// GetDefaultNamespaceOk returns a tuple with the DefaultNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableEnvironment) GetDefaultNamespaceOk() (*string, bool) {
	if o == nil || o.DefaultNamespace == nil {
		return nil, false
	}
	return o.DefaultNamespace, true
}

// HasDefaultNamespace returns a boolean if a field has been set.
func (o *V2controllersEditableEnvironment) HasDefaultNamespace() bool {
	if o != nil && o.DefaultNamespace != nil {
		return true
	}

	return false
}

// SetDefaultNamespace gets a reference to the given string and assigns it to the DefaultNamespace field.
func (o *V2controllersEditableEnvironment) SetDefaultNamespace(v string) {
	o.DefaultNamespace = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *V2controllersEditableEnvironment) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableEnvironment) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *V2controllersEditableEnvironment) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *V2controllersEditableEnvironment) SetOwner(v string) {
	o.Owner = &v
}

// GetRequiresSuitability returns the RequiresSuitability field value if set, zero value otherwise.
func (o *V2controllersEditableEnvironment) GetRequiresSuitability() bool {
	if o == nil || o.RequiresSuitability == nil {
		var ret bool
		return ret
	}
	return *o.RequiresSuitability
}

// GetRequiresSuitabilityOk returns a tuple with the RequiresSuitability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableEnvironment) GetRequiresSuitabilityOk() (*bool, bool) {
	if o == nil || o.RequiresSuitability == nil {
		return nil, false
	}
	return o.RequiresSuitability, true
}

// HasRequiresSuitability returns a boolean if a field has been set.
func (o *V2controllersEditableEnvironment) HasRequiresSuitability() bool {
	if o != nil && o.RequiresSuitability != nil {
		return true
	}

	return false
}

// SetRequiresSuitability gets a reference to the given bool and assigns it to the RequiresSuitability field.
func (o *V2controllersEditableEnvironment) SetRequiresSuitability(v bool) {
	o.RequiresSuitability = &v
}

func (o V2controllersEditableEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultCluster != nil {
		toSerialize["defaultCluster"] = o.DefaultCluster
	}
	if o.DefaultNamespace != nil {
		toSerialize["defaultNamespace"] = o.DefaultNamespace
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.RequiresSuitability != nil {
		toSerialize["requiresSuitability"] = o.RequiresSuitability
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *V2controllersEditableEnvironment) UnmarshalJSON(bytes []byte) (err error) {
	varV2controllersEditableEnvironment := _V2controllersEditableEnvironment{}

	if err = json.Unmarshal(bytes, &varV2controllersEditableEnvironment); err == nil {
		*o = V2controllersEditableEnvironment(varV2controllersEditableEnvironment)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "defaultCluster")
		delete(additionalProperties, "defaultNamespace")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "requiresSuitability")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV2controllersEditableEnvironment struct {
	value *V2controllersEditableEnvironment
	isSet bool
}

func (v NullableV2controllersEditableEnvironment) Get() *V2controllersEditableEnvironment {
	return v.value
}

func (v *NullableV2controllersEditableEnvironment) Set(val *V2controllersEditableEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableV2controllersEditableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableV2controllersEditableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2controllersEditableEnvironment(val *V2controllersEditableEnvironment) *NullableV2controllersEditableEnvironment {
	return &NullableV2controllersEditableEnvironment{value: val, isSet: true}
}

func (v NullableV2controllersEditableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2controllersEditableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


