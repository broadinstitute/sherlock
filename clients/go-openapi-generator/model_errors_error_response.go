/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// ErrorsErrorResponse struct for ErrorsErrorResponse
type ErrorsErrorResponse struct {
	Message *string `json:"message,omitempty"`
	ToBlame *string `json:"toBlame,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrorsErrorResponse ErrorsErrorResponse

// NewErrorsErrorResponse instantiates a new ErrorsErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorsErrorResponse() *ErrorsErrorResponse {
	this := ErrorsErrorResponse{}
	return &this
}

// NewErrorsErrorResponseWithDefaults instantiates a new ErrorsErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorsErrorResponseWithDefaults() *ErrorsErrorResponse {
	this := ErrorsErrorResponse{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorsErrorResponse) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsErrorResponse) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorsErrorResponse) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorsErrorResponse) SetMessage(v string) {
	o.Message = &v
}

// GetToBlame returns the ToBlame field value if set, zero value otherwise.
func (o *ErrorsErrorResponse) GetToBlame() string {
	if o == nil || o.ToBlame == nil {
		var ret string
		return ret
	}
	return *o.ToBlame
}

// GetToBlameOk returns a tuple with the ToBlame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsErrorResponse) GetToBlameOk() (*string, bool) {
	if o == nil || o.ToBlame == nil {
		return nil, false
	}
	return o.ToBlame, true
}

// HasToBlame returns a boolean if a field has been set.
func (o *ErrorsErrorResponse) HasToBlame() bool {
	if o != nil && o.ToBlame != nil {
		return true
	}

	return false
}

// SetToBlame gets a reference to the given string and assigns it to the ToBlame field.
func (o *ErrorsErrorResponse) SetToBlame(v string) {
	o.ToBlame = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ErrorsErrorResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorsErrorResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ErrorsErrorResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ErrorsErrorResponse) SetType(v string) {
	o.Type = &v
}

func (o ErrorsErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.ToBlame != nil {
		toSerialize["toBlame"] = o.ToBlame
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ErrorsErrorResponse) UnmarshalJSON(bytes []byte) (err error) {
	varErrorsErrorResponse := _ErrorsErrorResponse{}

	if err = json.Unmarshal(bytes, &varErrorsErrorResponse); err == nil {
		*o = ErrorsErrorResponse(varErrorsErrorResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "toBlame")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorsErrorResponse struct {
	value *ErrorsErrorResponse
	isSet bool
}

func (v NullableErrorsErrorResponse) Get() *ErrorsErrorResponse {
	return v.value
}

func (v *NullableErrorsErrorResponse) Set(val *ErrorsErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorsErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorsErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorsErrorResponse(val *ErrorsErrorResponse) *NullableErrorsErrorResponse {
	return &NullableErrorsErrorResponse{value: val, isSet: true}
}

func (v NullableErrorsErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorsErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


