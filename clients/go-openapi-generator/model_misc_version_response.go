/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// MiscVersionResponse struct for MiscVersionResponse
type MiscVersionResponse struct {
	BuildInfo *map[string]string `json:"buildInfo,omitempty"`
	GoVersion *string `json:"goVersion,omitempty"`
	Version *string `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MiscVersionResponse MiscVersionResponse

// NewMiscVersionResponse instantiates a new MiscVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscVersionResponse() *MiscVersionResponse {
	this := MiscVersionResponse{}
	return &this
}

// NewMiscVersionResponseWithDefaults instantiates a new MiscVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscVersionResponseWithDefaults() *MiscVersionResponse {
	this := MiscVersionResponse{}
	return &this
}

// GetBuildInfo returns the BuildInfo field value if set, zero value otherwise.
func (o *MiscVersionResponse) GetBuildInfo() map[string]string {
	if o == nil || o.BuildInfo == nil {
		var ret map[string]string
		return ret
	}
	return *o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscVersionResponse) GetBuildInfoOk() (*map[string]string, bool) {
	if o == nil || o.BuildInfo == nil {
		return nil, false
	}
	return o.BuildInfo, true
}

// HasBuildInfo returns a boolean if a field has been set.
func (o *MiscVersionResponse) HasBuildInfo() bool {
	if o != nil && o.BuildInfo != nil {
		return true
	}

	return false
}

// SetBuildInfo gets a reference to the given map[string]string and assigns it to the BuildInfo field.
func (o *MiscVersionResponse) SetBuildInfo(v map[string]string) {
	o.BuildInfo = &v
}

// GetGoVersion returns the GoVersion field value if set, zero value otherwise.
func (o *MiscVersionResponse) GetGoVersion() string {
	if o == nil || o.GoVersion == nil {
		var ret string
		return ret
	}
	return *o.GoVersion
}

// GetGoVersionOk returns a tuple with the GoVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscVersionResponse) GetGoVersionOk() (*string, bool) {
	if o == nil || o.GoVersion == nil {
		return nil, false
	}
	return o.GoVersion, true
}

// HasGoVersion returns a boolean if a field has been set.
func (o *MiscVersionResponse) HasGoVersion() bool {
	if o != nil && o.GoVersion != nil {
		return true
	}

	return false
}

// SetGoVersion gets a reference to the given string and assigns it to the GoVersion field.
func (o *MiscVersionResponse) SetGoVersion(v string) {
	o.GoVersion = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MiscVersionResponse) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscVersionResponse) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MiscVersionResponse) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *MiscVersionResponse) SetVersion(v string) {
	o.Version = &v
}

func (o MiscVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BuildInfo != nil {
		toSerialize["buildInfo"] = o.BuildInfo
	}
	if o.GoVersion != nil {
		toSerialize["goVersion"] = o.GoVersion
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MiscVersionResponse) UnmarshalJSON(bytes []byte) (err error) {
	varMiscVersionResponse := _MiscVersionResponse{}

	if err = json.Unmarshal(bytes, &varMiscVersionResponse); err == nil {
		*o = MiscVersionResponse(varMiscVersionResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "buildInfo")
		delete(additionalProperties, "goVersion")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscVersionResponse struct {
	value *MiscVersionResponse
	isSet bool
}

func (v NullableMiscVersionResponse) Get() *MiscVersionResponse {
	return v.value
}

func (v *NullableMiscVersionResponse) Set(val *MiscVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscVersionResponse(val *MiscVersionResponse) *NullableMiscVersionResponse {
	return &NullableMiscVersionResponse{value: val, isSet: true}
}

func (v NullableMiscVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


