/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// MiscMyUserResponse struct for MiscMyUserResponse
type MiscMyUserResponse struct {
	Email *string `json:"email,omitempty"`
	RawInfo *AuthUser `json:"rawInfo,omitempty"`
	Suitability *string `json:"suitability,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MiscMyUserResponse MiscMyUserResponse

// NewMiscMyUserResponse instantiates a new MiscMyUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMiscMyUserResponse() *MiscMyUserResponse {
	this := MiscMyUserResponse{}
	return &this
}

// NewMiscMyUserResponseWithDefaults instantiates a new MiscMyUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMiscMyUserResponseWithDefaults() *MiscMyUserResponse {
	this := MiscMyUserResponse{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *MiscMyUserResponse) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscMyUserResponse) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *MiscMyUserResponse) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *MiscMyUserResponse) SetEmail(v string) {
	o.Email = &v
}

// GetRawInfo returns the RawInfo field value if set, zero value otherwise.
func (o *MiscMyUserResponse) GetRawInfo() AuthUser {
	if o == nil || o.RawInfo == nil {
		var ret AuthUser
		return ret
	}
	return *o.RawInfo
}

// GetRawInfoOk returns a tuple with the RawInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscMyUserResponse) GetRawInfoOk() (*AuthUser, bool) {
	if o == nil || o.RawInfo == nil {
		return nil, false
	}
	return o.RawInfo, true
}

// HasRawInfo returns a boolean if a field has been set.
func (o *MiscMyUserResponse) HasRawInfo() bool {
	if o != nil && o.RawInfo != nil {
		return true
	}

	return false
}

// SetRawInfo gets a reference to the given AuthUser and assigns it to the RawInfo field.
func (o *MiscMyUserResponse) SetRawInfo(v AuthUser) {
	o.RawInfo = &v
}

// GetSuitability returns the Suitability field value if set, zero value otherwise.
func (o *MiscMyUserResponse) GetSuitability() string {
	if o == nil || o.Suitability == nil {
		var ret string
		return ret
	}
	return *o.Suitability
}

// GetSuitabilityOk returns a tuple with the Suitability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MiscMyUserResponse) GetSuitabilityOk() (*string, bool) {
	if o == nil || o.Suitability == nil {
		return nil, false
	}
	return o.Suitability, true
}

// HasSuitability returns a boolean if a field has been set.
func (o *MiscMyUserResponse) HasSuitability() bool {
	if o != nil && o.Suitability != nil {
		return true
	}

	return false
}

// SetSuitability gets a reference to the given string and assigns it to the Suitability field.
func (o *MiscMyUserResponse) SetSuitability(v string) {
	o.Suitability = &v
}

func (o MiscMyUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.RawInfo != nil {
		toSerialize["rawInfo"] = o.RawInfo
	}
	if o.Suitability != nil {
		toSerialize["suitability"] = o.Suitability
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MiscMyUserResponse) UnmarshalJSON(bytes []byte) (err error) {
	varMiscMyUserResponse := _MiscMyUserResponse{}

	if err = json.Unmarshal(bytes, &varMiscMyUserResponse); err == nil {
		*o = MiscMyUserResponse(varMiscMyUserResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "rawInfo")
		delete(additionalProperties, "suitability")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMiscMyUserResponse struct {
	value *MiscMyUserResponse
	isSet bool
}

func (v NullableMiscMyUserResponse) Get() *MiscMyUserResponse {
	return v.value
}

func (v *NullableMiscMyUserResponse) Set(val *MiscMyUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMiscMyUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMiscMyUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMiscMyUserResponse(val *MiscMyUserResponse) *NullableMiscMyUserResponse {
	return &NullableMiscMyUserResponse{value: val, isSet: true}
}

func (v NullableMiscMyUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMiscMyUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


