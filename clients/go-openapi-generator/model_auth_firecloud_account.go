/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// AuthFirecloudAccount struct for AuthFirecloudAccount
type AuthFirecloudAccount struct {
	AcceptedGoogleTerms *bool `json:"acceptedGoogleTerms,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	Email *string `json:"email,omitempty"`
	EnrolledIn2Fa *bool `json:"enrolledIn2Fa,omitempty"`
	Groups *AuthFirecloudGroupMembership `json:"groups,omitempty"`
	Suspended *bool `json:"suspended,omitempty"`
	SuspensionReason *string `json:"suspensionReason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthFirecloudAccount AuthFirecloudAccount

// NewAuthFirecloudAccount instantiates a new AuthFirecloudAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthFirecloudAccount() *AuthFirecloudAccount {
	this := AuthFirecloudAccount{}
	return &this
}

// NewAuthFirecloudAccountWithDefaults instantiates a new AuthFirecloudAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthFirecloudAccountWithDefaults() *AuthFirecloudAccount {
	this := AuthFirecloudAccount{}
	return &this
}

// GetAcceptedGoogleTerms returns the AcceptedGoogleTerms field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetAcceptedGoogleTerms() bool {
	if o == nil || o.AcceptedGoogleTerms == nil {
		var ret bool
		return ret
	}
	return *o.AcceptedGoogleTerms
}

// GetAcceptedGoogleTermsOk returns a tuple with the AcceptedGoogleTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetAcceptedGoogleTermsOk() (*bool, bool) {
	if o == nil || o.AcceptedGoogleTerms == nil {
		return nil, false
	}
	return o.AcceptedGoogleTerms, true
}

// HasAcceptedGoogleTerms returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasAcceptedGoogleTerms() bool {
	if o != nil && o.AcceptedGoogleTerms != nil {
		return true
	}

	return false
}

// SetAcceptedGoogleTerms gets a reference to the given bool and assigns it to the AcceptedGoogleTerms field.
func (o *AuthFirecloudAccount) SetAcceptedGoogleTerms(v bool) {
	o.AcceptedGoogleTerms = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetArchived() bool {
	if o == nil || o.Archived == nil {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetArchivedOk() (*bool, bool) {
	if o == nil || o.Archived == nil {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasArchived() bool {
	if o != nil && o.Archived != nil {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *AuthFirecloudAccount) SetArchived(v bool) {
	o.Archived = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthFirecloudAccount) SetEmail(v string) {
	o.Email = &v
}

// GetEnrolledIn2Fa returns the EnrolledIn2Fa field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetEnrolledIn2Fa() bool {
	if o == nil || o.EnrolledIn2Fa == nil {
		var ret bool
		return ret
	}
	return *o.EnrolledIn2Fa
}

// GetEnrolledIn2FaOk returns a tuple with the EnrolledIn2Fa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetEnrolledIn2FaOk() (*bool, bool) {
	if o == nil || o.EnrolledIn2Fa == nil {
		return nil, false
	}
	return o.EnrolledIn2Fa, true
}

// HasEnrolledIn2Fa returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasEnrolledIn2Fa() bool {
	if o != nil && o.EnrolledIn2Fa != nil {
		return true
	}

	return false
}

// SetEnrolledIn2Fa gets a reference to the given bool and assigns it to the EnrolledIn2Fa field.
func (o *AuthFirecloudAccount) SetEnrolledIn2Fa(v bool) {
	o.EnrolledIn2Fa = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetGroups() AuthFirecloudGroupMembership {
	if o == nil || o.Groups == nil {
		var ret AuthFirecloudGroupMembership
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetGroupsOk() (*AuthFirecloudGroupMembership, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given AuthFirecloudGroupMembership and assigns it to the Groups field.
func (o *AuthFirecloudAccount) SetGroups(v AuthFirecloudGroupMembership) {
	o.Groups = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetSuspended() bool {
	if o == nil || o.Suspended == nil {
		var ret bool
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetSuspendedOk() (*bool, bool) {
	if o == nil || o.Suspended == nil {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasSuspended() bool {
	if o != nil && o.Suspended != nil {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given bool and assigns it to the Suspended field.
func (o *AuthFirecloudAccount) SetSuspended(v bool) {
	o.Suspended = &v
}

// GetSuspensionReason returns the SuspensionReason field value if set, zero value otherwise.
func (o *AuthFirecloudAccount) GetSuspensionReason() string {
	if o == nil || o.SuspensionReason == nil {
		var ret string
		return ret
	}
	return *o.SuspensionReason
}

// GetSuspensionReasonOk returns a tuple with the SuspensionReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudAccount) GetSuspensionReasonOk() (*string, bool) {
	if o == nil || o.SuspensionReason == nil {
		return nil, false
	}
	return o.SuspensionReason, true
}

// HasSuspensionReason returns a boolean if a field has been set.
func (o *AuthFirecloudAccount) HasSuspensionReason() bool {
	if o != nil && o.SuspensionReason != nil {
		return true
	}

	return false
}

// SetSuspensionReason gets a reference to the given string and assigns it to the SuspensionReason field.
func (o *AuthFirecloudAccount) SetSuspensionReason(v string) {
	o.SuspensionReason = &v
}

func (o AuthFirecloudAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcceptedGoogleTerms != nil {
		toSerialize["acceptedGoogleTerms"] = o.AcceptedGoogleTerms
	}
	if o.Archived != nil {
		toSerialize["archived"] = o.Archived
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.EnrolledIn2Fa != nil {
		toSerialize["enrolledIn2Fa"] = o.EnrolledIn2Fa
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Suspended != nil {
		toSerialize["suspended"] = o.Suspended
	}
	if o.SuspensionReason != nil {
		toSerialize["suspensionReason"] = o.SuspensionReason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AuthFirecloudAccount) UnmarshalJSON(bytes []byte) (err error) {
	varAuthFirecloudAccount := _AuthFirecloudAccount{}

	if err = json.Unmarshal(bytes, &varAuthFirecloudAccount); err == nil {
		*o = AuthFirecloudAccount(varAuthFirecloudAccount)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "acceptedGoogleTerms")
		delete(additionalProperties, "archived")
		delete(additionalProperties, "email")
		delete(additionalProperties, "enrolledIn2Fa")
		delete(additionalProperties, "groups")
		delete(additionalProperties, "suspended")
		delete(additionalProperties, "suspensionReason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthFirecloudAccount struct {
	value *AuthFirecloudAccount
	isSet bool
}

func (v NullableAuthFirecloudAccount) Get() *AuthFirecloudAccount {
	return v.value
}

func (v *NullableAuthFirecloudAccount) Set(val *AuthFirecloudAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthFirecloudAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthFirecloudAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthFirecloudAccount(val *AuthFirecloudAccount) *NullableAuthFirecloudAccount {
	return &NullableAuthFirecloudAccount{value: val, isSet: true}
}

func (v NullableAuthFirecloudAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthFirecloudAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


