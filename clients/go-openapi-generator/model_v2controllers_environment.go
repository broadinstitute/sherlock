/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// V2controllersEnvironment struct for V2controllersEnvironment
type V2controllersEnvironment struct {
	// Required when creating
	Base *string `json:"base,omitempty"`
	// Upon creation of a dynamic environment, if this is true the template's chart releases will be copied to the new environment
	ChartReleasesFromTemplate *bool `json:"chartReleasesFromTemplate,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	DefaultCluster *string `json:"defaultCluster,omitempty"`
	DefaultClusterInfo *V2controllersCluster `json:"defaultClusterInfo,omitempty"`
	DefaultNamespace *string `json:"defaultNamespace,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Lifecycle *string `json:"lifecycle,omitempty"`
	// When creating, will be calculated if dynamic, required otherwise
	Name *string `json:"name,omitempty"`
	// When creating, will be set to your email
	Owner *string `json:"owner,omitempty"`
	RequiresSuitability *bool `json:"requiresSuitability,omitempty"`
	// Required for dynamic environments
	TemplateEnvironment *string `json:"templateEnvironment,omitempty"`
	// Single-layer recursive; provides info of the template environment if this environment has one
	TemplateEnvironmentInfo map[string]interface{} `json:"templateEnvironmentInfo,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	ValuesName *string `json:"valuesName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V2controllersEnvironment V2controllersEnvironment

// NewV2controllersEnvironment instantiates a new V2controllersEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2controllersEnvironment() *V2controllersEnvironment {
	this := V2controllersEnvironment{}
	var chartReleasesFromTemplate bool = true
	this.ChartReleasesFromTemplate = &chartReleasesFromTemplate
	var lifecycle string = "dynamic"
	this.Lifecycle = &lifecycle
	var requiresSuitability bool = false
	this.RequiresSuitability = &requiresSuitability
	return &this
}

// NewV2controllersEnvironmentWithDefaults instantiates a new V2controllersEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2controllersEnvironmentWithDefaults() *V2controllersEnvironment {
	this := V2controllersEnvironment{}
	var chartReleasesFromTemplate bool = true
	this.ChartReleasesFromTemplate = &chartReleasesFromTemplate
	var lifecycle string = "dynamic"
	this.Lifecycle = &lifecycle
	var requiresSuitability bool = false
	this.RequiresSuitability = &requiresSuitability
	return &this
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetBase() string {
	if o == nil || o.Base == nil {
		var ret string
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetBaseOk() (*string, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given string and assigns it to the Base field.
func (o *V2controllersEnvironment) SetBase(v string) {
	o.Base = &v
}

// GetChartReleasesFromTemplate returns the ChartReleasesFromTemplate field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetChartReleasesFromTemplate() bool {
	if o == nil || o.ChartReleasesFromTemplate == nil {
		var ret bool
		return ret
	}
	return *o.ChartReleasesFromTemplate
}

// GetChartReleasesFromTemplateOk returns a tuple with the ChartReleasesFromTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetChartReleasesFromTemplateOk() (*bool, bool) {
	if o == nil || o.ChartReleasesFromTemplate == nil {
		return nil, false
	}
	return o.ChartReleasesFromTemplate, true
}

// HasChartReleasesFromTemplate returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasChartReleasesFromTemplate() bool {
	if o != nil && o.ChartReleasesFromTemplate != nil {
		return true
	}

	return false
}

// SetChartReleasesFromTemplate gets a reference to the given bool and assigns it to the ChartReleasesFromTemplate field.
func (o *V2controllersEnvironment) SetChartReleasesFromTemplate(v bool) {
	o.ChartReleasesFromTemplate = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *V2controllersEnvironment) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDefaultCluster returns the DefaultCluster field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetDefaultCluster() string {
	if o == nil || o.DefaultCluster == nil {
		var ret string
		return ret
	}
	return *o.DefaultCluster
}

// GetDefaultClusterOk returns a tuple with the DefaultCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetDefaultClusterOk() (*string, bool) {
	if o == nil || o.DefaultCluster == nil {
		return nil, false
	}
	return o.DefaultCluster, true
}

// HasDefaultCluster returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasDefaultCluster() bool {
	if o != nil && o.DefaultCluster != nil {
		return true
	}

	return false
}

// SetDefaultCluster gets a reference to the given string and assigns it to the DefaultCluster field.
func (o *V2controllersEnvironment) SetDefaultCluster(v string) {
	o.DefaultCluster = &v
}

// GetDefaultClusterInfo returns the DefaultClusterInfo field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetDefaultClusterInfo() V2controllersCluster {
	if o == nil || o.DefaultClusterInfo == nil {
		var ret V2controllersCluster
		return ret
	}
	return *o.DefaultClusterInfo
}

// GetDefaultClusterInfoOk returns a tuple with the DefaultClusterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetDefaultClusterInfoOk() (*V2controllersCluster, bool) {
	if o == nil || o.DefaultClusterInfo == nil {
		return nil, false
	}
	return o.DefaultClusterInfo, true
}

// HasDefaultClusterInfo returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasDefaultClusterInfo() bool {
	if o != nil && o.DefaultClusterInfo != nil {
		return true
	}

	return false
}

// SetDefaultClusterInfo gets a reference to the given V2controllersCluster and assigns it to the DefaultClusterInfo field.
func (o *V2controllersEnvironment) SetDefaultClusterInfo(v V2controllersCluster) {
	o.DefaultClusterInfo = &v
}

// GetDefaultNamespace returns the DefaultNamespace field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetDefaultNamespace() string {
	if o == nil || o.DefaultNamespace == nil {
		var ret string
		return ret
	}
	return *o.DefaultNamespace
}

// GetDefaultNamespaceOk returns a tuple with the DefaultNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetDefaultNamespaceOk() (*string, bool) {
	if o == nil || o.DefaultNamespace == nil {
		return nil, false
	}
	return o.DefaultNamespace, true
}

// HasDefaultNamespace returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasDefaultNamespace() bool {
	if o != nil && o.DefaultNamespace != nil {
		return true
	}

	return false
}

// SetDefaultNamespace gets a reference to the given string and assigns it to the DefaultNamespace field.
func (o *V2controllersEnvironment) SetDefaultNamespace(v string) {
	o.DefaultNamespace = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V2controllersEnvironment) SetId(v int32) {
	o.Id = &v
}

// GetLifecycle returns the Lifecycle field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetLifecycle() string {
	if o == nil || o.Lifecycle == nil {
		var ret string
		return ret
	}
	return *o.Lifecycle
}

// GetLifecycleOk returns a tuple with the Lifecycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetLifecycleOk() (*string, bool) {
	if o == nil || o.Lifecycle == nil {
		return nil, false
	}
	return o.Lifecycle, true
}

// HasLifecycle returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasLifecycle() bool {
	if o != nil && o.Lifecycle != nil {
		return true
	}

	return false
}

// SetLifecycle gets a reference to the given string and assigns it to the Lifecycle field.
func (o *V2controllersEnvironment) SetLifecycle(v string) {
	o.Lifecycle = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V2controllersEnvironment) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *V2controllersEnvironment) SetOwner(v string) {
	o.Owner = &v
}

// GetRequiresSuitability returns the RequiresSuitability field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetRequiresSuitability() bool {
	if o == nil || o.RequiresSuitability == nil {
		var ret bool
		return ret
	}
	return *o.RequiresSuitability
}

// GetRequiresSuitabilityOk returns a tuple with the RequiresSuitability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetRequiresSuitabilityOk() (*bool, bool) {
	if o == nil || o.RequiresSuitability == nil {
		return nil, false
	}
	return o.RequiresSuitability, true
}

// HasRequiresSuitability returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasRequiresSuitability() bool {
	if o != nil && o.RequiresSuitability != nil {
		return true
	}

	return false
}

// SetRequiresSuitability gets a reference to the given bool and assigns it to the RequiresSuitability field.
func (o *V2controllersEnvironment) SetRequiresSuitability(v bool) {
	o.RequiresSuitability = &v
}

// GetTemplateEnvironment returns the TemplateEnvironment field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetTemplateEnvironment() string {
	if o == nil || o.TemplateEnvironment == nil {
		var ret string
		return ret
	}
	return *o.TemplateEnvironment
}

// GetTemplateEnvironmentOk returns a tuple with the TemplateEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetTemplateEnvironmentOk() (*string, bool) {
	if o == nil || o.TemplateEnvironment == nil {
		return nil, false
	}
	return o.TemplateEnvironment, true
}

// HasTemplateEnvironment returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasTemplateEnvironment() bool {
	if o != nil && o.TemplateEnvironment != nil {
		return true
	}

	return false
}

// SetTemplateEnvironment gets a reference to the given string and assigns it to the TemplateEnvironment field.
func (o *V2controllersEnvironment) SetTemplateEnvironment(v string) {
	o.TemplateEnvironment = &v
}

// GetTemplateEnvironmentInfo returns the TemplateEnvironmentInfo field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetTemplateEnvironmentInfo() map[string]interface{} {
	if o == nil || o.TemplateEnvironmentInfo == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.TemplateEnvironmentInfo
}

// GetTemplateEnvironmentInfoOk returns a tuple with the TemplateEnvironmentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetTemplateEnvironmentInfoOk() (map[string]interface{}, bool) {
	if o == nil || o.TemplateEnvironmentInfo == nil {
		return nil, false
	}
	return o.TemplateEnvironmentInfo, true
}

// HasTemplateEnvironmentInfo returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasTemplateEnvironmentInfo() bool {
	if o != nil && o.TemplateEnvironmentInfo != nil {
		return true
	}

	return false
}

// SetTemplateEnvironmentInfo gets a reference to the given map[string]interface{} and assigns it to the TemplateEnvironmentInfo field.
func (o *V2controllersEnvironment) SetTemplateEnvironmentInfo(v map[string]interface{}) {
	o.TemplateEnvironmentInfo = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *V2controllersEnvironment) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetValuesName returns the ValuesName field value if set, zero value otherwise.
func (o *V2controllersEnvironment) GetValuesName() string {
	if o == nil || o.ValuesName == nil {
		var ret string
		return ret
	}
	return *o.ValuesName
}

// GetValuesNameOk returns a tuple with the ValuesName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEnvironment) GetValuesNameOk() (*string, bool) {
	if o == nil || o.ValuesName == nil {
		return nil, false
	}
	return o.ValuesName, true
}

// HasValuesName returns a boolean if a field has been set.
func (o *V2controllersEnvironment) HasValuesName() bool {
	if o != nil && o.ValuesName != nil {
		return true
	}

	return false
}

// SetValuesName gets a reference to the given string and assigns it to the ValuesName field.
func (o *V2controllersEnvironment) SetValuesName(v string) {
	o.ValuesName = &v
}

func (o V2controllersEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.ChartReleasesFromTemplate != nil {
		toSerialize["chartReleasesFromTemplate"] = o.ChartReleasesFromTemplate
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.DefaultCluster != nil {
		toSerialize["defaultCluster"] = o.DefaultCluster
	}
	if o.DefaultClusterInfo != nil {
		toSerialize["defaultClusterInfo"] = o.DefaultClusterInfo
	}
	if o.DefaultNamespace != nil {
		toSerialize["defaultNamespace"] = o.DefaultNamespace
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Lifecycle != nil {
		toSerialize["lifecycle"] = o.Lifecycle
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.RequiresSuitability != nil {
		toSerialize["requiresSuitability"] = o.RequiresSuitability
	}
	if o.TemplateEnvironment != nil {
		toSerialize["templateEnvironment"] = o.TemplateEnvironment
	}
	if o.TemplateEnvironmentInfo != nil {
		toSerialize["templateEnvironmentInfo"] = o.TemplateEnvironmentInfo
	}
	if o.UpdatedAt != nil {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.ValuesName != nil {
		toSerialize["valuesName"] = o.ValuesName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *V2controllersEnvironment) UnmarshalJSON(bytes []byte) (err error) {
	varV2controllersEnvironment := _V2controllersEnvironment{}

	if err = json.Unmarshal(bytes, &varV2controllersEnvironment); err == nil {
		*o = V2controllersEnvironment(varV2controllersEnvironment)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "base")
		delete(additionalProperties, "chartReleasesFromTemplate")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "defaultCluster")
		delete(additionalProperties, "defaultClusterInfo")
		delete(additionalProperties, "defaultNamespace")
		delete(additionalProperties, "id")
		delete(additionalProperties, "lifecycle")
		delete(additionalProperties, "name")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "requiresSuitability")
		delete(additionalProperties, "templateEnvironment")
		delete(additionalProperties, "templateEnvironmentInfo")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "valuesName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV2controllersEnvironment struct {
	value *V2controllersEnvironment
	isSet bool
}

func (v NullableV2controllersEnvironment) Get() *V2controllersEnvironment {
	return v.value
}

func (v *NullableV2controllersEnvironment) Set(val *V2controllersEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableV2controllersEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableV2controllersEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2controllersEnvironment(val *V2controllersEnvironment) *NullableV2controllersEnvironment {
	return &NullableV2controllersEnvironment{value: val, isSet: true}
}

func (v NullableV2controllersEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2controllersEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


