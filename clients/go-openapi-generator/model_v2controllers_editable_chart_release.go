/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// V2controllersEditableChartRelease struct for V2controllersEditableChartRelease
type V2controllersEditableChartRelease struct {
	CurrentAppVersionExact *string `json:"currentAppVersionExact,omitempty"`
	CurrentChartVersionExact *string `json:"currentChartVersionExact,omitempty"`
	HelmfileRef *string `json:"helmfileRef,omitempty"`
	// When creating, will default to the app's main branch if it has one recorded
	TargetAppVersionBranch *string `json:"targetAppVersionBranch,omitempty"`
	TargetAppVersionCommit *string `json:"targetAppVersionCommit,omitempty"`
	TargetAppVersionExact *string `json:"targetAppVersionExact,omitempty"`
	// When creating, will default to referencing any provided target app version field (exact, then commit, then branch)
	TargetAppVersionUse *string `json:"targetAppVersionUse,omitempty"`
	TargetChartVersionExact *string `json:"targetChartVersionExact,omitempty"`
	// When creating, will default to latest unless an exact target chart version is provided
	TargetChartVersionUse *string `json:"targetChartVersionUse,omitempty"`
	ThelmaMode *string `json:"thelmaMode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V2controllersEditableChartRelease V2controllersEditableChartRelease

// NewV2controllersEditableChartRelease instantiates a new V2controllersEditableChartRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2controllersEditableChartRelease() *V2controllersEditableChartRelease {
	this := V2controllersEditableChartRelease{}
	var helmfileRef string = "HEAD"
	this.HelmfileRef = &helmfileRef
	return &this
}

// NewV2controllersEditableChartReleaseWithDefaults instantiates a new V2controllersEditableChartRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2controllersEditableChartReleaseWithDefaults() *V2controllersEditableChartRelease {
	this := V2controllersEditableChartRelease{}
	var helmfileRef string = "HEAD"
	this.HelmfileRef = &helmfileRef
	return &this
}

// GetCurrentAppVersionExact returns the CurrentAppVersionExact field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetCurrentAppVersionExact() string {
	if o == nil || o.CurrentAppVersionExact == nil {
		var ret string
		return ret
	}
	return *o.CurrentAppVersionExact
}

// GetCurrentAppVersionExactOk returns a tuple with the CurrentAppVersionExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetCurrentAppVersionExactOk() (*string, bool) {
	if o == nil || o.CurrentAppVersionExact == nil {
		return nil, false
	}
	return o.CurrentAppVersionExact, true
}

// HasCurrentAppVersionExact returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasCurrentAppVersionExact() bool {
	if o != nil && o.CurrentAppVersionExact != nil {
		return true
	}

	return false
}

// SetCurrentAppVersionExact gets a reference to the given string and assigns it to the CurrentAppVersionExact field.
func (o *V2controllersEditableChartRelease) SetCurrentAppVersionExact(v string) {
	o.CurrentAppVersionExact = &v
}

// GetCurrentChartVersionExact returns the CurrentChartVersionExact field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetCurrentChartVersionExact() string {
	if o == nil || o.CurrentChartVersionExact == nil {
		var ret string
		return ret
	}
	return *o.CurrentChartVersionExact
}

// GetCurrentChartVersionExactOk returns a tuple with the CurrentChartVersionExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetCurrentChartVersionExactOk() (*string, bool) {
	if o == nil || o.CurrentChartVersionExact == nil {
		return nil, false
	}
	return o.CurrentChartVersionExact, true
}

// HasCurrentChartVersionExact returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasCurrentChartVersionExact() bool {
	if o != nil && o.CurrentChartVersionExact != nil {
		return true
	}

	return false
}

// SetCurrentChartVersionExact gets a reference to the given string and assigns it to the CurrentChartVersionExact field.
func (o *V2controllersEditableChartRelease) SetCurrentChartVersionExact(v string) {
	o.CurrentChartVersionExact = &v
}

// GetHelmfileRef returns the HelmfileRef field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetHelmfileRef() string {
	if o == nil || o.HelmfileRef == nil {
		var ret string
		return ret
	}
	return *o.HelmfileRef
}

// GetHelmfileRefOk returns a tuple with the HelmfileRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetHelmfileRefOk() (*string, bool) {
	if o == nil || o.HelmfileRef == nil {
		return nil, false
	}
	return o.HelmfileRef, true
}

// HasHelmfileRef returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasHelmfileRef() bool {
	if o != nil && o.HelmfileRef != nil {
		return true
	}

	return false
}

// SetHelmfileRef gets a reference to the given string and assigns it to the HelmfileRef field.
func (o *V2controllersEditableChartRelease) SetHelmfileRef(v string) {
	o.HelmfileRef = &v
}

// GetTargetAppVersionBranch returns the TargetAppVersionBranch field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionBranch() string {
	if o == nil || o.TargetAppVersionBranch == nil {
		var ret string
		return ret
	}
	return *o.TargetAppVersionBranch
}

// GetTargetAppVersionBranchOk returns a tuple with the TargetAppVersionBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionBranchOk() (*string, bool) {
	if o == nil || o.TargetAppVersionBranch == nil {
		return nil, false
	}
	return o.TargetAppVersionBranch, true
}

// HasTargetAppVersionBranch returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasTargetAppVersionBranch() bool {
	if o != nil && o.TargetAppVersionBranch != nil {
		return true
	}

	return false
}

// SetTargetAppVersionBranch gets a reference to the given string and assigns it to the TargetAppVersionBranch field.
func (o *V2controllersEditableChartRelease) SetTargetAppVersionBranch(v string) {
	o.TargetAppVersionBranch = &v
}

// GetTargetAppVersionCommit returns the TargetAppVersionCommit field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionCommit() string {
	if o == nil || o.TargetAppVersionCommit == nil {
		var ret string
		return ret
	}
	return *o.TargetAppVersionCommit
}

// GetTargetAppVersionCommitOk returns a tuple with the TargetAppVersionCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionCommitOk() (*string, bool) {
	if o == nil || o.TargetAppVersionCommit == nil {
		return nil, false
	}
	return o.TargetAppVersionCommit, true
}

// HasTargetAppVersionCommit returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasTargetAppVersionCommit() bool {
	if o != nil && o.TargetAppVersionCommit != nil {
		return true
	}

	return false
}

// SetTargetAppVersionCommit gets a reference to the given string and assigns it to the TargetAppVersionCommit field.
func (o *V2controllersEditableChartRelease) SetTargetAppVersionCommit(v string) {
	o.TargetAppVersionCommit = &v
}

// GetTargetAppVersionExact returns the TargetAppVersionExact field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionExact() string {
	if o == nil || o.TargetAppVersionExact == nil {
		var ret string
		return ret
	}
	return *o.TargetAppVersionExact
}

// GetTargetAppVersionExactOk returns a tuple with the TargetAppVersionExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionExactOk() (*string, bool) {
	if o == nil || o.TargetAppVersionExact == nil {
		return nil, false
	}
	return o.TargetAppVersionExact, true
}

// HasTargetAppVersionExact returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasTargetAppVersionExact() bool {
	if o != nil && o.TargetAppVersionExact != nil {
		return true
	}

	return false
}

// SetTargetAppVersionExact gets a reference to the given string and assigns it to the TargetAppVersionExact field.
func (o *V2controllersEditableChartRelease) SetTargetAppVersionExact(v string) {
	o.TargetAppVersionExact = &v
}

// GetTargetAppVersionUse returns the TargetAppVersionUse field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionUse() string {
	if o == nil || o.TargetAppVersionUse == nil {
		var ret string
		return ret
	}
	return *o.TargetAppVersionUse
}

// GetTargetAppVersionUseOk returns a tuple with the TargetAppVersionUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetTargetAppVersionUseOk() (*string, bool) {
	if o == nil || o.TargetAppVersionUse == nil {
		return nil, false
	}
	return o.TargetAppVersionUse, true
}

// HasTargetAppVersionUse returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasTargetAppVersionUse() bool {
	if o != nil && o.TargetAppVersionUse != nil {
		return true
	}

	return false
}

// SetTargetAppVersionUse gets a reference to the given string and assigns it to the TargetAppVersionUse field.
func (o *V2controllersEditableChartRelease) SetTargetAppVersionUse(v string) {
	o.TargetAppVersionUse = &v
}

// GetTargetChartVersionExact returns the TargetChartVersionExact field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetTargetChartVersionExact() string {
	if o == nil || o.TargetChartVersionExact == nil {
		var ret string
		return ret
	}
	return *o.TargetChartVersionExact
}

// GetTargetChartVersionExactOk returns a tuple with the TargetChartVersionExact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetTargetChartVersionExactOk() (*string, bool) {
	if o == nil || o.TargetChartVersionExact == nil {
		return nil, false
	}
	return o.TargetChartVersionExact, true
}

// HasTargetChartVersionExact returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasTargetChartVersionExact() bool {
	if o != nil && o.TargetChartVersionExact != nil {
		return true
	}

	return false
}

// SetTargetChartVersionExact gets a reference to the given string and assigns it to the TargetChartVersionExact field.
func (o *V2controllersEditableChartRelease) SetTargetChartVersionExact(v string) {
	o.TargetChartVersionExact = &v
}

// GetTargetChartVersionUse returns the TargetChartVersionUse field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetTargetChartVersionUse() string {
	if o == nil || o.TargetChartVersionUse == nil {
		var ret string
		return ret
	}
	return *o.TargetChartVersionUse
}

// GetTargetChartVersionUseOk returns a tuple with the TargetChartVersionUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetTargetChartVersionUseOk() (*string, bool) {
	if o == nil || o.TargetChartVersionUse == nil {
		return nil, false
	}
	return o.TargetChartVersionUse, true
}

// HasTargetChartVersionUse returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasTargetChartVersionUse() bool {
	if o != nil && o.TargetChartVersionUse != nil {
		return true
	}

	return false
}

// SetTargetChartVersionUse gets a reference to the given string and assigns it to the TargetChartVersionUse field.
func (o *V2controllersEditableChartRelease) SetTargetChartVersionUse(v string) {
	o.TargetChartVersionUse = &v
}

// GetThelmaMode returns the ThelmaMode field value if set, zero value otherwise.
func (o *V2controllersEditableChartRelease) GetThelmaMode() string {
	if o == nil || o.ThelmaMode == nil {
		var ret string
		return ret
	}
	return *o.ThelmaMode
}

// GetThelmaModeOk returns a tuple with the ThelmaMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V2controllersEditableChartRelease) GetThelmaModeOk() (*string, bool) {
	if o == nil || o.ThelmaMode == nil {
		return nil, false
	}
	return o.ThelmaMode, true
}

// HasThelmaMode returns a boolean if a field has been set.
func (o *V2controllersEditableChartRelease) HasThelmaMode() bool {
	if o != nil && o.ThelmaMode != nil {
		return true
	}

	return false
}

// SetThelmaMode gets a reference to the given string and assigns it to the ThelmaMode field.
func (o *V2controllersEditableChartRelease) SetThelmaMode(v string) {
	o.ThelmaMode = &v
}

func (o V2controllersEditableChartRelease) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentAppVersionExact != nil {
		toSerialize["currentAppVersionExact"] = o.CurrentAppVersionExact
	}
	if o.CurrentChartVersionExact != nil {
		toSerialize["currentChartVersionExact"] = o.CurrentChartVersionExact
	}
	if o.HelmfileRef != nil {
		toSerialize["helmfileRef"] = o.HelmfileRef
	}
	if o.TargetAppVersionBranch != nil {
		toSerialize["targetAppVersionBranch"] = o.TargetAppVersionBranch
	}
	if o.TargetAppVersionCommit != nil {
		toSerialize["targetAppVersionCommit"] = o.TargetAppVersionCommit
	}
	if o.TargetAppVersionExact != nil {
		toSerialize["targetAppVersionExact"] = o.TargetAppVersionExact
	}
	if o.TargetAppVersionUse != nil {
		toSerialize["targetAppVersionUse"] = o.TargetAppVersionUse
	}
	if o.TargetChartVersionExact != nil {
		toSerialize["targetChartVersionExact"] = o.TargetChartVersionExact
	}
	if o.TargetChartVersionUse != nil {
		toSerialize["targetChartVersionUse"] = o.TargetChartVersionUse
	}
	if o.ThelmaMode != nil {
		toSerialize["thelmaMode"] = o.ThelmaMode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *V2controllersEditableChartRelease) UnmarshalJSON(bytes []byte) (err error) {
	varV2controllersEditableChartRelease := _V2controllersEditableChartRelease{}

	if err = json.Unmarshal(bytes, &varV2controllersEditableChartRelease); err == nil {
		*o = V2controllersEditableChartRelease(varV2controllersEditableChartRelease)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "currentAppVersionExact")
		delete(additionalProperties, "currentChartVersionExact")
		delete(additionalProperties, "helmfileRef")
		delete(additionalProperties, "targetAppVersionBranch")
		delete(additionalProperties, "targetAppVersionCommit")
		delete(additionalProperties, "targetAppVersionExact")
		delete(additionalProperties, "targetAppVersionUse")
		delete(additionalProperties, "targetChartVersionExact")
		delete(additionalProperties, "targetChartVersionUse")
		delete(additionalProperties, "thelmaMode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV2controllersEditableChartRelease struct {
	value *V2controllersEditableChartRelease
	isSet bool
}

func (v NullableV2controllersEditableChartRelease) Get() *V2controllersEditableChartRelease {
	return v.value
}

func (v *NullableV2controllersEditableChartRelease) Set(val *V2controllersEditableChartRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableV2controllersEditableChartRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableV2controllersEditableChartRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2controllersEditableChartRelease(val *V2controllersEditableChartRelease) *NullableV2controllersEditableChartRelease {
	return &NullableV2controllersEditableChartRelease{value: val, isSet: true}
}

func (v NullableV2controllersEditableChartRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2controllersEditableChartRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


