/*
Sherlock

The Data Science Platform's source-of-truth service

API version: development
Contact: dsp-devops@broadinstitute.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sherlock

import (
	"encoding/json"
)

// AuthFirecloudGroupMembership struct for AuthFirecloudGroupMembership
type AuthFirecloudGroupMembership struct {
	FcAdmins *bool `json:"fc-admins,omitempty"`
	FirecloudProjectOwners *bool `json:"firecloud-project-owners,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthFirecloudGroupMembership AuthFirecloudGroupMembership

// NewAuthFirecloudGroupMembership instantiates a new AuthFirecloudGroupMembership object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthFirecloudGroupMembership() *AuthFirecloudGroupMembership {
	this := AuthFirecloudGroupMembership{}
	return &this
}

// NewAuthFirecloudGroupMembershipWithDefaults instantiates a new AuthFirecloudGroupMembership object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthFirecloudGroupMembershipWithDefaults() *AuthFirecloudGroupMembership {
	this := AuthFirecloudGroupMembership{}
	return &this
}

// GetFcAdmins returns the FcAdmins field value if set, zero value otherwise.
func (o *AuthFirecloudGroupMembership) GetFcAdmins() bool {
	if o == nil || o.FcAdmins == nil {
		var ret bool
		return ret
	}
	return *o.FcAdmins
}

// GetFcAdminsOk returns a tuple with the FcAdmins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudGroupMembership) GetFcAdminsOk() (*bool, bool) {
	if o == nil || o.FcAdmins == nil {
		return nil, false
	}
	return o.FcAdmins, true
}

// HasFcAdmins returns a boolean if a field has been set.
func (o *AuthFirecloudGroupMembership) HasFcAdmins() bool {
	if o != nil && o.FcAdmins != nil {
		return true
	}

	return false
}

// SetFcAdmins gets a reference to the given bool and assigns it to the FcAdmins field.
func (o *AuthFirecloudGroupMembership) SetFcAdmins(v bool) {
	o.FcAdmins = &v
}

// GetFirecloudProjectOwners returns the FirecloudProjectOwners field value if set, zero value otherwise.
func (o *AuthFirecloudGroupMembership) GetFirecloudProjectOwners() bool {
	if o == nil || o.FirecloudProjectOwners == nil {
		var ret bool
		return ret
	}
	return *o.FirecloudProjectOwners
}

// GetFirecloudProjectOwnersOk returns a tuple with the FirecloudProjectOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthFirecloudGroupMembership) GetFirecloudProjectOwnersOk() (*bool, bool) {
	if o == nil || o.FirecloudProjectOwners == nil {
		return nil, false
	}
	return o.FirecloudProjectOwners, true
}

// HasFirecloudProjectOwners returns a boolean if a field has been set.
func (o *AuthFirecloudGroupMembership) HasFirecloudProjectOwners() bool {
	if o != nil && o.FirecloudProjectOwners != nil {
		return true
	}

	return false
}

// SetFirecloudProjectOwners gets a reference to the given bool and assigns it to the FirecloudProjectOwners field.
func (o *AuthFirecloudGroupMembership) SetFirecloudProjectOwners(v bool) {
	o.FirecloudProjectOwners = &v
}

func (o AuthFirecloudGroupMembership) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FcAdmins != nil {
		toSerialize["fc-admins"] = o.FcAdmins
	}
	if o.FirecloudProjectOwners != nil {
		toSerialize["firecloud-project-owners"] = o.FirecloudProjectOwners
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AuthFirecloudGroupMembership) UnmarshalJSON(bytes []byte) (err error) {
	varAuthFirecloudGroupMembership := _AuthFirecloudGroupMembership{}

	if err = json.Unmarshal(bytes, &varAuthFirecloudGroupMembership); err == nil {
		*o = AuthFirecloudGroupMembership(varAuthFirecloudGroupMembership)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "fc-admins")
		delete(additionalProperties, "firecloud-project-owners")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthFirecloudGroupMembership struct {
	value *AuthFirecloudGroupMembership
	isSet bool
}

func (v NullableAuthFirecloudGroupMembership) Get() *AuthFirecloudGroupMembership {
	return v.value
}

func (v *NullableAuthFirecloudGroupMembership) Set(val *AuthFirecloudGroupMembership) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthFirecloudGroupMembership) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthFirecloudGroupMembership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthFirecloudGroupMembership(val *AuthFirecloudGroupMembership) *NullableAuthFirecloudGroupMembership {
	return &NullableAuthFirecloudGroupMembership{value: val, isSet: true}
}

func (v NullableAuthFirecloudGroupMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthFirecloudGroupMembership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


