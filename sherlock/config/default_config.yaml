# mode should either be "release" or "debug".
# - "release" requires running behind IAP and can connect to a Cloud SQL database.
#   It will use real authentication and authorization.
# - "debug" can run locally but will error if connected to a Cloud SQL database.
#   It will use mock authentication and authorization.
mode: debug

# The primary host name that Sherlock should document itself as running on, used in the
# Swagger docs hosted dynamically. The Swagger page will work with this empty, but other
# tools (like AppSec's scanners) that need a fully valid config will fail.
# Example: "sherlock.dsp-devops-prod.broadinstitute.org"
primaryHost:

# Origins is the list of allowed origins for requests (used for CORS and CSRF protection).
# Each entry should include the scheme, like "https://example.com".
# When empty, all origins will be allowed, which is only suitable for local development where
# cross-origin requests with credentials aren't required.
origins: []

log:
  # Always true when mode="release"
  timestamp: true
  # Always true when mode="release"
  caller: false
  level: debug

db:
  # Can be "pgx" or "cloudsql-postgres". "cloudsql-postgres" won't work in debug mode.
  driver: pgx
  # When using "pgx", should be the host name of the database server.
  # When using "cloudsql-postgres", should be the Cloud SQL instance connection name.
  host: localhost
  # Database user to connect as.
  # When using "cloudsql-postgres" with automatic IAM authentication, this should be the
  # email of the IAM principal without any .gserviceaccount.com suffix.
  user: sherlock
  # Password for the database user to connect as.
  # When using "cloudsql-postgres" with automatic IAM authentication, this should be empty.
  password:
  # The name of the database to connect to.
  name: sherlock
  # When using "pgx", should be the port number the database server is listening on.
  # When using "cloudsql-postgres", should be empty.
  port: 5432
  # The value of the sslmode parameter to use when connecting to the database.
  # When using "pgx" with Cloud SQL proxy, should be "disable".
  # When using "cloudsql-postgres", should be "disable".
  ssl: disable

  cloudSql:
    # When using "pgx", has no effect.
    # When using "cloudsql-postgres", can be enabled to use automatic IAM authentication in place of a password.
    automaticIamAuthEnabled: false

  preparedStatementCache: false
  maxIdleConnections: 50
  maxOpenConnections: 75
  connectionMaxIdleTime: 0s
  connectionMaxLifetime: 0s
  init: true

  livenessPingInterval: 10s

  # retryConnection will repeatedly try to connect to the database to allow it to come online.
  # Helpful to account for delay in either the Cloud SQL proxy (for release mode) or a local Postgres
  # (for debug mode) starting up simultaneously with Sherlock.
  # Sherlock's liveness probe will not activate until this passes.
  retryConnection:
    times: 10
    interval: 1s

  # Configures logging behavior just for the database
  log:
    slowThreshold: 200ms
    ignoreNotFoundWarning: true
    level: warn

# Configures Sherlock's own OIDC provider, not to be confused with its capability to interpret tokens
# from IAP or GitHub Actions.
oidc:
  enable: true
  # The issuer URL of Sherlock itself. This should be scheme + host + "/oidc", because Sherlock
  # serves its own OIDC provider at that sub-path.
  #
  # You can choose whether to provide a publicly addressable URL or not (e.g. a .svc.cluster.local address).
  # If you provide an in-cluster address, that'll work only for stuff that's in the cluster. CLIs or other
  # services won't be able to authenticate against Sherlock (at least not without /etc/hosts tweaks).
  # If you provide a publicly addressable URL (presumably behind IAP), you may need to worry about services
  # being able to get through IAP to contact it. For stuff in the same cluster you can use either hostAliases
  # with a static clusterIP on Sherlock or a CoreDNS rewrite to make in-cluster clients route in-cluster and
  # dodge IAP.
  #
  # (In either case, you can find yourself needing to tweak hostname resolution. Be careful that you don't
  # accidentally set it up such that /api/* requests dodge IAP, because Sherlock will reject that outright.
  # This is why the examples make use of sherlock-oidc as a subdomain and Sherlock supports multiple origins:
  # you can use a separate hostname that goes to the same place as a way to more safely tweak resolution.)
  #
  # An example is https://sherlock-api-service.sherlock.svc.cluster.local/oidc
  # Another example is https://sherlock-oidc.dsp-devops-prod.broadinstitute.org/oidc
  issuerUrl: http://localhost:8080/oidc
  # The *public* side of Sherlock's OIDC issuer. This should be a normally-accessible URL that should
  # go to the same destination as issuerUrl above. This is automatically used in the OIDC discovery
  # config to tell clients how to have *users* authenticate against Sherlock. It's okay for this to be
  # the same as the issuerUrl if that's publicly addressable.
  #
  # An example is https://sherlock-oidc.dsp-devops-prod.broadinstitute.org/oidc
  publicIssuerUrl: http://localhost:8080/oidc

  # The key that Sherlock should use to AES-256 encrypt internal data it sends to clients. This is
  # used in two places by the underlying OIDC library:
  # 1. Encrypting "{Token.ID}:{User.ID}" to create access tokens returned to clients
  # 2. Encrypting "{AuthRequest.ID}" to create authorization codes returned to clients
  # This does need to be rotated but doing so is potentially disruptive; Sherlock will cease
  # respecting access tokens or authorization codes it has issued.
  #
  # Sherlock will error on boot if this doesn't parse from a hex string to 32 bytes. You'll probably
  # want to pass this in the environment with SHERLOCK_oidc_encryptionKeyHex. It should be passed
  # in hex format.
  encryptionKeyHex: 7265706c6163652d6d652d776974682d33322d627974652d6b65792d2d2d2d2d # "replace-me-with-32-byte-key----"
  # The duration that ID and access tokens vended to clients should be valid for.
  tokenDuration: 15m
  # The duration that refresh tokens vended to clients should be valid for.
  refreshTokenDuration: 30m
  # The duration that a particular signing key should be used before being rotated.
  signingKeyPrimaryDuration: 4h
  # The time after which a signing key should be deleted (and its signatures no longer accepted)
  # after it has been rotated. This should be longer than all token durations so that we
  # continue to respect our own signatures until they'd expire on their own.
  signingKeyPostRotationDuration: 2h
  # When enabled, Sherlock will use Google Cloud KMS to symmetrically encrypt the private keys
  # it stores in its own database. This is a defense-in-depth measure to prevent key leakage in
  # the event of SQL injection or other database compromise.
  #
  # This must be true when mode is not "debug".
  signingKeyEncryptionKMSEnable: false
  # The fully-qualified name of the KMS key to use when signingKeyEncryptionKMSEnable is true.
  signingKeyEncryptionKMSKeyName: projects/some-project/locations/some-location/keyRings/some-key-ring/cryptoKeys/some-key


auth:
  githubActionsOIDC:
    issuer: https://token.actions.githubusercontent.com
    allowedOrganizations:
      - broadinstitute

hooks:
  # If Sherlock should act on CiRun state transitions. Hooks are still subject
  # to the third-party-specific flags elsewhere in this file.
  enable: true
  # If true, hooks will be run asynchronously after the initial call into the
  # hooks package.
  asynchronous: true

metrics:
  v2:
    enable: true
    updateIntervalMinutes: 5

retries:
  # The number of times Sherlock will attempt (many) third-party operations
  # before giving up. Setting this to 1 will effectively disable retries.
  # Setting this to 0 will cause Sherlock to retry indefinitely.
  attempts: 3
  # For an error to be retried it must match at least one of these regexes.
  errorRegexesToRetry:
    - "googleapi: Error 500"
    - "googleapi: Error 503"
    - "rpc error: code = Internal desc = Internal error encountered" # Another Google error
    - "googleapi: Error 400: Precondition check failed" # This appears to be an error that we should retry because it is transient
    - "connection reset by peer" # Azure error
  # The base interval between retries. This is fed into an exponential backoff
  # algorithm.
  baseAttemptInterval: 500ms
  # The maximum interval between retries. This sets an upper bound on the
  # exponential backoff algorithm.
  maxAttemptInterval: 3s

pagerduty:
  enable: false

github:
  # When github.enable is true, requests to GitHub will be
  # made based on the individual behavior flags below.
  enable: false
  # When github.enableMocked is true, Sherlock will act as
  # if github.enable is true when the GitHub client is
  # currently mocked. This is set to true in test_config.yaml.
  enableMocked: false

  token: replace me with token starting with "ghp_"

  behaviors:

    # github.behaviors.deployHooks controls whether Sherlock
    # should act upon GitHub-based deploy hooks.
    deployHooks:
      enable: true

    # github.behaviors.collectUserInfo controls whether Sherlock
    # will look up and store GitHub user info
    collectUserInfo:
      enable: true

slack:
  # When slack.enable is true, Sherlock will initiate a
  # websocket connection with Slack upon boot. It will
  # acknowledge all events it receives, even if it isn't
  # configured to act on them (otherwise, Slack will
  # redeliver repeatedly).
  enable: false

  # When slack.enableMocked is true, Sherlock will act as
  # if slack.enable is true when the Slack client is
  # currently mocked. This is set to true in test_config.yaml.
  enableMocked: false

  # slack.debug enables debug logging in the Slack library.
  # Because it doesn't support leveling, the logs appear at
  # the info level.
  debug: false

  appToken: replace me with token starting with "xapp-"
  botToken: replace me with token starting with "xoxb-"

  colors:
    red: "#ef4444" # tailwind's red-500
    green: "#22c55e" # tailwind's green-500

  emoji:
    beehive: dsp-beehive
    beehiveLoading: dsp-beehive-loading
    beehiveWaiting: dsp-beehive-waiting
    succeeded: white_check_mark
    failed: x
    unknown: question
    alert: exclamation

  behaviors:

    # slack.behaviors.deployHooks controls whether Sherlock
    # should act upon Slack-based deploy hooks.
    deployHooks:
      enable: true

    # slack.behaviors.errors controls whether Sherlock should
    # notify a list of channels upon a 500 error.
    errors:
      enable: true
      statusCodes:
        # "Internal Server Error", sometimes used explicitly
        # but mainly Sherlock's default for when it appears
        # that it is to blame for instead of the client.
        - 500
        # "Proxy Authentication Required", used if a request
        # seems not to have been processed by IAP. We notify
        # on it because it is highly unexpected and would
        # indicate a misconfiguration.
        - 407
        # "Forbidden", if Sherlock rejects a request based on
        # its RBAC. We notify as this is a security event.
        - 403
      channels:
        - "#ap-k8s-monitor"
        - "#dsp-devops-security-events"

    # slack.behaviors.permissionChanges controls how Sherlock
    # notifies on changes to User/Role permissions and
    # propagation.
    permissionChanges:
      enable: true
      channels:
        - "#dsp-devops-security-events"

    reactToMentionsWithEmoji:
      enable: true
      emoji: dsp-beehive

    # slack.behaviors.collectUserInfo controls whether Sherlock
    # should look up and store Slack user info.
    collectUserInfo:
      enable: true
      restrictToEmailDomains:
        - "broadinstitute.org"

pactbroker:
  # This URL is used both to contact the broker at runtime and for Sherlock's own testing.
  url: https://pact-broker.dsp-eng-tools.broadinstitute.org
  # This auth is only used to contact the broker at runtime. Test-time authentication should be done
  # with the Pact library's standard `PACT_BROKER_USERNAME`, `PACT_BROKER_PASSWORD`, and/or
  # `PACT_BROKER_TOKEN` environment variables.
  auth:
    username: replace-username
    password: replace-password
  # Whether to enable contacting the broker at runtime. Has no impact on Sherlock's own testing.
  enable: false

argoWorkflows:
  url: https://workflows.dsp-devops.broadinstitute.org

argoCd:
  url: https://argocd.dsp-devops-prod.broadinstitute.org
  chartReleaseUrlFormatString: https://argocd.dsp-devops-prod.broadinstitute.org/applications/argocd/%s
  # Note the double %% in the string, escaping the % that appears naturally in the URL (for %253D, the URL-encoded version of =).
  environmentUrlFormatString: https://argocd.dsp-devops-prod.broadinstitute.org/applications?showFavorites=false&proj=&sync=&health=&namespace=&cluster=&labels=env%%253D%s

model:
  roles:
    # When set, Sherlock won't ever report an Environment/Cluster RequiredRole field as being null.
    # Instead, it will substitute this value in its place (even though it won't be stored in the database).
    # This can be useful in that it means downstream consumers don't need null handling like
    # `requiredRole ?? "all-users"`. While that's simple, it's actually easier at a security/compliance
    # level to say that Sherlock defines it and anything else uses it verbatim. (This was a specific
    # request from appsec for this reason`.)
    #
    # Even if this is set, Sherlock will allow setting the field to empty to clear it out -- but will then
    # respond in the API as if it's been set to this value. Note that the role set here needs to already
    # exist or downstream consumers could have issues.
    substituteEmptyRequiredRoleWithValue:
  environments:
    templates:
      # Uses appVersionResolver = "none", chartVersionResolver = "latest", and helmfileRef = "HEAD"
      autoPopulateCharts:
        - name: honeycomb
  ciRuns:
    # A list of partial CiRuns where if any has a match on all non-zero fields with an actual CiRun,
    # the actual CiRun should be considered a deploy (and should dispatch deploy hooks upon completion).
    # The schema here is defined from models.CiRun (the database type) instead of the API type.
    deployMatchers:
      - platform: github-actions
        githubActionsOwner: broadinstitute
        githubActionsRepo: terra-github-workflows
        githubActionsWorkflowPath: .github/workflows/sync-release.yaml
      - platform: github-actions
        githubActionsOwner: broadinstitute
        githubActionsRepo: terra-github-workflows
        githubActionsWorkflowPath: .github/workflows/sync-environment.yaml

beehive:
    chartReleaseUrlFormatString: https://beehive.dsp-devops-prod.broadinstitute.org/r/chart-release/%s
    environmentUrlFormatString: https://beehive.dsp-devops-prod.broadinstitute.org/r/environment/%s
    pagerdutyIntegrationUrlFormatString: https://beehive.dsp-devops-prod.broadinstitute.org/r/pagerduty-integration/%s
    reviewChangesetsUrl: https://beehive.dsp-devops-prod.broadinstitute.org/review-changesets

# self can be used to override the email and subject ID returned by the "self" package,
# useful for testing or offline development to skip using ADC.
self:
    overrideEmail:
    # The subject ID should be prefixed with the standard "accounts.google.com:" prefix.
    overrideSubjectID:

rolePropagation:
  # If true, Sherlock's boot process will include configuring the standard array of role propagators
  # (configured in the "propagators" section below). If false, the array of propagators will typically
  # be empty, so propagation will have no effect.
  enable: false
  # If true, roles will be propagated asynchronously after requests to the role and role assignment
  # endpoints. If false, roles will be propagated synchronously before those requests are completed.
  asynchronous: true
  # The duration that an individual propagator should be able to run for a single role before being
  # forcibly shut down with an error. This can be overridden for individual propagators by specifying
  # a "timeout" field in their configuration.
  defaultTimeout: 5m
  # The duration after which Sherlock will consider a role's propagation to be stale and in need of
  # re-propagation. This measures against the end of the last propagation (regardless of success).
  driftAlignmentStaleThreshold: 5m
  propagators:

    # devAzureAccount correlates to models.Role.GrantsDevAzureAccount.
    devAzureAccount:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication.
      clientID:
      # The UUID of the Azure AD tenant to work with.
      tenantID: fad90753-2022-4456-9b0a-c7e5b934e408 # azure.dev.envs-terra.bio
      # The path on disk that Sherlock should expect to find a token for federated workload identity.
      tokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The suffix of all accounts in the tenant that Sherlock should manage.
      tenantEmailSuffix: "@test.firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with the memberEmailSuffix to match
      # Sherlock users to Azure Entra ID user emails.
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    # prodAzureAccount correlates to models.Role.GrantsProdAzureAccount.
    prodAzureAccount:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication.
      clientID:
      # The UUID of the Azure AD tenant to work with.
      tenantID: 66bb90ac-8857-4a8a-aa0a-be2186dfa5f9 # firecloud.org
      # The path on disk that Sherlock should expect to find a token for federated workload identity.
      tokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The suffix of all accounts in the tenant that Sherlock should manage.
      tenantEmailSuffix: "@firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with the memberEmailSuffix to match
      # Sherlock users to Azure Entra ID user emails.
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"

    # devAzureB2CAccount correlates to models.Role.GrantsDevAzureAccount. It invites the account
    # provisioned by devAzureAccount.
    devAzureInvitedB2CAccount:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication against the home tenant.
      homeTenantClientID:
      # The UUID of the home Azure AD tenant to work with.
      homeTenantID: fad90753-2022-4456-9b0a-c7e5b934e408 # azure.dev.envs-terra.bio
      # The path on disk that Sherlock should expect to find a token for federated workload identity
      # to use against the home tenant.
      homeTenantTokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The client ID of the Azure AD app to use for authentication against the tenant to invite to.
      inviteTenantClientID:
      # The UUID of the Azure AD tenant to invite home tenant users to.
      inviteTenantID: fd0bc0ef-1747-4ee6-ab3e-d4d6bb882d40 # terradevb2c.onmicrosoft.com
      # The path on disk that Sherlock should expect to find a token for federated workload identity
      # to use against the tenant to invite to.
      inviteTenantTokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The domain of the email addresses in the home tenant. Should match the user principal names in
      # the home tenant.
      homeTenantEmailDomain: "test.firecloud.org"
      # The domain of the identities in the invite tenant. Should match the end of the user principal names
      # in the invite tenant, so that they're like <prefix>_<homeTenantEmailDomain>#EXT#@<inviteTenantIdentityDomain>.
      inviteTenantIdentityDomain: "terradevb2c.onmicrosoft.com"
      # Domains of Sherlock users' emails that should be swapped out with the home tenant email domain
      # to match Sherlock users to Azure Entra ID user emails.
      userEmailDomainsToReplace:
        - "broadinstitute.org"
      # Link to instructions for how users should sign in to their homeTenantEmailDomain account.
      signInInstructionsLink: https://docs.google.com/document/d/1wW0OXFsSxtn4sXOJ5pvAJ_WQWH_aCBwY2cpwMJCSl90/edit
    # prodAzureB2CAccount correlates to models.Role.GrantsProdAzureAccount. It invites the account
    # provisioned by prodAzureAccount.
    prodAzureInvitedB2CAccount:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication against the home tenant.
      homeTenantClientID:
      # The UUID of the home Azure AD tenant to work with.
      homeTenantID: 66bb90ac-8857-4a8a-aa0a-be2186dfa5f9 # firecloud.org
      # The path on disk that Sherlock should expect to find a token for federated workload identity
      # to use against the home tenant.
      homeTenantTokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The client ID of the Azure AD app to use for authentication against the tenant to invite to.
      inviteTenantClientID:
      # The UUID of the Azure AD tenant to invite home tenant users to.
      inviteTenantID: 35ea5de9-1786-4bbb-89cf-25b88261643d # terraprodb2c.onmicrosoft.com
      # The path on disk that Sherlock should expect to find a token for federated workload identity
      # to use against the tenant to invite to.
      inviteTenantTokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The domain of the email addresses in the home tenant. Should match the user principal names in
      # the home tenant.
      homeTenantEmailDomain: "firecloud.org"
      # The domain of the identities in the invite tenant. Should match the end of the user principal names
      # in the invite tenant, so that they're like <prefix>_<homeTenantEmailDomain>#EXT#@<inviteTenantIdentityDomain>.
      inviteTenantIdentityDomain: "terraprodb2c.onmicrosoft.com"
      # Domains of Sherlock users' emails that should be swapped out with the home tenant email domain
      # to match Sherlock users to Azure Entra ID user emails.
      userEmailDomainsToReplace:
        - "broadinstitute.org"
      # Link to instructions for how users should sign in to their homeTenantEmailDomain account.
      signInInstructionsLink: https://docs.google.com/document/d/1wW0OXFsSxtn4sXOJ5pvAJ_WQWH_aCBwY2cpwMJCSl90/edit

    devFirecloudGroup:
      enable: false
      dryRun: false
      # The domain of the Google Workspace, assumed to be the email domain of all members. This should
      # not contain a leading "@".
      workspaceDomain: "test.firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with "@"+workspaceDomain to match
      # Sherlock users to Google Workspace users. This must contain a "@".
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    qaFirecloudGroup:
      enable: false
      dryRun: false
      # The domain of the Google Workspace, assumed to be the email domain of all members. This should
      # not contain a leading "@".
      workspaceDomain: "quality.firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with "@"+workspaceDomain to match
      # Sherlock users to Google Workspace users. This must contain a "@".
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    prodFirecloudGroup:
      enable: false
      dryRun: false
      # The domain of the Google Workspace, assumed to be the email domain of all members. This should
      # not contain a leading "@".
      workspaceDomain: "firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with "@"+workspaceDomain to match
      # Sherlock users to Google Workspace users. This must contain a "@".
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"

    devFirecloudFolderOwner:
      enable: false
      dryRun: false
      # The domain of the Google Workspace, assumed to be the email domain of all members. This should
      # not contain a leading "@".
      workspaceDomain: "test.firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with "@"+workspaceDomain to match
      # Sherlock users to Google Workspace users. This must contain a "@".
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    qaFirecloudFolderOwner:
      enable: false
      dryRun: false
      # The domain of the Google Workspace, assumed to be the email domain of all members. This should
      # not contain a leading "@".
      workspaceDomain: "quality.firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with "@"+workspaceDomain to match
      # Sherlock users to Google Workspace users. This must contain a "@".
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    prodFirecloudFolderOwner:
      enable: false
      dryRun: false
      # The domain of the Google Workspace, assumed to be the email domain of all members. This should
      # not contain a leading "@".
      workspaceDomain: "firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with "@"+workspaceDomain to match
      # Sherlock users to Google Workspace users. This must contain a "@".
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"

    devAzureGroup:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication.
      clientID:
      # The UUID of the Azure AD tenant to work with.
      tenantID: fad90753-2022-4456-9b0a-c7e5b934e408 # azure.dev.envs-terra.bio
      # The path on disk that Sherlock should expect to find a token for federated workload identity.
      tokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The suffix of all member emails. This can be thought of as a filter for what Azure users Sherlock
      # will attempt to propagate roles to. This may contain a "@" (especially useful for "#EXT#@" emails);
      # if it does, then the userEmailSuffixesToReplace must as well.
      memberEmailSuffix: "@test.firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with the memberEmailSuffix to match
      # Sherlock users to Azure Entra ID users.
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    prodAzureGroup:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication.
      clientID:
      # The UUID of the Azure AD tenant to work with.
      tenantID: 66bb90ac-8857-4a8a-aa0a-be2186dfa5f9 # firecloud.org
      # The path on disk that Sherlock should expect to find a token for federated workload identity.
      tokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The suffix of all member emails. This can be thought of as a filter for what Azure users Sherlock
      # will attempt to propagate roles to. This may contain a "@" (especially useful for "#EXT#@" emails);
      # if it does, then the userEmailSuffixesToReplace must as well.
      memberEmailSuffix: "@firecloud.org"
      # Suffixes of Sherlock users' emails that should be swapped out with the memberEmailSuffix to match
      # Sherlock users to Azure Entra ID users.
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"

    # devAzureB2CReader correlates to models.Role.GrantsDevAzureDirectoryRoles. It's the only role we grant currently.
    # Additional roles can be granted by correlating additional propagators with different instantiations and
    # configurations to the same boolean field.
    devAzureB2CReader:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication.
      clientID:
      # The UUID of the Azure AD tenant to work with.
      tenantID: fd0bc0ef-1747-4ee6-ab3e-d4d6bb882d40 # terradevb2c.onmicrosoft.com
      # The path on disk that Sherlock should expect to find a token for federated workload identity.
      tokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The suffix of all member emails. This can be thought of as a filter for what Azure users Sherlock
      # will attempt to propagate roles to. This may contain a "@" (especially useful for "#EXT#@" emails);
      # if it does, then the userEmailSuffixesToReplace must as well.
      memberEmailSuffix: "_test.firecloud.org#EXT#@terradevb2c.onmicrosoft.com"
      # Suffixes of Sherlock users' emails that should be swapped out with the memberEmailSuffix to match
      # Sherlock users to Azure Entra ID users.
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"
    # prodAzureB2CReader correlates to models.Role.GrantsDevAzureDirectoryRoles. It's the only role we grant currently.
    # Additional roles can be granted by correlating additional propagators with different instantiations and
    # configurations to the same boolean field.
    prodAzureB2CReader:
      enable: false
      dryRun: false
      # The client ID of the Azure AD app to use for authentication.
      clientID:
      # The UUID of the Azure AD tenant to work with.
      tenantID: 35ea5de9-1786-4bbb-89cf-25b88261643d # terraprodb2c.onmicrosoft.com
      # The path on disk that Sherlock should expect to find a token for federated workload identity.
      tokenFilePath: /azure-federation/projected-ksa-token.jwt
      # The suffix of all member emails. This can be thought of as a filter for what Azure users Sherlock
      # will attempt to propagate roles to. This may contain a "@" (especially useful for "#EXT#@" emails);
      # if it does, then the userEmailSuffixesToReplace must as well.
      memberEmailSuffix: "_firecloud.org#EXT#@terraprodb2c.onmicrosoft.com"
      # Suffixes of Sherlock users' emails that should be swapped out with the memberEmailSuffix to match
      # Sherlock users to Azure Entra ID users.
      userEmailSuffixesToReplace:
        - "@broadinstitute.org"

    broadInstituteGroup:
      enable: false
      dryRun: false

suitabilitySynchronization:
  enable: true
  behaviors:
    loadIntoDB:
      enable: true
      interval: 60m
      firecloud:
        domain: firecloud.org
    suspendRoleAssignments:
      enable: true
      interval: 1m

# Configuration for Sherlock reading data from the BITS (Broad Information Technology Services) Data Warehouse.
bitsDataWarehouse:
  # If Sherlock should read data from the BITS Data Warehouse tables given below. Note that while Broad employees
  # typically have access to the data warehouse, service accounts need to be granted specific access.
  enable: false
  # If set, use the given project to create BigQuery jobs to query the data warehouse. If unset or set to an
  # empty string, the library will attempt to auto-detect the project based on the credentials. This generally
  # doesn't work locally.
  jobProject: dsp-tools-k8s
  # The full reference, in "<project>.<dataset>.<table>" format, to BITS's people data.
  peopleTable: broad-bits.data_warehouse.people
  # The interval at which Sherlock should update its cache of the people data. This can be long because the data
  # updates pretty slowly (e.g. overnight). Queries do cost money and each replica maintains its own cache.
  peopleUpdateInterval: 1h

firecloudAccountManager:
  # Example entry:
  # ```yaml
  # - domain: test.firecloud.org
  #   # Flag for if to run this config or not. If false, the manager will not run for this domain.
  #   enable: true
  #   # Optional setting to disable the manager from actually making changes. If true, it will still send
  #   # Slack messages if it would've made changes if not for this flag. That means the Slack message load
  #   # can be pretty heavy (since it'll keep wanting to make changes, and do so per-replica) but this can
  #   # be helpful for testing.
  #   dryRun: false
  #   # Optionally, specify an account to impersonate with domain-wide delegation for use with the API.
  #   # When this is unset, Sherlock will use the API as itself. Even if you grant Sherlock's service
  #   # account an admin role, it may not be able to suspend admin users. Letting Sherlock impersonate
  #   # an admin user directly gets around this issue. This user will be automatically added to the
  #   # neverAffectEmails list to avoid Sherlock breaking its own access.
  #   impersonateAccount: "some-admin-user@test.firecloud.org"
  #   # Optional list of emails to restrict the manager to affecting. If empty, all users could be affected
  #   # (depending on neverAffectEmails).
  #   onlyAffectEmails: []
  #   # Optional list of emails to prevent the manager from ever affecting. If empty, all users could be
  #   # affected (depending on onlyAffectEmails).
  #   neverAffectEmails:
  #     - "user-to-never-disable@test.firecloud.org"
  #   # How long to allow a new account to exist without a login before it is disabled. We set this low
  #   # to help make sure the invite emails Google Workspace sends aren't a security risk.
  #   # The largest unit that can be passed here is hours (so it's unambiguous about leap secs etc.)
  #   newAccountGracePeriod: 24h
  #   # How long an account can go without a login before being disabled.
  #   # The largest unit that can be passed here is hours (so it's unambiguous about leap secs etc.)
  #   inactivityThreshold: 2160h
  # ```
