// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package google_workspace_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/api/admin/directory/v1"
)

// NewMockworkspaceClient creates a new instance of MockworkspaceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockworkspaceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockworkspaceClient {
	mock := &MockworkspaceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockworkspaceClient is an autogenerated mock type for the WorkspaceClient type
type MockworkspaceClient struct {
	mock.Mock
}

type MockworkspaceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockworkspaceClient) EXPECT() *MockworkspaceClient_Expecter {
	return &MockworkspaceClient_Expecter{mock: &_m.Mock}
}

// GetCurrentUsers provides a mock function for the type MockworkspaceClient
func (_mock *MockworkspaceClient) GetCurrentUsers(ctx context.Context, domain string) ([]*admin.User, error) {
	ret := _mock.Called(ctx, domain)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUsers")
	}

	var r0 []*admin.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*admin.User, error)); ok {
		return returnFunc(ctx, domain)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*admin.User); ok {
		r0 = returnFunc(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*admin.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockworkspaceClient_GetCurrentUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUsers'
type MockworkspaceClient_GetCurrentUsers_Call struct {
	*mock.Call
}

// GetCurrentUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - domain string
func (_e *MockworkspaceClient_Expecter) GetCurrentUsers(ctx interface{}, domain interface{}) *MockworkspaceClient_GetCurrentUsers_Call {
	return &MockworkspaceClient_GetCurrentUsers_Call{Call: _e.mock.On("GetCurrentUsers", ctx, domain)}
}

func (_c *MockworkspaceClient_GetCurrentUsers_Call) Run(run func(ctx context.Context, domain string)) *MockworkspaceClient_GetCurrentUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockworkspaceClient_GetCurrentUsers_Call) Return(users []*admin.User, err error) *MockworkspaceClient_GetCurrentUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockworkspaceClient_GetCurrentUsers_Call) RunAndReturn(run func(ctx context.Context, domain string) ([]*admin.User, error)) *MockworkspaceClient_GetCurrentUsers_Call {
	_c.Call.Return(run)
	return _c
}

// SuspendUser provides a mock function for the type MockworkspaceClient
func (_mock *MockworkspaceClient) SuspendUser(ctx context.Context, email string) error {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SuspendUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockworkspaceClient_SuspendUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuspendUser'
type MockworkspaceClient_SuspendUser_Call struct {
	*mock.Call
}

// SuspendUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockworkspaceClient_Expecter) SuspendUser(ctx interface{}, email interface{}) *MockworkspaceClient_SuspendUser_Call {
	return &MockworkspaceClient_SuspendUser_Call{Call: _e.mock.On("SuspendUser", ctx, email)}
}

func (_c *MockworkspaceClient_SuspendUser_Call) Run(run func(ctx context.Context, email string)) *MockworkspaceClient_SuspendUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockworkspaceClient_SuspendUser_Call) Return(err error) *MockworkspaceClient_SuspendUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockworkspaceClient_SuspendUser_Call) RunAndReturn(run func(ctx context.Context, email string) error) *MockworkspaceClient_SuspendUser_Call {
	_c.Call.Return(run)
	return _c
}
