// Code generated by mockery v2.32.4. DO NOT EDIT.

package github_mocks

import (
	context "context"

	github "github.com/google/go-github/v58/github"

	mock "github.com/stretchr/testify/mock"
)

// MockMockableActionsClient is an autogenerated mock type for the mockableActionsClient type
type MockMockableActionsClient struct {
	mock.Mock
}

type MockMockableActionsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMockableActionsClient) EXPECT() *MockMockableActionsClient_Expecter {
	return &MockMockableActionsClient_Expecter{mock: &_m.Mock}
}

// CreateWorkflowDispatchEventByFileName provides a mock function with given fields: ctx, owner, repo, workflowFileName, event
func (_m *MockMockableActionsClient) CreateWorkflowDispatchEventByFileName(ctx context.Context, owner string, repo string, workflowFileName string, event github.CreateWorkflowDispatchEventRequest) (*github.Response, error) {
	ret := _m.Called(ctx, owner, repo, workflowFileName, event)

	var r0 *github.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) (*github.Response, error)); ok {
		return rf(ctx, owner, repo, workflowFileName, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) *github.Response); ok {
		r0 = rf(ctx, owner, repo, workflowFileName, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) error); ok {
		r1 = rf(ctx, owner, repo, workflowFileName, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflowDispatchEventByFileName'
type MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call struct {
	*mock.Call
}

// CreateWorkflowDispatchEventByFileName is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - workflowFileName string
//   - event github.CreateWorkflowDispatchEventRequest
func (_e *MockMockableActionsClient_Expecter) CreateWorkflowDispatchEventByFileName(ctx interface{}, owner interface{}, repo interface{}, workflowFileName interface{}, event interface{}) *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call {
	return &MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call{Call: _e.mock.On("CreateWorkflowDispatchEventByFileName", ctx, owner, repo, workflowFileName, event)}
}

func (_c *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call) Run(run func(ctx context.Context, owner string, repo string, workflowFileName string, event github.CreateWorkflowDispatchEventRequest)) *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(github.CreateWorkflowDispatchEventRequest))
	})
	return _c
}

func (_c *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call) Return(_a0 *github.Response, _a1 error) *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call) RunAndReturn(run func(context.Context, string, string, string, github.CreateWorkflowDispatchEventRequest) (*github.Response, error)) *MockMockableActionsClient_CreateWorkflowDispatchEventByFileName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMockableActionsClient creates a new instance of MockMockableActionsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMockableActionsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMockableActionsClient {
	mock := &MockMockableActionsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
