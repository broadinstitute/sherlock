// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package google_bucket_mocks

import (
	"context"

	"cloud.google.com/go/storage"
	"github.com/broadinstitute/sherlock/sherlock/internal/clients/google_bucket"
	mock "github.com/stretchr/testify/mock"
)

// NewMockgcsClient creates a new instance of MockgcsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockgcsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockgcsClient {
	mock := &MockgcsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockgcsClient is an autogenerated mock type for the GcsClient type
type MockgcsClient struct {
	mock.Mock
}

type MockgcsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockgcsClient) EXPECT() *MockgcsClient_Expecter {
	return &MockgcsClient_Expecter{mock: &_m.Mock}
}

// GetBlob provides a mock function for the type MockgcsClient
func (_mock *MockgcsClient) GetBlob(ctx context.Context, bucket_name string, blob_name string) (*storage.ObjectAttrs, error) {
	ret := _mock.Called(ctx, bucket_name, blob_name)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 *storage.ObjectAttrs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*storage.ObjectAttrs, error)); ok {
		return returnFunc(ctx, bucket_name, blob_name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *storage.ObjectAttrs); ok {
		r0 = returnFunc(ctx, bucket_name, blob_name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.ObjectAttrs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucket_name, blob_name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockgcsClient_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockgcsClient_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket_name string
//   - blob_name string
func (_e *MockgcsClient_Expecter) GetBlob(ctx interface{}, bucket_name interface{}, blob_name interface{}) *MockgcsClient_GetBlob_Call {
	return &MockgcsClient_GetBlob_Call{Call: _e.mock.On("GetBlob", ctx, bucket_name, blob_name)}
}

func (_c *MockgcsClient_GetBlob_Call) Run(run func(ctx context.Context, bucket_name string, blob_name string)) *MockgcsClient_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockgcsClient_GetBlob_Call) Return(objectAttrs *storage.ObjectAttrs, err error) *MockgcsClient_GetBlob_Call {
	_c.Call.Return(objectAttrs, err)
	return _c
}

func (_c *MockgcsClient_GetBlob_Call) RunAndReturn(run func(ctx context.Context, bucket_name string, blob_name string) (*storage.ObjectAttrs, error)) *MockgcsClient_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlobs provides a mock function for the type MockgcsClient
func (_mock *MockgcsClient) ListBlobs(ctx context.Context, bucket string) ([]*storage.ObjectAttrs, error) {
	ret := _mock.Called(ctx, bucket)

	if len(ret) == 0 {
		panic("no return value specified for ListBlobs")
	}

	var r0 []*storage.ObjectAttrs
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*storage.ObjectAttrs, error)); ok {
		return returnFunc(ctx, bucket)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*storage.ObjectAttrs); ok {
		r0 = returnFunc(ctx, bucket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*storage.ObjectAttrs)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, bucket)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockgcsClient_ListBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlobs'
type MockgcsClient_ListBlobs_Call struct {
	*mock.Call
}

// ListBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
func (_e *MockgcsClient_Expecter) ListBlobs(ctx interface{}, bucket interface{}) *MockgcsClient_ListBlobs_Call {
	return &MockgcsClient_ListBlobs_Call{Call: _e.mock.On("ListBlobs", ctx, bucket)}
}

func (_c *MockgcsClient_ListBlobs_Call) Run(run func(ctx context.Context, bucket string)) *MockgcsClient_ListBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockgcsClient_ListBlobs_Call) Return(objectAttrss []*storage.ObjectAttrs, err error) *MockgcsClient_ListBlobs_Call {
	_c.Call.Return(objectAttrss, err)
	return _c
}

func (_c *MockgcsClient_ListBlobs_Call) RunAndReturn(run func(ctx context.Context, bucket string) ([]*storage.ObjectAttrs, error)) *MockgcsClient_ListBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBlob provides a mock function for the type MockgcsClient
func (_mock *MockgcsClient) ReadBlob(ctx context.Context, blob *storage.ObjectAttrs) ([]byte, error) {
	ret := _mock.Called(ctx, blob)

	if len(ret) == 0 {
		panic("no return value specified for ReadBlob")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.ObjectAttrs) ([]byte, error)); ok {
		return returnFunc(ctx, blob)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *storage.ObjectAttrs) []byte); ok {
		r0 = returnFunc(ctx, blob)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *storage.ObjectAttrs) error); ok {
		r1 = returnFunc(ctx, blob)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockgcsClient_ReadBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBlob'
type MockgcsClient_ReadBlob_Call struct {
	*mock.Call
}

// ReadBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - blob *storage.ObjectAttrs
func (_e *MockgcsClient_Expecter) ReadBlob(ctx interface{}, blob interface{}) *MockgcsClient_ReadBlob_Call {
	return &MockgcsClient_ReadBlob_Call{Call: _e.mock.On("ReadBlob", ctx, blob)}
}

func (_c *MockgcsClient_ReadBlob_Call) Run(run func(ctx context.Context, blob *storage.ObjectAttrs)) *MockgcsClient_ReadBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *storage.ObjectAttrs
		if args[1] != nil {
			arg1 = args[1].(*storage.ObjectAttrs)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockgcsClient_ReadBlob_Call) Return(bytes []byte, err error) *MockgcsClient_ReadBlob_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockgcsClient_ReadBlob_Call) RunAndReturn(run func(ctx context.Context, blob *storage.ObjectAttrs) ([]byte, error)) *MockgcsClient_ReadBlob_Call {
	_c.Call.Return(run)
	return _c
}

// WriteBlob provides a mock function for the type MockgcsClient
func (_mock *MockgcsClient) WriteBlob(ctx context.Context, blobInfo google_bucket.BlobDetails, file_content []byte) error {
	ret := _mock.Called(ctx, blobInfo, file_content)

	if len(ret) == 0 {
		panic("no return value specified for WriteBlob")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, google_bucket.BlobDetails, []byte) error); ok {
		r0 = returnFunc(ctx, blobInfo, file_content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockgcsClient_WriteBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteBlob'
type MockgcsClient_WriteBlob_Call struct {
	*mock.Call
}

// WriteBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - blobInfo google_bucket.BlobDetails
//   - file_content []byte
func (_e *MockgcsClient_Expecter) WriteBlob(ctx interface{}, blobInfo interface{}, file_content interface{}) *MockgcsClient_WriteBlob_Call {
	return &MockgcsClient_WriteBlob_Call{Call: _e.mock.On("WriteBlob", ctx, blobInfo, file_content)}
}

func (_c *MockgcsClient_WriteBlob_Call) Run(run func(ctx context.Context, blobInfo google_bucket.BlobDetails, file_content []byte)) *MockgcsClient_WriteBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 google_bucket.BlobDetails
		if args[1] != nil {
			arg1 = args[1].(google_bucket.BlobDetails)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockgcsClient_WriteBlob_Call) Return(err error) *MockgcsClient_WriteBlob_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockgcsClient_WriteBlob_Call) RunAndReturn(run func(ctx context.Context, blobInfo google_bucket.BlobDetails, file_content []byte) error) *MockgcsClient_WriteBlob_Call {
	_c.Call.Return(run)
	return _c
}
