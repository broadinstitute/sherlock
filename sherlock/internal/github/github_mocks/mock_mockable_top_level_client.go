// Code generated by mockery v2.32.4. DO NOT EDIT.

package github_mocks

import (
	context "context"
	http "net/http"

	github "github.com/google/go-github/v58/github"

	mock "github.com/stretchr/testify/mock"
)

// MockMockableTopLevelClient is an autogenerated mock type for the mockableTopLevelClient type
type MockMockableTopLevelClient struct {
	mock.Mock
}

type MockMockableTopLevelClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMockableTopLevelClient) EXPECT() *MockMockableTopLevelClient_Expecter {
	return &MockMockableTopLevelClient_Expecter{mock: &_m.Mock}
}

// Do provides a mock function with given fields: ctx, req, v
func (_m *MockMockableTopLevelClient) Do(ctx context.Context, req *http.Request, v interface{}) (*github.Response, error) {
	ret := _m.Called(ctx, req, v)

	var r0 *github.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request, interface{}) (*github.Response, error)); ok {
		return rf(ctx, req, v)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request, interface{}) *github.Response); ok {
		r0 = rf(ctx, req, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request, interface{}) error); ok {
		r1 = rf(ctx, req, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMockableTopLevelClient_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockMockableTopLevelClient_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - ctx context.Context
//   - req *http.Request
//   - v interface{}
func (_e *MockMockableTopLevelClient_Expecter) Do(ctx interface{}, req interface{}, v interface{}) *MockMockableTopLevelClient_Do_Call {
	return &MockMockableTopLevelClient_Do_Call{Call: _e.mock.On("Do", ctx, req, v)}
}

func (_c *MockMockableTopLevelClient_Do_Call) Run(run func(ctx context.Context, req *http.Request, v interface{})) *MockMockableTopLevelClient_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request), args[2].(interface{}))
	})
	return _c
}

func (_c *MockMockableTopLevelClient_Do_Call) Return(_a0 *github.Response, _a1 error) *MockMockableTopLevelClient_Do_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMockableTopLevelClient_Do_Call) RunAndReturn(run func(context.Context, *http.Request, interface{}) (*github.Response, error)) *MockMockableTopLevelClient_Do_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequest provides a mock function with given fields: method, urlStr, body, opts
func (_m *MockMockableTopLevelClient) NewRequest(method string, urlStr string, body interface{}, opts ...github.RequestOption) (*http.Request, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, method, urlStr, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, ...github.RequestOption) (*http.Request, error)); ok {
		return rf(method, urlStr, body, opts...)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, ...github.RequestOption) *http.Request); ok {
		r0 = rf(method, urlStr, body, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, ...github.RequestOption) error); ok {
		r1 = rf(method, urlStr, body, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMockableTopLevelClient_NewRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRequest'
type MockMockableTopLevelClient_NewRequest_Call struct {
	*mock.Call
}

// NewRequest is a helper method to define mock.On call
//   - method string
//   - urlStr string
//   - body interface{}
//   - opts ...github.RequestOption
func (_e *MockMockableTopLevelClient_Expecter) NewRequest(method interface{}, urlStr interface{}, body interface{}, opts ...interface{}) *MockMockableTopLevelClient_NewRequest_Call {
	return &MockMockableTopLevelClient_NewRequest_Call{Call: _e.mock.On("NewRequest",
		append([]interface{}{method, urlStr, body}, opts...)...)}
}

func (_c *MockMockableTopLevelClient_NewRequest_Call) Run(run func(method string, urlStr string, body interface{}, opts ...github.RequestOption)) *MockMockableTopLevelClient_NewRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]github.RequestOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(github.RequestOption)
			}
		}
		run(args[0].(string), args[1].(string), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockMockableTopLevelClient_NewRequest_Call) Return(_a0 *http.Request, _a1 error) *MockMockableTopLevelClient_NewRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMockableTopLevelClient_NewRequest_Call) RunAndReturn(run func(string, string, interface{}, ...github.RequestOption) (*http.Request, error)) *MockMockableTopLevelClient_NewRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMockableTopLevelClient creates a new instance of MockMockableTopLevelClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMockableTopLevelClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMockableTopLevelClient {
	mock := &MockMockableTopLevelClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
