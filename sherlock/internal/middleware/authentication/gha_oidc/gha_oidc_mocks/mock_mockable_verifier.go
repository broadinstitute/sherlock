// Code generated by mockery v2.32.4. DO NOT EDIT.

package gha_oidc_mocks

import (
	context "context"

	gha_oidc_claims "github.com/broadinstitute/sherlock/sherlock/internal/middleware/authentication/gha_oidc/gha_oidc_claims"

	mock "github.com/stretchr/testify/mock"
)

// MockMockableVerifier is an autogenerated mock type for the mockableVerifier type
type MockMockableVerifier struct {
	mock.Mock
}

type MockMockableVerifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMockableVerifier) EXPECT() *MockMockableVerifier_Expecter {
	return &MockMockableVerifier_Expecter{mock: &_m.Mock}
}

// VerifyAndParseClaims provides a mock function with given fields: ctx, rawIDToken
func (_m *MockMockableVerifier) VerifyAndParseClaims(ctx context.Context, rawIDToken string) (gha_oidc_claims.Claims, error) {
	ret := _m.Called(ctx, rawIDToken)

	var r0 gha_oidc_claims.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (gha_oidc_claims.Claims, error)); ok {
		return rf(ctx, rawIDToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) gha_oidc_claims.Claims); ok {
		r0 = rf(ctx, rawIDToken)
	} else {
		r0 = ret.Get(0).(gha_oidc_claims.Claims)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rawIDToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMockableVerifier_VerifyAndParseClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAndParseClaims'
type MockMockableVerifier_VerifyAndParseClaims_Call struct {
	*mock.Call
}

// VerifyAndParseClaims is a helper method to define mock.On call
//   - ctx context.Context
//   - rawIDToken string
func (_e *MockMockableVerifier_Expecter) VerifyAndParseClaims(ctx interface{}, rawIDToken interface{}) *MockMockableVerifier_VerifyAndParseClaims_Call {
	return &MockMockableVerifier_VerifyAndParseClaims_Call{Call: _e.mock.On("VerifyAndParseClaims", ctx, rawIDToken)}
}

func (_c *MockMockableVerifier_VerifyAndParseClaims_Call) Run(run func(ctx context.Context, rawIDToken string)) *MockMockableVerifier_VerifyAndParseClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMockableVerifier_VerifyAndParseClaims_Call) Return(_a0 gha_oidc_claims.Claims, _a1 error) *MockMockableVerifier_VerifyAndParseClaims_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMockableVerifier_VerifyAndParseClaims_Call) RunAndReturn(run func(context.Context, string) (gha_oidc_claims.Claims, error)) *MockMockableVerifier_VerifyAndParseClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMockableVerifier creates a new instance of MockMockableVerifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMockableVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMockableVerifier {
	mock := &MockMockableVerifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
