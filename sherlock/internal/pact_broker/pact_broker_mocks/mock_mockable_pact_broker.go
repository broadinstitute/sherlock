// Code generated by mockery v2.32.4. DO NOT EDIT.

package pact_broker_mocks

import (
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMockablePactBroker is an autogenerated mock type for the mockablePactBroker type
type MockMockablePactBroker struct {
	mock.Mock
}

type MockMockablePactBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMockablePactBroker) EXPECT() *MockMockablePactBroker_Expecter {
	return &MockMockablePactBroker_Expecter{mock: &_m.Mock}
}

// RecordDeployment provides a mock function with given fields: chartName, appVersion, eid
func (_m *MockMockablePactBroker) RecordDeployment(chartName string, appVersion string, eid uuid.UUID) {
	_m.Called(chartName, appVersion, eid)
}

// MockMockablePactBroker_RecordDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordDeployment'
type MockMockablePactBroker_RecordDeployment_Call struct {
	*mock.Call
}

// RecordDeployment is a helper method to define mock.On call
//   - chartName string
//   - appVersion string
//   - eid uuid.UUID
func (_e *MockMockablePactBroker_Expecter) RecordDeployment(chartName interface{}, appVersion interface{}, eid interface{}) *MockMockablePactBroker_RecordDeployment_Call {
	return &MockMockablePactBroker_RecordDeployment_Call{Call: _e.mock.On("RecordDeployment", chartName, appVersion, eid)}
}

func (_c *MockMockablePactBroker_RecordDeployment_Call) Run(run func(chartName string, appVersion string, eid uuid.UUID)) *MockMockablePactBroker_RecordDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockMockablePactBroker_RecordDeployment_Call) Return() *MockMockablePactBroker_RecordDeployment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockMockablePactBroker_RecordDeployment_Call) RunAndReturn(run func(string, string, uuid.UUID)) *MockMockablePactBroker_RecordDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMockablePactBroker creates a new instance of MockMockablePactBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMockablePactBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMockablePactBroker {
	mock := &MockMockablePactBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
