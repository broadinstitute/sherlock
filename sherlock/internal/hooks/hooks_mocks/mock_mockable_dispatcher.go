// Code generated by mockery v2.32.4. DO NOT EDIT.

package hooks_mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	models "github.com/broadinstitute/sherlock/sherlock/internal/models"
)

// MockMockableDispatcher is an autogenerated mock type for the mockableDispatcher type
type MockMockableDispatcher struct {
	mock.Mock
}

type MockMockableDispatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMockableDispatcher) EXPECT() *MockMockableDispatcher_Expecter {
	return &MockMockableDispatcher_Expecter{mock: &_m.Mock}
}

// DispatchGithubActionsDeployHook provides a mock function with given fields: db, hook, ciRun
func (_m *MockMockableDispatcher) DispatchGithubActionsDeployHook(db *gorm.DB, hook models.GithubActionsDeployHook, ciRun models.CiRun) error {
	ret := _m.Called(db, hook, ciRun)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.GithubActionsDeployHook, models.CiRun) error); ok {
		r0 = rf(db, hook, ciRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMockableDispatcher_DispatchGithubActionsDeployHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchGithubActionsDeployHook'
type MockMockableDispatcher_DispatchGithubActionsDeployHook_Call struct {
	*mock.Call
}

// DispatchGithubActionsDeployHook is a helper method to define mock.On call
//   - db *gorm.DB
//   - hook models.GithubActionsDeployHook
//   - ciRun models.CiRun
func (_e *MockMockableDispatcher_Expecter) DispatchGithubActionsDeployHook(db interface{}, hook interface{}, ciRun interface{}) *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call {
	return &MockMockableDispatcher_DispatchGithubActionsDeployHook_Call{Call: _e.mock.On("DispatchGithubActionsDeployHook", db, hook, ciRun)}
}

func (_c *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call) Run(run func(db *gorm.DB, hook models.GithubActionsDeployHook, ciRun models.CiRun)) *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(models.GithubActionsDeployHook), args[2].(models.CiRun))
	})
	return _c
}

func (_c *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call) Return(_a0 error) *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call) RunAndReturn(run func(*gorm.DB, models.GithubActionsDeployHook, models.CiRun) error) *MockMockableDispatcher_DispatchGithubActionsDeployHook_Call {
	_c.Call.Return(run)
	return _c
}

// DispatchSlackCompletionNotification provides a mock function with given fields: ctx, channel, text, succeeded, icon
func (_m *MockMockableDispatcher) DispatchSlackCompletionNotification(ctx context.Context, channel string, text string, succeeded bool, icon *string) error {
	ret := _m.Called(ctx, channel, text, succeeded, icon)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, *string) error); ok {
		r0 = rf(ctx, channel, text, succeeded, icon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMockableDispatcher_DispatchSlackCompletionNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchSlackCompletionNotification'
type MockMockableDispatcher_DispatchSlackCompletionNotification_Call struct {
	*mock.Call
}

// DispatchSlackCompletionNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - channel string
//   - text string
//   - succeeded bool
//   - icon *string
func (_e *MockMockableDispatcher_Expecter) DispatchSlackCompletionNotification(ctx interface{}, channel interface{}, text interface{}, succeeded interface{}, icon interface{}) *MockMockableDispatcher_DispatchSlackCompletionNotification_Call {
	return &MockMockableDispatcher_DispatchSlackCompletionNotification_Call{Call: _e.mock.On("DispatchSlackCompletionNotification", ctx, channel, text, succeeded, icon)}
}

func (_c *MockMockableDispatcher_DispatchSlackCompletionNotification_Call) Run(run func(ctx context.Context, channel string, text string, succeeded bool, icon *string)) *MockMockableDispatcher_DispatchSlackCompletionNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(*string))
	})
	return _c
}

func (_c *MockMockableDispatcher_DispatchSlackCompletionNotification_Call) Return(_a0 error) *MockMockableDispatcher_DispatchSlackCompletionNotification_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMockableDispatcher_DispatchSlackCompletionNotification_Call) RunAndReturn(run func(context.Context, string, string, bool, *string) error) *MockMockableDispatcher_DispatchSlackCompletionNotification_Call {
	_c.Call.Return(run)
	return _c
}

// DispatchSlackDeployHook provides a mock function with given fields: db, hook, ciRun
func (_m *MockMockableDispatcher) DispatchSlackDeployHook(db *gorm.DB, hook models.SlackDeployHook, ciRun models.CiRun) error {
	ret := _m.Called(db, hook, ciRun)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, models.SlackDeployHook, models.CiRun) error); ok {
		r0 = rf(db, hook, ciRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMockableDispatcher_DispatchSlackDeployHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DispatchSlackDeployHook'
type MockMockableDispatcher_DispatchSlackDeployHook_Call struct {
	*mock.Call
}

// DispatchSlackDeployHook is a helper method to define mock.On call
//   - db *gorm.DB
//   - hook models.SlackDeployHook
//   - ciRun models.CiRun
func (_e *MockMockableDispatcher_Expecter) DispatchSlackDeployHook(db interface{}, hook interface{}, ciRun interface{}) *MockMockableDispatcher_DispatchSlackDeployHook_Call {
	return &MockMockableDispatcher_DispatchSlackDeployHook_Call{Call: _e.mock.On("DispatchSlackDeployHook", db, hook, ciRun)}
}

func (_c *MockMockableDispatcher_DispatchSlackDeployHook_Call) Run(run func(db *gorm.DB, hook models.SlackDeployHook, ciRun models.CiRun)) *MockMockableDispatcher_DispatchSlackDeployHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gorm.DB), args[1].(models.SlackDeployHook), args[2].(models.CiRun))
	})
	return _c
}

func (_c *MockMockableDispatcher_DispatchSlackDeployHook_Call) Return(_a0 error) *MockMockableDispatcher_DispatchSlackDeployHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMockableDispatcher_DispatchSlackDeployHook_Call) RunAndReturn(run func(*gorm.DB, models.SlackDeployHook, models.CiRun) error) *MockMockableDispatcher_DispatchSlackDeployHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMockableDispatcher creates a new instance of MockMockableDispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMockableDispatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMockableDispatcher {
	mock := &MockMockableDispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
