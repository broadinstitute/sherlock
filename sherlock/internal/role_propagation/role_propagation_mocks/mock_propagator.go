// Code generated by mockery v2.32.4. DO NOT EDIT.

package role_propagation_mocks

import (
	context "context"

	models "github.com/broadinstitute/sherlock/sherlock/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockPropagator is an autogenerated mock type for the propagator type
type MockPropagator struct {
	mock.Mock
}

type MockPropagator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPropagator) EXPECT() *MockPropagator_Expecter {
	return &MockPropagator_Expecter{mock: &_m.Mock}
}

// Init provides a mock function with given fields: ctx
func (_m *MockPropagator) Init(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPropagator_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockPropagator_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPropagator_Expecter) Init(ctx interface{}) *MockPropagator_Init_Call {
	return &MockPropagator_Init_Call{Call: _e.mock.On("Init", ctx)}
}

func (_c *MockPropagator_Init_Call) Run(run func(ctx context.Context)) *MockPropagator_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPropagator_Init_Call) Return(_a0 error) *MockPropagator_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropagator_Init_Call) RunAndReturn(run func(context.Context) error) *MockPropagator_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockPropagator) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPropagator_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockPropagator_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockPropagator_Expecter) Name() *MockPropagator_Name_Call {
	return &MockPropagator_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockPropagator_Name_Call) Run(run func()) *MockPropagator_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPropagator_Name_Call) Return(_a0 string) *MockPropagator_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropagator_Name_Call) RunAndReturn(run func() string) *MockPropagator_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Propagate provides a mock function with given fields: ctx, role
func (_m *MockPropagator) Propagate(ctx context.Context, role models.Role) ([]string, []error) {
	ret := _m.Called(ctx, role)

	var r0 []string
	var r1 []error
	if rf, ok := ret.Get(0).(func(context.Context, models.Role) ([]string, []error)); ok {
		return rf(ctx, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Role) []string); ok {
		r0 = rf(ctx, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Role) []error); ok {
		r1 = rf(ctx, role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// MockPropagator_Propagate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Propagate'
type MockPropagator_Propagate_Call struct {
	*mock.Call
}

// Propagate is a helper method to define mock.On call
//   - ctx context.Context
//   - role models.Role
func (_e *MockPropagator_Expecter) Propagate(ctx interface{}, role interface{}) *MockPropagator_Propagate_Call {
	return &MockPropagator_Propagate_Call{Call: _e.mock.On("Propagate", ctx, role)}
}

func (_c *MockPropagator_Propagate_Call) Run(run func(ctx context.Context, role models.Role)) *MockPropagator_Propagate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Role))
	})
	return _c
}

func (_c *MockPropagator_Propagate_Call) Return(results []string, errors []error) *MockPropagator_Propagate_Call {
	_c.Call.Return(results, errors)
	return _c
}

func (_c *MockPropagator_Propagate_Call) RunAndReturn(run func(context.Context, models.Role) ([]string, []error)) *MockPropagator_Propagate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPropagator creates a new instance of MockPropagator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPropagator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPropagator {
	mock := &MockPropagator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
