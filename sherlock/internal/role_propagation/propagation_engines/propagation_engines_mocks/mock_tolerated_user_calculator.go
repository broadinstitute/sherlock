// Code generated by mockery v2.32.4. DO NOT EDIT.

package propagation_engines_mocks

import (
	context "context"

	intermediary_user "github.com/broadinstitute/sherlock/sherlock/internal/role_propagation/intermediary_user"
	mock "github.com/stretchr/testify/mock"
)

// MockToleratedUserCalculator is an autogenerated mock type for the ToleratedUserCalculator type
type MockToleratedUserCalculator[Identifier intermediary_user.Identifier] struct {
	mock.Mock
}

type MockToleratedUserCalculator_Expecter[Identifier intermediary_user.Identifier] struct {
	mock *mock.Mock
}

func (_m *MockToleratedUserCalculator[Identifier]) EXPECT() *MockToleratedUserCalculator_Expecter[Identifier] {
	return &MockToleratedUserCalculator_Expecter[Identifier]{mock: &_m.Mock}
}

// CalculateToleratedUsers provides a mock function with given fields: ctx
func (_m *MockToleratedUserCalculator[Identifier]) CalculateToleratedUsers(ctx context.Context) ([]Identifier, error) {
	ret := _m.Called(ctx)

	var r0 []Identifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Identifier, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Identifier); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Identifier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockToleratedUserCalculator_CalculateToleratedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateToleratedUsers'
type MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier intermediary_user.Identifier] struct {
	*mock.Call
}

// CalculateToleratedUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockToleratedUserCalculator_Expecter[Identifier]) CalculateToleratedUsers(ctx interface{}) *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier] {
	return &MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier]{Call: _e.mock.On("CalculateToleratedUsers", ctx)}
}

func (_c *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier]) Run(run func(ctx context.Context)) *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier]) Return(_a0 []Identifier, _a1 error) *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier]) RunAndReturn(run func(context.Context) ([]Identifier, error)) *MockToleratedUserCalculator_CalculateToleratedUsers_Call[Identifier] {
	_c.Call.Return(run)
	return _c
}

// NewMockToleratedUserCalculator creates a new instance of MockToleratedUserCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockToleratedUserCalculator[Identifier intermediary_user.Identifier](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockToleratedUserCalculator[Identifier] {
	mock := &MockToleratedUserCalculator[Identifier]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
