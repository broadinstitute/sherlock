// Code generated by mockery v2.32.4. DO NOT EDIT.

package propagation_engines_mocks

import (
	context "context"

	intermediary_user "github.com/broadinstitute/sherlock/sherlock/internal/role_propagation/intermediary_user"
	koanf "github.com/knadh/koanf"

	mock "github.com/stretchr/testify/mock"

	models "github.com/broadinstitute/sherlock/sherlock/internal/models"
)

// MockPropagationEngine is an autogenerated mock type for the PropagationEngine type
type MockPropagationEngine[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	mock.Mock
}

type MockPropagationEngine_Expecter[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	mock *mock.Mock
}

func (_m *MockPropagationEngine[Grant, Identifier, Fields]) EXPECT() *MockPropagationEngine_Expecter[Grant, Identifier, Fields] {
	return &MockPropagationEngine_Expecter[Grant, Identifier, Fields]{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, grant, identifier, fields
func (_m *MockPropagationEngine[Grant, Identifier, Fields]) Add(ctx context.Context, grant Grant, identifier Identifier, fields Fields) (string, error) {
	ret := _m.Called(ctx, grant, identifier, fields)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Grant, Identifier, Fields) (string, error)); ok {
		return rf(ctx, grant, identifier, fields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Grant, Identifier, Fields) string); ok {
		r0 = rf(ctx, grant, identifier, fields)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Grant, Identifier, Fields) error); ok {
		r1 = rf(ctx, grant, identifier, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPropagationEngine_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockPropagationEngine_Add_Call[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - grant Grant
//   - identifier Identifier
//   - fields Fields
func (_e *MockPropagationEngine_Expecter[Grant, Identifier, Fields]) Add(ctx interface{}, grant interface{}, identifier interface{}, fields interface{}) *MockPropagationEngine_Add_Call[Grant, Identifier, Fields] {
	return &MockPropagationEngine_Add_Call[Grant, Identifier, Fields]{Call: _e.mock.On("Add", ctx, grant, identifier, fields)}
}

func (_c *MockPropagationEngine_Add_Call[Grant, Identifier, Fields]) Run(run func(ctx context.Context, grant Grant, identifier Identifier, fields Fields)) *MockPropagationEngine_Add_Call[Grant, Identifier, Fields] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Grant), args[2].(Identifier), args[3].(Fields))
	})
	return _c
}

func (_c *MockPropagationEngine_Add_Call[Grant, Identifier, Fields]) Return(_a0 string, _a1 error) *MockPropagationEngine_Add_Call[Grant, Identifier, Fields] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPropagationEngine_Add_Call[Grant, Identifier, Fields]) RunAndReturn(run func(context.Context, Grant, Identifier, Fields) (string, error)) *MockPropagationEngine_Add_Call[Grant, Identifier, Fields] {
	_c.Call.Return(run)
	return _c
}

// GenerateDesiredState provides a mock function with given fields: ctx, roleAssignments
func (_m *MockPropagationEngine[Grant, Identifier, Fields]) GenerateDesiredState(ctx context.Context, roleAssignments map[uint]models.RoleAssignment) (map[uint]intermediary_user.IntermediaryUser[Identifier, Fields], error) {
	ret := _m.Called(ctx, roleAssignments)

	var r0 map[uint]intermediary_user.IntermediaryUser[Identifier, Fields]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[uint]models.RoleAssignment) (map[uint]intermediary_user.IntermediaryUser[Identifier, Fields], error)); ok {
		return rf(ctx, roleAssignments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[uint]models.RoleAssignment) map[uint]intermediary_user.IntermediaryUser[Identifier, Fields]); ok {
		r0 = rf(ctx, roleAssignments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint]intermediary_user.IntermediaryUser[Identifier, Fields])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[uint]models.RoleAssignment) error); ok {
		r1 = rf(ctx, roleAssignments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPropagationEngine_GenerateDesiredState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDesiredState'
type MockPropagationEngine_GenerateDesiredState_Call[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	*mock.Call
}

// GenerateDesiredState is a helper method to define mock.On call
//   - ctx context.Context
//   - roleAssignments map[uint]models.RoleAssignment
func (_e *MockPropagationEngine_Expecter[Grant, Identifier, Fields]) GenerateDesiredState(ctx interface{}, roleAssignments interface{}) *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields] {
	return &MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields]{Call: _e.mock.On("GenerateDesiredState", ctx, roleAssignments)}
}

func (_c *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields]) Run(run func(ctx context.Context, roleAssignments map[uint]models.RoleAssignment)) *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[uint]models.RoleAssignment))
	})
	return _c
}

func (_c *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields]) Return(_a0 map[uint]intermediary_user.IntermediaryUser[Identifier, Fields], _a1 error) *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields]) RunAndReturn(run func(context.Context, map[uint]models.RoleAssignment) (map[uint]intermediary_user.IntermediaryUser[Identifier, Fields], error)) *MockPropagationEngine_GenerateDesiredState_Call[Grant, Identifier, Fields] {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx, k
func (_m *MockPropagationEngine[Grant, Identifier, Fields]) Init(ctx context.Context, k *koanf.Koanf) error {
	ret := _m.Called(ctx, k)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *koanf.Koanf) error); ok {
		r0 = rf(ctx, k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPropagationEngine_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockPropagationEngine_Init_Call[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - k *koanf.Koanf
func (_e *MockPropagationEngine_Expecter[Grant, Identifier, Fields]) Init(ctx interface{}, k interface{}) *MockPropagationEngine_Init_Call[Grant, Identifier, Fields] {
	return &MockPropagationEngine_Init_Call[Grant, Identifier, Fields]{Call: _e.mock.On("Init", ctx, k)}
}

func (_c *MockPropagationEngine_Init_Call[Grant, Identifier, Fields]) Run(run func(ctx context.Context, k *koanf.Koanf)) *MockPropagationEngine_Init_Call[Grant, Identifier, Fields] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*koanf.Koanf))
	})
	return _c
}

func (_c *MockPropagationEngine_Init_Call[Grant, Identifier, Fields]) Return(_a0 error) *MockPropagationEngine_Init_Call[Grant, Identifier, Fields] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPropagationEngine_Init_Call[Grant, Identifier, Fields]) RunAndReturn(run func(context.Context, *koanf.Koanf) error) *MockPropagationEngine_Init_Call[Grant, Identifier, Fields] {
	_c.Call.Return(run)
	return _c
}

// LoadCurrentState provides a mock function with given fields: ctx, grant
func (_m *MockPropagationEngine[Grant, Identifier, Fields]) LoadCurrentState(ctx context.Context, grant Grant) ([]intermediary_user.IntermediaryUser[Identifier, Fields], error) {
	ret := _m.Called(ctx, grant)

	var r0 []intermediary_user.IntermediaryUser[Identifier, Fields]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Grant) ([]intermediary_user.IntermediaryUser[Identifier, Fields], error)); ok {
		return rf(ctx, grant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Grant) []intermediary_user.IntermediaryUser[Identifier, Fields]); ok {
		r0 = rf(ctx, grant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]intermediary_user.IntermediaryUser[Identifier, Fields])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, Grant) error); ok {
		r1 = rf(ctx, grant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPropagationEngine_LoadCurrentState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCurrentState'
type MockPropagationEngine_LoadCurrentState_Call[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	*mock.Call
}

// LoadCurrentState is a helper method to define mock.On call
//   - ctx context.Context
//   - grant Grant
func (_e *MockPropagationEngine_Expecter[Grant, Identifier, Fields]) LoadCurrentState(ctx interface{}, grant interface{}) *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields] {
	return &MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields]{Call: _e.mock.On("LoadCurrentState", ctx, grant)}
}

func (_c *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields]) Run(run func(ctx context.Context, grant Grant)) *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Grant))
	})
	return _c
}

func (_c *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields]) Return(_a0 []intermediary_user.IntermediaryUser[Identifier, Fields], _a1 error) *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields]) RunAndReturn(run func(context.Context, Grant) ([]intermediary_user.IntermediaryUser[Identifier, Fields], error)) *MockPropagationEngine_LoadCurrentState_Call[Grant, Identifier, Fields] {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, grant, identifier
func (_m *MockPropagationEngine[Grant, Identifier, Fields]) Remove(ctx context.Context, grant Grant, identifier Identifier) (string, error) {
	ret := _m.Called(ctx, grant, identifier)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Grant, Identifier) (string, error)); ok {
		return rf(ctx, grant, identifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Grant, Identifier) string); ok {
		r0 = rf(ctx, grant, identifier)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Grant, Identifier) error); ok {
		r1 = rf(ctx, grant, identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPropagationEngine_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockPropagationEngine_Remove_Call[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - grant Grant
//   - identifier Identifier
func (_e *MockPropagationEngine_Expecter[Grant, Identifier, Fields]) Remove(ctx interface{}, grant interface{}, identifier interface{}) *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields] {
	return &MockPropagationEngine_Remove_Call[Grant, Identifier, Fields]{Call: _e.mock.On("Remove", ctx, grant, identifier)}
}

func (_c *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields]) Run(run func(ctx context.Context, grant Grant, identifier Identifier)) *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Grant), args[2].(Identifier))
	})
	return _c
}

func (_c *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields]) Return(_a0 string, _a1 error) *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields]) RunAndReturn(run func(context.Context, Grant, Identifier) (string, error)) *MockPropagationEngine_Remove_Call[Grant, Identifier, Fields] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, grant, identifier, oldFields, newFields
func (_m *MockPropagationEngine[Grant, Identifier, Fields]) Update(ctx context.Context, grant Grant, identifier Identifier, oldFields Fields, newFields Fields) (string, error) {
	ret := _m.Called(ctx, grant, identifier, oldFields, newFields)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Grant, Identifier, Fields, Fields) (string, error)); ok {
		return rf(ctx, grant, identifier, oldFields, newFields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Grant, Identifier, Fields, Fields) string); ok {
		r0 = rf(ctx, grant, identifier, oldFields, newFields)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Grant, Identifier, Fields, Fields) error); ok {
		r1 = rf(ctx, grant, identifier, oldFields, newFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPropagationEngine_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPropagationEngine_Update_Call[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - grant Grant
//   - identifier Identifier
//   - oldFields Fields
//   - newFields Fields
func (_e *MockPropagationEngine_Expecter[Grant, Identifier, Fields]) Update(ctx interface{}, grant interface{}, identifier interface{}, oldFields interface{}, newFields interface{}) *MockPropagationEngine_Update_Call[Grant, Identifier, Fields] {
	return &MockPropagationEngine_Update_Call[Grant, Identifier, Fields]{Call: _e.mock.On("Update", ctx, grant, identifier, oldFields, newFields)}
}

func (_c *MockPropagationEngine_Update_Call[Grant, Identifier, Fields]) Run(run func(ctx context.Context, grant Grant, identifier Identifier, oldFields Fields, newFields Fields)) *MockPropagationEngine_Update_Call[Grant, Identifier, Fields] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Grant), args[2].(Identifier), args[3].(Fields), args[4].(Fields))
	})
	return _c
}

func (_c *MockPropagationEngine_Update_Call[Grant, Identifier, Fields]) Return(_a0 string, _a1 error) *MockPropagationEngine_Update_Call[Grant, Identifier, Fields] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPropagationEngine_Update_Call[Grant, Identifier, Fields]) RunAndReturn(run func(context.Context, Grant, Identifier, Fields, Fields) (string, error)) *MockPropagationEngine_Update_Call[Grant, Identifier, Fields] {
	_c.Call.Return(run)
	return _c
}

// NewMockPropagationEngine creates a new instance of MockPropagationEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPropagationEngine[Grant interface{}, Identifier intermediary_user.Identifier, Fields intermediary_user.Fields](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPropagationEngine[Grant, Identifier, Fields] {
	mock := &MockPropagationEngine[Grant, Identifier, Fields]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
