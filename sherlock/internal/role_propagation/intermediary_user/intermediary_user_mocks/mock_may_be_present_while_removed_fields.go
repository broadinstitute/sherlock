// Code generated by mockery v2.32.4. DO NOT EDIT.

package intermediary_user_mocks

import (
	intermediary_user "github.com/broadinstitute/sherlock/sherlock/internal/role_propagation/intermediary_user"
	mock "github.com/stretchr/testify/mock"
)

// MockMayBePresentWhileRemovedFields is an autogenerated mock type for the MayBePresentWhileRemovedFields type
type MockMayBePresentWhileRemovedFields struct {
	mock.Mock
}

type MockMayBePresentWhileRemovedFields_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMayBePresentWhileRemovedFields) EXPECT() *MockMayBePresentWhileRemovedFields_Expecter {
	return &MockMayBePresentWhileRemovedFields_Expecter{mock: &_m.Mock}
}

// EqualTo provides a mock function with given fields: other
func (_m *MockMayBePresentWhileRemovedFields) EqualTo(other intermediary_user.Fields) bool {
	ret := _m.Called(other)

	var r0 bool
	if rf, ok := ret.Get(0).(func(intermediary_user.Fields) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMayBePresentWhileRemovedFields_EqualTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EqualTo'
type MockMayBePresentWhileRemovedFields_EqualTo_Call struct {
	*mock.Call
}

// EqualTo is a helper method to define mock.On call
//   - other intermediary_user.Fields
func (_e *MockMayBePresentWhileRemovedFields_Expecter) EqualTo(other interface{}) *MockMayBePresentWhileRemovedFields_EqualTo_Call {
	return &MockMayBePresentWhileRemovedFields_EqualTo_Call{Call: _e.mock.On("EqualTo", other)}
}

func (_c *MockMayBePresentWhileRemovedFields_EqualTo_Call) Run(run func(other intermediary_user.Fields)) *MockMayBePresentWhileRemovedFields_EqualTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(intermediary_user.Fields))
	})
	return _c
}

func (_c *MockMayBePresentWhileRemovedFields_EqualTo_Call) Return(_a0 bool) *MockMayBePresentWhileRemovedFields_EqualTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMayBePresentWhileRemovedFields_EqualTo_Call) RunAndReturn(run func(intermediary_user.Fields) bool) *MockMayBePresentWhileRemovedFields_EqualTo_Call {
	_c.Call.Return(run)
	return _c
}

// MayConsiderAsAlreadyRemoved provides a mock function with given fields:
func (_m *MockMayBePresentWhileRemovedFields) MayConsiderAsAlreadyRemoved() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MayConsiderAsAlreadyRemoved'
type MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call struct {
	*mock.Call
}

// MayConsiderAsAlreadyRemoved is a helper method to define mock.On call
func (_e *MockMayBePresentWhileRemovedFields_Expecter) MayConsiderAsAlreadyRemoved() *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call {
	return &MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call{Call: _e.mock.On("MayConsiderAsAlreadyRemoved")}
}

func (_c *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call) Run(run func()) *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call) Return(_a0 bool) *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call) RunAndReturn(run func() bool) *MockMayBePresentWhileRemovedFields_MayConsiderAsAlreadyRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMayBePresentWhileRemovedFields creates a new instance of MockMayBePresentWhileRemovedFields. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMayBePresentWhileRemovedFields(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMayBePresentWhileRemovedFields {
	mock := &MockMayBePresentWhileRemovedFields{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
