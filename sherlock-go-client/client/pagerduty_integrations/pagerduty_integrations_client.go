// Code generated by go-swagger; DO NOT EDIT.

package pagerduty_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pagerduty integrations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pagerduty integrations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIPagerdutyIntegrationsV3Selector(params *DeleteAPIPagerdutyIntegrationsV3SelectorParams, opts ...ClientOption) (*DeleteAPIPagerdutyIntegrationsV3SelectorOK, error)

	GetAPIPagerdutyIntegrationsV3(params *GetAPIPagerdutyIntegrationsV3Params, opts ...ClientOption) (*GetAPIPagerdutyIntegrationsV3OK, error)

	GetAPIPagerdutyIntegrationsV3Selector(params *GetAPIPagerdutyIntegrationsV3SelectorParams, opts ...ClientOption) (*GetAPIPagerdutyIntegrationsV3SelectorOK, error)

	PatchAPIPagerdutyIntegrationsV3Selector(params *PatchAPIPagerdutyIntegrationsV3SelectorParams, opts ...ClientOption) (*PatchAPIPagerdutyIntegrationsV3SelectorOK, error)

	PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelector(params *PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorParams, opts ...ClientOption) (*PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorOK, error)

	PostAPIPagerdutyIntegrationsV3(params *PostAPIPagerdutyIntegrationsV3Params, opts ...ClientOption) (*PostAPIPagerdutyIntegrationsV3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIPagerdutyIntegrationsV3Selector deletes an individual pagerduty integration

  Delete an individual PagerdutyIntegration by its ID.
*/
func (a *Client) DeleteAPIPagerdutyIntegrationsV3Selector(params *DeleteAPIPagerdutyIntegrationsV3SelectorParams, opts ...ClientOption) (*DeleteAPIPagerdutyIntegrationsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPagerdutyIntegrationsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIPagerdutyIntegrationsV3Selector",
		Method:             "DELETE",
		PathPattern:        "/api/pagerduty-integrations/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPagerdutyIntegrationsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIPagerdutyIntegrationsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIPagerdutyIntegrationsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIPagerdutyIntegrationsV3 lists pagerduty integrations matching a filter

  List PagerdutyIntegrations matching a filter.
*/
func (a *Client) GetAPIPagerdutyIntegrationsV3(params *GetAPIPagerdutyIntegrationsV3Params, opts ...ClientOption) (*GetAPIPagerdutyIntegrationsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPagerdutyIntegrationsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIPagerdutyIntegrationsV3",
		Method:             "GET",
		PathPattern:        "/api/pagerduty-integrations/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPagerdutyIntegrationsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPagerdutyIntegrationsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIPagerdutyIntegrationsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIPagerdutyIntegrationsV3Selector gets an individual pagerduty integration

  Get an individual PagerdutyIntegration.
*/
func (a *Client) GetAPIPagerdutyIntegrationsV3Selector(params *GetAPIPagerdutyIntegrationsV3SelectorParams, opts ...ClientOption) (*GetAPIPagerdutyIntegrationsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPagerdutyIntegrationsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIPagerdutyIntegrationsV3Selector",
		Method:             "GET",
		PathPattern:        "/api/pagerduty-integrations/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPagerdutyIntegrationsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIPagerdutyIntegrationsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIPagerdutyIntegrationsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIPagerdutyIntegrationsV3Selector edits an individual pagerduty integration

  Edit an individual PagerdutyIntegration.
*/
func (a *Client) PatchAPIPagerdutyIntegrationsV3Selector(params *PatchAPIPagerdutyIntegrationsV3SelectorParams, opts ...ClientOption) (*PatchAPIPagerdutyIntegrationsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPagerdutyIntegrationsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIPagerdutyIntegrationsV3Selector",
		Method:             "PATCH",
		PathPattern:        "/api/pagerduty-integrations/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPagerdutyIntegrationsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIPagerdutyIntegrationsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIPagerdutyIntegrationsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelector gets an individual pagerduty integration

  Get an individual PagerdutyIntegration.
*/
func (a *Client) PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelector(params *PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorParams, opts ...ClientOption) (*PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelector",
		Method:             "POST",
		PathPattern:        "/api/pagerduty-integrations/procedures/v3/trigger-incident/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIPagerdutyIntegrationsProceduresV3TriggerIncidentSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIPagerdutyIntegrationsV3 creates a pagerduty integration

  Create a PagerdutyIntegration. Duplicate Pagerduty IDs will be gracefully handled by editing the existing entry. This is partially opaque because some fields are writable but not readable.
*/
func (a *Client) PostAPIPagerdutyIntegrationsV3(params *PostAPIPagerdutyIntegrationsV3Params, opts ...ClientOption) (*PostAPIPagerdutyIntegrationsV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPagerdutyIntegrationsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIPagerdutyIntegrationsV3",
		Method:             "POST",
		PathPattern:        "/api/pagerduty-integrations/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPagerdutyIntegrationsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIPagerdutyIntegrationsV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIPagerdutyIntegrationsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
