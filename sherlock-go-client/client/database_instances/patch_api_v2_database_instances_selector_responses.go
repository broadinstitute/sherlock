// Code generated by go-swagger; DO NOT EDIT.

package database_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/clients/go/client/models"
)

// PatchAPIV2DatabaseInstancesSelectorReader is a Reader for the PatchAPIV2DatabaseInstancesSelector structure.
type PatchAPIV2DatabaseInstancesSelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIV2DatabaseInstancesSelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIV2DatabaseInstancesSelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIV2DatabaseInstancesSelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIV2DatabaseInstancesSelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIV2DatabaseInstancesSelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIV2DatabaseInstancesSelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIV2DatabaseInstancesSelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIV2DatabaseInstancesSelectorOK creates a PatchAPIV2DatabaseInstancesSelectorOK with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorOK() *PatchAPIV2DatabaseInstancesSelectorOK {
	return &PatchAPIV2DatabaseInstancesSelectorOK{}
}

/* PatchAPIV2DatabaseInstancesSelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIV2DatabaseInstancesSelectorOK struct {
	Payload *models.V2controllersDatabaseInstance
}

func (o *PatchAPIV2DatabaseInstancesSelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorOK  %+v", 200, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorOK) GetPayload() *models.V2controllersDatabaseInstance {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V2controllersDatabaseInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2DatabaseInstancesSelectorBadRequest creates a PatchAPIV2DatabaseInstancesSelectorBadRequest with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorBadRequest() *PatchAPIV2DatabaseInstancesSelectorBadRequest {
	return &PatchAPIV2DatabaseInstancesSelectorBadRequest{}
}

/* PatchAPIV2DatabaseInstancesSelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIV2DatabaseInstancesSelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2DatabaseInstancesSelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2DatabaseInstancesSelectorForbidden creates a PatchAPIV2DatabaseInstancesSelectorForbidden with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorForbidden() *PatchAPIV2DatabaseInstancesSelectorForbidden {
	return &PatchAPIV2DatabaseInstancesSelectorForbidden{}
}

/* PatchAPIV2DatabaseInstancesSelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIV2DatabaseInstancesSelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2DatabaseInstancesSelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorForbidden  %+v", 403, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2DatabaseInstancesSelectorNotFound creates a PatchAPIV2DatabaseInstancesSelectorNotFound with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorNotFound() *PatchAPIV2DatabaseInstancesSelectorNotFound {
	return &PatchAPIV2DatabaseInstancesSelectorNotFound{}
}

/* PatchAPIV2DatabaseInstancesSelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIV2DatabaseInstancesSelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2DatabaseInstancesSelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorNotFound  %+v", 404, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired creates a PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired() *PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired {
	return &PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired{}
}

/* PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2DatabaseInstancesSelectorConflict creates a PatchAPIV2DatabaseInstancesSelectorConflict with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorConflict() *PatchAPIV2DatabaseInstancesSelectorConflict {
	return &PatchAPIV2DatabaseInstancesSelectorConflict{}
}

/* PatchAPIV2DatabaseInstancesSelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIV2DatabaseInstancesSelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2DatabaseInstancesSelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorConflict  %+v", 409, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIV2DatabaseInstancesSelectorInternalServerError creates a PatchAPIV2DatabaseInstancesSelectorInternalServerError with default headers values
func NewPatchAPIV2DatabaseInstancesSelectorInternalServerError() *PatchAPIV2DatabaseInstancesSelectorInternalServerError {
	return &PatchAPIV2DatabaseInstancesSelectorInternalServerError{}
}

/* PatchAPIV2DatabaseInstancesSelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIV2DatabaseInstancesSelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIV2DatabaseInstancesSelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/v2/database-instances/{selector}][%d] patchApiV2DatabaseInstancesSelectorInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAPIV2DatabaseInstancesSelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIV2DatabaseInstancesSelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
