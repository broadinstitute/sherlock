// Code generated by go-swagger; DO NOT EDIT.

package role_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/sherlock-go-client/client/models"
)

// PatchAPIRoleAssignmentsV3RoleIDUserSelectorReader is a Reader for the PatchAPIRoleAssignmentsV3RoleIDUserSelector structure.
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorOK creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorOK() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK struct {
	Payload *models.SherlockRoleAssignmentV3
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorOK  %+v", 200, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK) GetPayload() *models.SherlockRoleAssignmentV3 {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SherlockRoleAssignmentV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorForbidden  %+v", 403, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorNotFound  %+v", 404, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorConflict  %+v", 409, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError creates a PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError with default headers values
func NewPatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError() *PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError {
	return &PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError{}
}

/* PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/role-assignments/v3/{role-id}/{user-selector}][%d] patchApiRoleAssignmentsV3RoleIdUserSelectorInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIRoleAssignmentsV3RoleIDUserSelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
