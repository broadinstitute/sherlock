// Code generated by go-swagger; DO NOT EDIT.

package role_assignments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIRoleAssignmentsV3Params creates a new GetAPIRoleAssignmentsV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIRoleAssignmentsV3Params() *GetAPIRoleAssignmentsV3Params {
	return &GetAPIRoleAssignmentsV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIRoleAssignmentsV3ParamsWithTimeout creates a new GetAPIRoleAssignmentsV3Params object
// with the ability to set a timeout on a request.
func NewGetAPIRoleAssignmentsV3ParamsWithTimeout(timeout time.Duration) *GetAPIRoleAssignmentsV3Params {
	return &GetAPIRoleAssignmentsV3Params{
		timeout: timeout,
	}
}

// NewGetAPIRoleAssignmentsV3ParamsWithContext creates a new GetAPIRoleAssignmentsV3Params object
// with the ability to set a context for a request.
func NewGetAPIRoleAssignmentsV3ParamsWithContext(ctx context.Context) *GetAPIRoleAssignmentsV3Params {
	return &GetAPIRoleAssignmentsV3Params{
		Context: ctx,
	}
}

// NewGetAPIRoleAssignmentsV3ParamsWithHTTPClient creates a new GetAPIRoleAssignmentsV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIRoleAssignmentsV3ParamsWithHTTPClient(client *http.Client) *GetAPIRoleAssignmentsV3Params {
	return &GetAPIRoleAssignmentsV3Params{
		HTTPClient: client,
	}
}

/* GetAPIRoleAssignmentsV3Params contains all the parameters to send to the API endpoint
   for the get API role assignments v3 operation.

   Typically these are written to a http.Request.
*/
type GetAPIRoleAssignmentsV3Params struct {

	// ExpiresAt.
	//
	// Format: date-time
	ExpiresAt *strfmt.DateTime

	/* Limit.

	   Control how many RoleAssignments are returned (default 0, no limit)
	*/
	Limit *int64

	/* Offset.

	   Control the offset for the returned RoleAssignments (default 0)
	*/
	Offset *int64

	// Suspended.
	Suspended *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API role assignments v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIRoleAssignmentsV3Params) WithDefaults() *GetAPIRoleAssignmentsV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API role assignments v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIRoleAssignmentsV3Params) SetDefaults() {
	var (
		suspendedDefault = bool(false)
	)

	val := GetAPIRoleAssignmentsV3Params{
		Suspended: &suspendedDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithTimeout(timeout time.Duration) *GetAPIRoleAssignmentsV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithContext(ctx context.Context) *GetAPIRoleAssignmentsV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithHTTPClient(client *http.Client) *GetAPIRoleAssignmentsV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpiresAt adds the expiresAt to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithExpiresAt(expiresAt *strfmt.DateTime) *GetAPIRoleAssignmentsV3Params {
	o.SetExpiresAt(expiresAt)
	return o
}

// SetExpiresAt adds the expiresAt to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetExpiresAt(expiresAt *strfmt.DateTime) {
	o.ExpiresAt = expiresAt
}

// WithLimit adds the limit to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithLimit(limit *int64) *GetAPIRoleAssignmentsV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithOffset(offset *int64) *GetAPIRoleAssignmentsV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSuspended adds the suspended to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) WithSuspended(suspended *bool) *GetAPIRoleAssignmentsV3Params {
	o.SetSuspended(suspended)
	return o
}

// SetSuspended adds the suspended to the get API role assignments v3 params
func (o *GetAPIRoleAssignmentsV3Params) SetSuspended(suspended *bool) {
	o.Suspended = suspended
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIRoleAssignmentsV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExpiresAt != nil {

		// query param expiresAt
		var qrExpiresAt strfmt.DateTime

		if o.ExpiresAt != nil {
			qrExpiresAt = *o.ExpiresAt
		}
		qExpiresAt := qrExpiresAt.String()
		if qExpiresAt != "" {

			if err := r.SetQueryParam("expiresAt", qExpiresAt); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.Suspended != nil {

		// query param suspended
		var qrSuspended bool

		if o.Suspended != nil {
			qrSuspended = *o.Suspended
		}
		qSuspended := swag.FormatBool(qrSuspended)
		if qSuspended != "" {

			if err := r.SetQueryParam("suspended", qSuspended); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
