// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockUserV3 sherlock user v3
//
// swagger:model sherlock.UserV3
type SherlockUserV3 struct {

	// assignments
	Assignments []*SherlockRoleAssignmentV3 `json:"assignments"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// If set, indicates that the user is currently deactivated
	DeactivatedAt string `json:"deactivatedAt,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// github ID
	GithubID string `json:"githubID,omitempty"`

	// github username
	GithubUsername string `json:"githubUsername,omitempty"`

	// google ID
	GoogleID string `json:"googleID,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// name from
	// Enum: [sherlock github slack]
	NameFrom string `json:"nameFrom,omitempty"`

	// slack ID
	SlackID string `json:"slackID,omitempty"`

	// slack username
	SlackUsername string `json:"slackUsername,omitempty"`

	// Available only in responses; describes the user's production-suitability
	SuitabilityDescription string `json:"suitabilityDescription,omitempty"`

	// Available only in responses; indicates whether the user is production-suitable
	Suitable bool `json:"suitable,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this sherlock user v3
func (m *SherlockUserV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SherlockUserV3) validateAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.Assignments) { // not required
		return nil
	}

	for i := 0; i < len(m.Assignments); i++ {
		if swag.IsZero(m.Assignments[i]) { // not required
			continue
		}

		if m.Assignments[i] != nil {
			if err := m.Assignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SherlockUserV3) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var sherlockUserV3TypeNameFromPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sherlock","github","slack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sherlockUserV3TypeNameFromPropEnum = append(sherlockUserV3TypeNameFromPropEnum, v)
	}
}

const (

	// SherlockUserV3NameFromSherlock captures enum value "sherlock"
	SherlockUserV3NameFromSherlock string = "sherlock"

	// SherlockUserV3NameFromGithub captures enum value "github"
	SherlockUserV3NameFromGithub string = "github"

	// SherlockUserV3NameFromSlack captures enum value "slack"
	SherlockUserV3NameFromSlack string = "slack"
)

// prop value enum
func (m *SherlockUserV3) validateNameFromEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sherlockUserV3TypeNameFromPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SherlockUserV3) validateNameFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.NameFrom) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameFromEnum("nameFrom", "body", m.NameFrom); err != nil {
		return err
	}

	return nil
}

func (m *SherlockUserV3) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sherlock user v3 based on the context it is used
func (m *SherlockUserV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SherlockUserV3) contextValidateAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Assignments); i++ {

		if m.Assignments[i] != nil {
			if err := m.Assignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SherlockUserV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockUserV3) UnmarshalBinary(b []byte) error {
	var res SherlockUserV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
