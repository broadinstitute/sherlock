// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockGithubActionsJobV3 sherlock github actions job v3
//
// swagger:model sherlock.GithubActionsJobV3
type SherlockGithubActionsJobV3 struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// github actions attempt number
	GithubActionsAttemptNumber int64 `json:"githubActionsAttemptNumber,omitempty"`

	// github actions job ID
	GithubActionsJobID int64 `json:"githubActionsJobID,omitempty"`

	// github actions owner
	GithubActionsOwner string `json:"githubActionsOwner,omitempty"`

	// github actions repo
	GithubActionsRepo string `json:"githubActionsRepo,omitempty"`

	// github actions run ID
	GithubActionsRunID int64 `json:"githubActionsRunID,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// job created at
	// Format: date-time
	JobCreatedAt strfmt.DateTime `json:"jobCreatedAt,omitempty"`

	// job started at
	// Format: date-time
	JobStartedAt strfmt.DateTime `json:"jobStartedAt,omitempty"`

	// job terminal at
	// Format: date-time
	JobTerminalAt strfmt.DateTime `json:"jobTerminalAt,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this sherlock github actions job v3
func (m *SherlockGithubActionsJobV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTerminalAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SherlockGithubActionsJobV3) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SherlockGithubActionsJobV3) validateJobCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.JobCreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("jobCreatedAt", "body", "date-time", m.JobCreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SherlockGithubActionsJobV3) validateJobStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.JobStartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("jobStartedAt", "body", "date-time", m.JobStartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SherlockGithubActionsJobV3) validateJobTerminalAt(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTerminalAt) { // not required
		return nil
	}

	if err := validate.FormatOf("jobTerminalAt", "body", "date-time", m.JobTerminalAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SherlockGithubActionsJobV3) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sherlock github actions job v3 based on context it is used
func (m *SherlockGithubActionsJobV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockGithubActionsJobV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockGithubActionsJobV3) UnmarshalBinary(b []byte) error {
	var res SherlockGithubActionsJobV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
