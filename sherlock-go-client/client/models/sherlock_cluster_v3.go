// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockClusterV3 sherlock cluster v3
//
// swagger:model sherlock.ClusterV3
type SherlockClusterV3 struct {

	// Required when creating
	Address string `json:"address,omitempty"`

	// Required when creating if provider is 'azure'
	AzureSubscription string `json:"azureSubscription,omitempty"`

	// Required when creating
	Base string `json:"base,omitempty"`

	// ci identifier
	CiIdentifier *SherlockCiIdentifierV3 `json:"ciIdentifier,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Required when creating if provider is 'google'
	GoogleProject string `json:"googleProject,omitempty"`

	// helmfile ref
	HelmfileRef *string `json:"helmfileRef,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// location
	Location *string `json:"location,omitempty"`

	// Required when creating
	Name string `json:"name,omitempty"`

	// provider
	// Enum: [google azure]
	Provider *string `json:"provider,omitempty"`

	// If present, requires membership in the given role for mutations. Set to an empty string to clear.
	RequiredRole string `json:"requiredRole,omitempty"`

	// required role info
	RequiredRoleInfo *SherlockRoleV3 `json:"requiredRoleInfo,omitempty"`

	// requires suitability
	RequiresSuitability bool `json:"requiresSuitability,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this sherlock cluster v3
func (m *SherlockClusterV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCiIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredRoleInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SherlockClusterV3) validateCiIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.CiIdentifier) { // not required
		return nil
	}

	if m.CiIdentifier != nil {
		if err := m.CiIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ciIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *SherlockClusterV3) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var sherlockClusterV3TypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["google","azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sherlockClusterV3TypeProviderPropEnum = append(sherlockClusterV3TypeProviderPropEnum, v)
	}
}

const (

	// SherlockClusterV3ProviderGoogle captures enum value "google"
	SherlockClusterV3ProviderGoogle string = "google"

	// SherlockClusterV3ProviderAzure captures enum value "azure"
	SherlockClusterV3ProviderAzure string = "azure"
)

// prop value enum
func (m *SherlockClusterV3) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sherlockClusterV3TypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SherlockClusterV3) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", *m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *SherlockClusterV3) validateRequiredRoleInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredRoleInfo) { // not required
		return nil
	}

	if m.RequiredRoleInfo != nil {
		if err := m.RequiredRoleInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredRoleInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requiredRoleInfo")
			}
			return err
		}
	}

	return nil
}

func (m *SherlockClusterV3) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sherlock cluster v3 based on the context it is used
func (m *SherlockClusterV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCiIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredRoleInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SherlockClusterV3) contextValidateCiIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.CiIdentifier != nil {
		if err := m.CiIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ciIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ciIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *SherlockClusterV3) contextValidateRequiredRoleInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RequiredRoleInfo != nil {
		if err := m.RequiredRoleInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requiredRoleInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requiredRoleInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SherlockClusterV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockClusterV3) UnmarshalBinary(b []byte) error {
	var res SherlockClusterV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
