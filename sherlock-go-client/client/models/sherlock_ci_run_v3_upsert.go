// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockCiRunV3Upsert sherlock ci run v3 upsert
//
// swagger:model sherlock.CiRunV3Upsert
type SherlockCiRunV3Upsert struct {

	// Always appends; will eliminate duplicates.
	AppVersions []string `json:"appVersions"`

	// argo workflows name
	ArgoWorkflowsName string `json:"argoWorkflowsName,omitempty"`

	// argo workflows namespace
	ArgoWorkflowsNamespace string `json:"argoWorkflowsNamespace,omitempty"`

	// argo workflows template
	ArgoWorkflowsTemplate string `json:"argoWorkflowsTemplate,omitempty"`

	// Always appends; will eliminate duplicates. Spreads to associated chart releases, environments, and clusters.
	Changesets []string `json:"changesets"`

	// Keys treated like chartReleases. Values set resource-specific statuses for chart releases and associated changesets, new app versions, and new chart versions.
	ChartReleaseStatuses map[string]string `json:"chartReleaseStatuses,omitempty"`

	// Always appends; will eliminate duplicates. Spreads to associated environments and clusters.
	ChartReleases []string `json:"chartReleases"`

	// Always appends; will eliminate duplicates.
	ChartVersions []string `json:"chartVersions"`

	// Always appends; will eliminate duplicates.
	Charts []string `json:"charts"`

	// Always appends; will eliminate duplicates. Spreads to contained chart releases and their environments.
	Clusters []string `json:"clusters"`

	// Always appends; will eliminate duplicates. Spreads to contained chart releases and their clusters.
	Environments []string `json:"environments"`

	// github actions attempt number
	GithubActionsAttemptNumber int64 `json:"githubActionsAttemptNumber,omitempty"`

	// github actions owner
	GithubActionsOwner string `json:"githubActionsOwner,omitempty"`

	// github actions repo
	GithubActionsRepo string `json:"githubActionsRepo,omitempty"`

	// github actions run ID
	GithubActionsRunID int64 `json:"githubActionsRunID,omitempty"`

	// github actions workflow path
	GithubActionsWorkflowPath string `json:"githubActionsWorkflowPath,omitempty"`

	// If set to true, errors handling selectors for relations should be ignored. Normally, passing an unknown chart, cluster, etc. will abort the request, but they won't if this is true.
	IgnoreBadSelectors *bool `json:"ignoreBadSelectors,omitempty"`

	// Slack channels to notify if this CiRun fails. This field is always appended to when mutated.
	NotifySlackChannelsUponFailure []string `json:"notifySlackChannelsUponFailure"`

	// Slack channels to notify if this CiRun is retried. This field is always appended to when mutated. It will de-dupe with the other notify fields.
	NotifySlackChannelsUponRetry []string `json:"notifySlackChannelsUponRetry"`

	// Slack channels to notify if this CiRun succeeds. This field is always appended to when mutated.
	NotifySlackChannelsUponSuccess []string `json:"notifySlackChannelsUponSuccess"`

	// Icon to use for success or failure Slack notifications. Can be given either as a URL to an image or as a Slack emoji (using colon shortcodes, like :smiley:).
	// An empty string is ignored to facilitate calling from GitHub Actions (where it's easier to pass an empty string than not send the field at all).
	NotifySlackCustomIcon string `json:"notifySlackCustomIcon,omitempty"`

	// platform
	Platform string `json:"platform,omitempty"`

	// Makes entries in the changesets field also spread to new app versions and chart versions deployed by the changeset. 'when-static' is the default and does this spreading only when the chart release is in a static environment.
	// Enum: [always when-static never]
	RelateToChangesetNewVersions *string `json:"relateToChangesetNewVersions,omitempty"`

	// started at
	StartedAt string `json:"startedAt,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// terminal at
	TerminalAt string `json:"terminalAt,omitempty"`
}

// Validate validates this sherlock ci run v3 upsert
func (m *SherlockCiRunV3Upsert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelateToChangesetNewVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sherlockCiRunV3UpsertTypeRelateToChangesetNewVersionsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","when-static","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sherlockCiRunV3UpsertTypeRelateToChangesetNewVersionsPropEnum = append(sherlockCiRunV3UpsertTypeRelateToChangesetNewVersionsPropEnum, v)
	}
}

const (

	// SherlockCiRunV3UpsertRelateToChangesetNewVersionsAlways captures enum value "always"
	SherlockCiRunV3UpsertRelateToChangesetNewVersionsAlways string = "always"

	// SherlockCiRunV3UpsertRelateToChangesetNewVersionsWhenDashStatic captures enum value "when-static"
	SherlockCiRunV3UpsertRelateToChangesetNewVersionsWhenDashStatic string = "when-static"

	// SherlockCiRunV3UpsertRelateToChangesetNewVersionsNever captures enum value "never"
	SherlockCiRunV3UpsertRelateToChangesetNewVersionsNever string = "never"
)

// prop value enum
func (m *SherlockCiRunV3Upsert) validateRelateToChangesetNewVersionsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sherlockCiRunV3UpsertTypeRelateToChangesetNewVersionsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SherlockCiRunV3Upsert) validateRelateToChangesetNewVersions(formats strfmt.Registry) error {
	if swag.IsZero(m.RelateToChangesetNewVersions) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelateToChangesetNewVersionsEnum("relateToChangesetNewVersions", "body", *m.RelateToChangesetNewVersions); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sherlock ci run v3 upsert based on context it is used
func (m *SherlockCiRunV3Upsert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockCiRunV3Upsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockCiRunV3Upsert) UnmarshalBinary(b []byte) error {
	var res SherlockCiRunV3Upsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
