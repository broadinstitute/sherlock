// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2controllersEditableCiRun v2controllers editable ci run
//
// swagger:model v2controllers.EditableCiRun
type V2controllersEditableCiRun struct {

	// Always appends; will eliminate duplicates.
	AppVersions []string `json:"appVersions"`

	// Always appends; will eliminate duplicates. Spreads to associated chart releases (and environments and clusters) and new app/chart versions.
	Changesets []string `json:"changesets"`

	// Always appends; will eliminate duplicates. Spreads to associated environments and clusters.
	ChartReleases []string `json:"chartReleases"`

	// Always appends; will eliminate duplicates.
	ChartVersions []string `json:"chartVersions"`

	// Always appends; will eliminate duplicates.
	Charts []string `json:"charts"`

	// Always appends; will eliminate duplicates.
	Clusters []string `json:"clusters"`

	// Always appends; will eliminate duplicates.
	Environments []string `json:"environments"`

	// status
	Status string `json:"status,omitempty"`

	// terminal at
	TerminalAt string `json:"terminalAt,omitempty"`
}

// Validate validates this v2controllers editable ci run
func (m *V2controllersEditableCiRun) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v2controllers editable ci run based on context it is used
func (m *V2controllersEditableCiRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V2controllersEditableCiRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2controllersEditableCiRun) UnmarshalBinary(b []byte) error {
	var res V2controllersEditableCiRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
