// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockUserV3Upsert sherlock user v3 upsert
//
// swagger:model sherlock.UserV3Upsert
type SherlockUserV3Upsert struct {

	// An access token for the GitHub account to associate with the calling user. The access token isn't stored.
	// The design here ensures that an association is only built when someone controls both accounts (Google via
	// IAP and GitHub via this access token).
	GithubAccessToken string `json:"githubAccessToken,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// name from
	// Enum: [sherlock github slack]
	NameFrom string `json:"nameFrom,omitempty"`
}

// Validate validates this sherlock user v3 upsert
func (m *SherlockUserV3Upsert) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameFrom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sherlockUserV3UpsertTypeNameFromPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sherlock","github","slack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sherlockUserV3UpsertTypeNameFromPropEnum = append(sherlockUserV3UpsertTypeNameFromPropEnum, v)
	}
}

const (

	// SherlockUserV3UpsertNameFromSherlock captures enum value "sherlock"
	SherlockUserV3UpsertNameFromSherlock string = "sherlock"

	// SherlockUserV3UpsertNameFromGithub captures enum value "github"
	SherlockUserV3UpsertNameFromGithub string = "github"

	// SherlockUserV3UpsertNameFromSlack captures enum value "slack"
	SherlockUserV3UpsertNameFromSlack string = "slack"
)

// prop value enum
func (m *SherlockUserV3Upsert) validateNameFromEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sherlockUserV3UpsertTypeNameFromPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SherlockUserV3Upsert) validateNameFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.NameFrom) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameFromEnum("nameFrom", "body", m.NameFrom); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sherlock user v3 upsert based on context it is used
func (m *SherlockUserV3Upsert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockUserV3Upsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockUserV3Upsert) UnmarshalBinary(b []byte) error {
	var res SherlockUserV3Upsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
