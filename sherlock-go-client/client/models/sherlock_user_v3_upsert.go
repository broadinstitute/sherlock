// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SherlockUserV3Upsert sherlock user v3 upsert
//
// swagger:model sherlock.UserV3Upsert
type SherlockUserV3Upsert struct {

	// An access token for the GitHub account to associate with the calling user. The access token isn't stored.
	// The design here ensures that an association is only built when someone controls both accounts (Google via
	// IAP and GitHub via this access token).
	GithubAccessToken string `json:"githubAccessToken,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Controls whether Sherlock should automatically update the user's name based on a connected GitHub identity.
	// Will be set to true if the user account has no name and a GitHub account is linked.
	NameInferredFromGithub bool `json:"nameInferredFromGithub,omitempty"`
}

// Validate validates this sherlock user v3 upsert
func (m *SherlockUserV3Upsert) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sherlock user v3 upsert based on context it is used
func (m *SherlockUserV3Upsert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockUserV3Upsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockUserV3Upsert) UnmarshalBinary(b []byte) error {
	var res SherlockUserV3Upsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
