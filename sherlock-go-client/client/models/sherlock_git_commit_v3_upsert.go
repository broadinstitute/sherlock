// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SherlockGitCommitV3Upsert sherlock git commit v3 upsert
//
// swagger:model sherlock.GitCommitV3Upsert
type SherlockGitCommitV3Upsert struct {

	// committed at
	CommittedAt string `json:"committedAt,omitempty"`

	// git branch
	GitBranch string `json:"gitBranch,omitempty"`

	// git commit
	GitCommit string `json:"gitCommit,omitempty"`

	// git repo
	GitRepo string `json:"gitRepo,omitempty"`

	// is main branch
	IsMainBranch bool `json:"isMainBranch,omitempty"`
}

// Validate validates this sherlock git commit v3 upsert
func (m *SherlockGitCommitV3Upsert) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this sherlock git commit v3 upsert based on context it is used
func (m *SherlockGitCommitV3Upsert) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockGitCommitV3Upsert) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockGitCommitV3Upsert) UnmarshalBinary(b []byte) error {
	var res SherlockGitCommitV3Upsert
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
