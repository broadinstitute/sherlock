// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockGithubActionsDeployHookV3Create sherlock github actions deploy hook v3 create
//
// swagger:model sherlock.GithubActionsDeployHookV3Create
type SherlockGithubActionsDeployHookV3Create struct {

	// github actions default ref
	GithubActionsDefaultRef string `json:"githubActionsDefaultRef,omitempty"`

	// github actions owner
	GithubActionsOwner string `json:"githubActionsOwner,omitempty"`

	// This field determines what git ref the workflow will be run on. The default of always-use-default-ref always uses the default ref; use-app-version-as-ref will use the app version (when available) as the ref, useful when versions are always commit hashes or tags; use-app-version-commit-as-ref will use the app version's commit (when available) as the ref, useful when the repo is configured to fully report app versions to Sherlock.
	// Enum: [always-use-default-ref use-app-version-as-ref use-app-version-commit-as-ref]
	GithubActionsRefBehavior *string `json:"githubActionsRefBehavior,omitempty"`

	// github actions repo
	GithubActionsRepo string `json:"githubActionsRepo,omitempty"`

	// These workflow inputs will be passed statically as-is to GitHub's workflow dispatch API (https://docs.github.com/en/rest/actions/workflows#create-a-workflow-dispatch-event) as the `inputs` parameter object.
	GithubActionsWorkflowInputs interface{} `json:"githubActionsWorkflowInputs,omitempty"`

	// github actions workflow path
	GithubActionsWorkflowPath string `json:"githubActionsWorkflowPath,omitempty"`

	// on chart release
	OnChartRelease string `json:"onChartRelease,omitempty"`

	// on environment
	OnEnvironment string `json:"onEnvironment,omitempty"`

	// on failure
	OnFailure bool `json:"onFailure,omitempty"`

	// on success
	OnSuccess bool `json:"onSuccess,omitempty"`
}

// Validate validates this sherlock github actions deploy hook v3 create
func (m *SherlockGithubActionsDeployHookV3Create) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGithubActionsRefBehavior(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sherlockGithubActionsDeployHookV3CreateTypeGithubActionsRefBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always-use-default-ref","use-app-version-as-ref","use-app-version-commit-as-ref"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sherlockGithubActionsDeployHookV3CreateTypeGithubActionsRefBehaviorPropEnum = append(sherlockGithubActionsDeployHookV3CreateTypeGithubActionsRefBehaviorPropEnum, v)
	}
}

const (

	// SherlockGithubActionsDeployHookV3CreateGithubActionsRefBehaviorAlwaysDashUseDashDefaultDashRef captures enum value "always-use-default-ref"
	SherlockGithubActionsDeployHookV3CreateGithubActionsRefBehaviorAlwaysDashUseDashDefaultDashRef string = "always-use-default-ref"

	// SherlockGithubActionsDeployHookV3CreateGithubActionsRefBehaviorUseDashAppDashVersionDashAsDashRef captures enum value "use-app-version-as-ref"
	SherlockGithubActionsDeployHookV3CreateGithubActionsRefBehaviorUseDashAppDashVersionDashAsDashRef string = "use-app-version-as-ref"

	// SherlockGithubActionsDeployHookV3CreateGithubActionsRefBehaviorUseDashAppDashVersionDashCommitDashAsDashRef captures enum value "use-app-version-commit-as-ref"
	SherlockGithubActionsDeployHookV3CreateGithubActionsRefBehaviorUseDashAppDashVersionDashCommitDashAsDashRef string = "use-app-version-commit-as-ref"
)

// prop value enum
func (m *SherlockGithubActionsDeployHookV3Create) validateGithubActionsRefBehaviorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sherlockGithubActionsDeployHookV3CreateTypeGithubActionsRefBehaviorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SherlockGithubActionsDeployHookV3Create) validateGithubActionsRefBehavior(formats strfmt.Registry) error {
	if swag.IsZero(m.GithubActionsRefBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateGithubActionsRefBehaviorEnum("githubActionsRefBehavior", "body", *m.GithubActionsRefBehavior); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sherlock github actions deploy hook v3 create based on context it is used
func (m *SherlockGithubActionsDeployHookV3Create) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockGithubActionsDeployHookV3Create) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockGithubActionsDeployHookV3Create) UnmarshalBinary(b []byte) error {
	var res SherlockGithubActionsDeployHookV3Create
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
