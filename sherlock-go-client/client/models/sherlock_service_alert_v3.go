// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SherlockServiceAlertV3 sherlock service alert v3
//
// swagger:model sherlock.ServiceAlertV3
type SherlockServiceAlertV3 struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// link
	Link string `json:"link,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// on environment
	OnEnvironment string `json:"onEnvironment,omitempty"`

	// severity
	// Enum: [blocker  critical  minor]
	Severity string `json:"severity,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this sherlock service alert v3
func (m *SherlockServiceAlertV3) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SherlockServiceAlertV3) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var sherlockServiceAlertV3TypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blocker"," critical"," minor"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sherlockServiceAlertV3TypeSeverityPropEnum = append(sherlockServiceAlertV3TypeSeverityPropEnum, v)
	}
}

const (

	// SherlockServiceAlertV3SeverityBlocker captures enum value "blocker"
	SherlockServiceAlertV3SeverityBlocker string = "blocker"

	// SherlockServiceAlertV3SeverityCritical captures enum value " critical"
	SherlockServiceAlertV3SeverityCritical string = " critical"

	// SherlockServiceAlertV3SeverityMinor captures enum value " minor"
	SherlockServiceAlertV3SeverityMinor string = " minor"
)

// prop value enum
func (m *SherlockServiceAlertV3) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sherlockServiceAlertV3TypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SherlockServiceAlertV3) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *SherlockServiceAlertV3) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sherlock service alert v3 based on context it is used
func (m *SherlockServiceAlertV3) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SherlockServiceAlertV3) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SherlockServiceAlertV3) UnmarshalBinary(b []byte) error {
	var res SherlockServiceAlertV3
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
