// Code generated by go-swagger; DO NOT EDIT.

package chart_releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new chart releases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for chart releases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIChartReleasesV3Selector(params *DeleteAPIChartReleasesV3SelectorParams, opts ...ClientOption) (*DeleteAPIChartReleasesV3SelectorOK, error)

	GetAPIChartReleasesV3(params *GetAPIChartReleasesV3Params, opts ...ClientOption) (*GetAPIChartReleasesV3OK, error)

	GetAPIChartReleasesV3Selector(params *GetAPIChartReleasesV3SelectorParams, opts ...ClientOption) (*GetAPIChartReleasesV3SelectorOK, error)

	PatchAPIChartReleasesV3Selector(params *PatchAPIChartReleasesV3SelectorParams, opts ...ClientOption) (*PatchAPIChartReleasesV3SelectorOK, error)

	PostAPIChartReleasesV3(params *PostAPIChartReleasesV3Params, opts ...ClientOption) (*PostAPIChartReleasesV3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIChartReleasesV3Selector deletes an individual chart release

  Delete an individual ChartRelease by its ID.
*/
func (a *Client) DeleteAPIChartReleasesV3Selector(params *DeleteAPIChartReleasesV3SelectorParams, opts ...ClientOption) (*DeleteAPIChartReleasesV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIChartReleasesV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIChartReleasesV3Selector",
		Method:             "DELETE",
		PathPattern:        "/api/chart-releases/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIChartReleasesV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIChartReleasesV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIChartReleasesV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIChartReleasesV3 lists chart releases matching a filter

  List ChartReleases matching a filter.
*/
func (a *Client) GetAPIChartReleasesV3(params *GetAPIChartReleasesV3Params, opts ...ClientOption) (*GetAPIChartReleasesV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIChartReleasesV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIChartReleasesV3",
		Method:             "GET",
		PathPattern:        "/api/chart-releases/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIChartReleasesV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIChartReleasesV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIChartReleasesV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIChartReleasesV3Selector gets an individual chart release

  Get an individual ChartRelease.
*/
func (a *Client) GetAPIChartReleasesV3Selector(params *GetAPIChartReleasesV3SelectorParams, opts ...ClientOption) (*GetAPIChartReleasesV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIChartReleasesV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIChartReleasesV3Selector",
		Method:             "GET",
		PathPattern:        "/api/chart-releases/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIChartReleasesV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIChartReleasesV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIChartReleasesV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIChartReleasesV3Selector edits an individual chart release

  Edit an individual ChartRelease.
*/
func (a *Client) PatchAPIChartReleasesV3Selector(params *PatchAPIChartReleasesV3SelectorParams, opts ...ClientOption) (*PatchAPIChartReleasesV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIChartReleasesV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIChartReleasesV3Selector",
		Method:             "PATCH",
		PathPattern:        "/api/chart-releases/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIChartReleasesV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIChartReleasesV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIChartReleasesV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIChartReleasesV3 creates a chart release

  Create a ChartRelease.
*/
func (a *Client) PostAPIChartReleasesV3(params *PostAPIChartReleasesV3Params, opts ...ClientOption) (*PostAPIChartReleasesV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIChartReleasesV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIChartReleasesV3",
		Method:             "POST",
		PathPattern:        "/api/chart-releases/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIChartReleasesV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIChartReleasesV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIChartReleasesV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
