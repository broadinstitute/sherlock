// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2UsersParams creates a new GetAPIV2UsersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2UsersParams() *GetAPIV2UsersParams {
	return &GetAPIV2UsersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2UsersParamsWithTimeout creates a new GetAPIV2UsersParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2UsersParamsWithTimeout(timeout time.Duration) *GetAPIV2UsersParams {
	return &GetAPIV2UsersParams{
		timeout: timeout,
	}
}

// NewGetAPIV2UsersParamsWithContext creates a new GetAPIV2UsersParams object
// with the ability to set a context for a request.
func NewGetAPIV2UsersParamsWithContext(ctx context.Context) *GetAPIV2UsersParams {
	return &GetAPIV2UsersParams{
		Context: ctx,
	}
}

// NewGetAPIV2UsersParamsWithHTTPClient creates a new GetAPIV2UsersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2UsersParamsWithHTTPClient(client *http.Client) *GetAPIV2UsersParams {
	return &GetAPIV2UsersParams{
		HTTPClient: client,
	}
}

/* GetAPIV2UsersParams contains all the parameters to send to the API endpoint
   for the get API v2 users operation.

   Typically these are written to a http.Request.
*/
type GetAPIV2UsersParams struct {

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	// Email.
	Email *string

	// GithubID.
	GithubID *string

	// GithubUsername.
	GithubUsername *string

	// GoogleID.
	GoogleID *string

	// ID.
	ID *int64

	/* Limit.

	   An optional limit to the number of entries returned
	*/
	Limit *int64

	// Name.
	Name *string

	// NameInferredFromGithub.
	NameInferredFromGithub *bool

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2UsersParams) WithDefaults() *GetAPIV2UsersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 users params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2UsersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API v2 users params
func (o *GetAPIV2UsersParams) WithTimeout(timeout time.Duration) *GetAPIV2UsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 users params
func (o *GetAPIV2UsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 users params
func (o *GetAPIV2UsersParams) WithContext(ctx context.Context) *GetAPIV2UsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 users params
func (o *GetAPIV2UsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 users params
func (o *GetAPIV2UsersParams) WithHTTPClient(client *http.Client) *GetAPIV2UsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 users params
func (o *GetAPIV2UsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAt adds the createdAt to the get API v2 users params
func (o *GetAPIV2UsersParams) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIV2UsersParams {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API v2 users params
func (o *GetAPIV2UsersParams) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithEmail adds the email to the get API v2 users params
func (o *GetAPIV2UsersParams) WithEmail(email *string) *GetAPIV2UsersParams {
	o.SetEmail(email)
	return o
}

// SetEmail adds the email to the get API v2 users params
func (o *GetAPIV2UsersParams) SetEmail(email *string) {
	o.Email = email
}

// WithGithubID adds the githubID to the get API v2 users params
func (o *GetAPIV2UsersParams) WithGithubID(githubID *string) *GetAPIV2UsersParams {
	o.SetGithubID(githubID)
	return o
}

// SetGithubID adds the githubId to the get API v2 users params
func (o *GetAPIV2UsersParams) SetGithubID(githubID *string) {
	o.GithubID = githubID
}

// WithGithubUsername adds the githubUsername to the get API v2 users params
func (o *GetAPIV2UsersParams) WithGithubUsername(githubUsername *string) *GetAPIV2UsersParams {
	o.SetGithubUsername(githubUsername)
	return o
}

// SetGithubUsername adds the githubUsername to the get API v2 users params
func (o *GetAPIV2UsersParams) SetGithubUsername(githubUsername *string) {
	o.GithubUsername = githubUsername
}

// WithGoogleID adds the googleID to the get API v2 users params
func (o *GetAPIV2UsersParams) WithGoogleID(googleID *string) *GetAPIV2UsersParams {
	o.SetGoogleID(googleID)
	return o
}

// SetGoogleID adds the googleId to the get API v2 users params
func (o *GetAPIV2UsersParams) SetGoogleID(googleID *string) {
	o.GoogleID = googleID
}

// WithID adds the id to the get API v2 users params
func (o *GetAPIV2UsersParams) WithID(id *int64) *GetAPIV2UsersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API v2 users params
func (o *GetAPIV2UsersParams) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API v2 users params
func (o *GetAPIV2UsersParams) WithLimit(limit *int64) *GetAPIV2UsersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 users params
func (o *GetAPIV2UsersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API v2 users params
func (o *GetAPIV2UsersParams) WithName(name *string) *GetAPIV2UsersParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API v2 users params
func (o *GetAPIV2UsersParams) SetName(name *string) {
	o.Name = name
}

// WithNameInferredFromGithub adds the nameInferredFromGithub to the get API v2 users params
func (o *GetAPIV2UsersParams) WithNameInferredFromGithub(nameInferredFromGithub *bool) *GetAPIV2UsersParams {
	o.SetNameInferredFromGithub(nameInferredFromGithub)
	return o
}

// SetNameInferredFromGithub adds the nameInferredFromGithub to the get API v2 users params
func (o *GetAPIV2UsersParams) SetNameInferredFromGithub(nameInferredFromGithub *bool) {
	o.NameInferredFromGithub = nameInferredFromGithub
}

// WithUpdatedAt adds the updatedAt to the get API v2 users params
func (o *GetAPIV2UsersParams) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIV2UsersParams {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API v2 users params
func (o *GetAPIV2UsersParams) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2UsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.Email != nil {

		// query param email
		var qrEmail string

		if o.Email != nil {
			qrEmail = *o.Email
		}
		qEmail := qrEmail
		if qEmail != "" {

			if err := r.SetQueryParam("email", qEmail); err != nil {
				return err
			}
		}
	}

	if o.GithubID != nil {

		// query param githubID
		var qrGithubID string

		if o.GithubID != nil {
			qrGithubID = *o.GithubID
		}
		qGithubID := qrGithubID
		if qGithubID != "" {

			if err := r.SetQueryParam("githubID", qGithubID); err != nil {
				return err
			}
		}
	}

	if o.GithubUsername != nil {

		// query param githubUsername
		var qrGithubUsername string

		if o.GithubUsername != nil {
			qrGithubUsername = *o.GithubUsername
		}
		qGithubUsername := qrGithubUsername
		if qGithubUsername != "" {

			if err := r.SetQueryParam("githubUsername", qGithubUsername); err != nil {
				return err
			}
		}
	}

	if o.GoogleID != nil {

		// query param googleID
		var qrGoogleID string

		if o.GoogleID != nil {
			qrGoogleID = *o.GoogleID
		}
		qGoogleID := qrGoogleID
		if qGoogleID != "" {

			if err := r.SetQueryParam("googleID", qGoogleID); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.NameInferredFromGithub != nil {

		// query param nameInferredFromGithub
		var qrNameInferredFromGithub bool

		if o.NameInferredFromGithub != nil {
			qrNameInferredFromGithub = *o.NameInferredFromGithub
		}
		qNameInferredFromGithub := swag.FormatBool(qrNameInferredFromGithub)
		if qNameInferredFromGithub != "" {

			if err := r.SetQueryParam("nameInferredFromGithub", qNameInferredFromGithub); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
