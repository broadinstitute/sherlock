// Code generated by go-swagger; DO NOT EDIT.

package service_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIServiceAlertsV3Params creates a new GetAPIServiceAlertsV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIServiceAlertsV3Params() *GetAPIServiceAlertsV3Params {
	return &GetAPIServiceAlertsV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIServiceAlertsV3ParamsWithTimeout creates a new GetAPIServiceAlertsV3Params object
// with the ability to set a timeout on a request.
func NewGetAPIServiceAlertsV3ParamsWithTimeout(timeout time.Duration) *GetAPIServiceAlertsV3Params {
	return &GetAPIServiceAlertsV3Params{
		timeout: timeout,
	}
}

// NewGetAPIServiceAlertsV3ParamsWithContext creates a new GetAPIServiceAlertsV3Params object
// with the ability to set a context for a request.
func NewGetAPIServiceAlertsV3ParamsWithContext(ctx context.Context) *GetAPIServiceAlertsV3Params {
	return &GetAPIServiceAlertsV3Params{
		Context: ctx,
	}
}

// NewGetAPIServiceAlertsV3ParamsWithHTTPClient creates a new GetAPIServiceAlertsV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIServiceAlertsV3ParamsWithHTTPClient(client *http.Client) *GetAPIServiceAlertsV3Params {
	return &GetAPIServiceAlertsV3Params{
		HTTPClient: client,
	}
}

/* GetAPIServiceAlertsV3Params contains all the parameters to send to the API endpoint
   for the get API service alerts v3 operation.

   Typically these are written to a http.Request.
*/
type GetAPIServiceAlertsV3Params struct {

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	// ID.
	ID *int64

	/* Limit.

	   Control how many Service Alerts are returned (default 0, no limit)
	*/
	Limit *int64

	// Link.
	Link *string

	// Message.
	Message *string

	/* Offset.

	   Control the offset for the returned Service Alerts (default 0)
	*/
	Offset *int64

	// OnEnvironment.
	OnEnvironment *string

	// Severity.
	Severity *string

	// Title.
	Title *string

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	// UUID.
	UUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API service alerts v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIServiceAlertsV3Params) WithDefaults() *GetAPIServiceAlertsV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API service alerts v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIServiceAlertsV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithTimeout(timeout time.Duration) *GetAPIServiceAlertsV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithContext(ctx context.Context) *GetAPIServiceAlertsV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithHTTPClient(client *http.Client) *GetAPIServiceAlertsV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAt adds the createdAt to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIServiceAlertsV3Params {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithID adds the id to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithID(id *int64) *GetAPIServiceAlertsV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithLimit(limit *int64) *GetAPIServiceAlertsV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLink adds the link to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithLink(link *string) *GetAPIServiceAlertsV3Params {
	o.SetLink(link)
	return o
}

// SetLink adds the link to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetLink(link *string) {
	o.Link = link
}

// WithMessage adds the message to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithMessage(message *string) *GetAPIServiceAlertsV3Params {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetMessage(message *string) {
	o.Message = message
}

// WithOffset adds the offset to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithOffset(offset *int64) *GetAPIServiceAlertsV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOnEnvironment adds the onEnvironment to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithOnEnvironment(onEnvironment *string) *GetAPIServiceAlertsV3Params {
	o.SetOnEnvironment(onEnvironment)
	return o
}

// SetOnEnvironment adds the onEnvironment to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetOnEnvironment(onEnvironment *string) {
	o.OnEnvironment = onEnvironment
}

// WithSeverity adds the severity to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithSeverity(severity *string) *GetAPIServiceAlertsV3Params {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetSeverity(severity *string) {
	o.Severity = severity
}

// WithTitle adds the title to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithTitle(title *string) *GetAPIServiceAlertsV3Params {
	o.SetTitle(title)
	return o
}

// SetTitle adds the title to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetTitle(title *string) {
	o.Title = title
}

// WithUpdatedAt adds the updatedAt to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIServiceAlertsV3Params {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WithUUID adds the uuid to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) WithUUID(uuid *string) *GetAPIServiceAlertsV3Params {
	o.SetUUID(uuid)
	return o
}

// SetUUID adds the uuid to the get API service alerts v3 params
func (o *GetAPIServiceAlertsV3Params) SetUUID(uuid *string) {
	o.UUID = uuid
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIServiceAlertsV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Link != nil {

		// query param link
		var qrLink string

		if o.Link != nil {
			qrLink = *o.Link
		}
		qLink := qrLink
		if qLink != "" {

			if err := r.SetQueryParam("link", qLink); err != nil {
				return err
			}
		}
	}

	if o.Message != nil {

		// query param message
		var qrMessage string

		if o.Message != nil {
			qrMessage = *o.Message
		}
		qMessage := qrMessage
		if qMessage != "" {

			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OnEnvironment != nil {

		// query param onEnvironment
		var qrOnEnvironment string

		if o.OnEnvironment != nil {
			qrOnEnvironment = *o.OnEnvironment
		}
		qOnEnvironment := qrOnEnvironment
		if qOnEnvironment != "" {

			if err := r.SetQueryParam("onEnvironment", qOnEnvironment); err != nil {
				return err
			}
		}
	}

	if o.Severity != nil {

		// query param severity
		var qrSeverity string

		if o.Severity != nil {
			qrSeverity = *o.Severity
		}
		qSeverity := qrSeverity
		if qSeverity != "" {

			if err := r.SetQueryParam("severity", qSeverity); err != nil {
				return err
			}
		}
	}

	if o.Title != nil {

		// query param title
		var qrTitle string

		if o.Title != nil {
			qrTitle = *o.Title
		}
		qTitle := qrTitle
		if qTitle != "" {

			if err := r.SetQueryParam("title", qTitle); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if o.UUID != nil {

		// query param uuid
		var qrUUID string

		if o.UUID != nil {
			qrUUID = *o.UUID
		}
		qUUID := qrUUID
		if qUUID != "" {

			if err := r.SetQueryParam("uuid", qUUID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
