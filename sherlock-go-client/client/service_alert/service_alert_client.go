// Code generated by go-swagger; DO NOT EDIT.

package service_alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service alert API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service alert API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIServiceAlertsV3Selector(params *DeleteAPIServiceAlertsV3SelectorParams, opts ...ClientOption) (*DeleteAPIServiceAlertsV3SelectorOK, error)

	GetAPIServiceAlertsV3(params *GetAPIServiceAlertsV3Params, opts ...ClientOption) (*GetAPIServiceAlertsV3OK, error)

	GetAPIServiceAlertsV3Selector(params *GetAPIServiceAlertsV3SelectorParams, opts ...ClientOption) (*GetAPIServiceAlertsV3SelectorOK, error)

	PatchAPIServiceAlertsV3Selector(params *PatchAPIServiceAlertsV3SelectorParams, opts ...ClientOption) (*PatchAPIServiceAlertsV3SelectorOK, error)

	PostAPIServiceAlertsV3(params *PostAPIServiceAlertsV3Params, opts ...ClientOption) (*PostAPIServiceAlertsV3OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIServiceAlertsV3Selector deletes a service alert

  Delete an individual ServiceAlert.
*/
func (a *Client) DeleteAPIServiceAlertsV3Selector(params *DeleteAPIServiceAlertsV3SelectorParams, opts ...ClientOption) (*DeleteAPIServiceAlertsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIServiceAlertsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIServiceAlertsV3Selector",
		Method:             "DELETE",
		PathPattern:        "/api/service-alerts/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIServiceAlertsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIServiceAlertsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIServiceAlertsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIServiceAlertsV3 lists service alerts matching a filter

  List ServiceAlerts matching a filter.
*/
func (a *Client) GetAPIServiceAlertsV3(params *GetAPIServiceAlertsV3Params, opts ...ClientOption) (*GetAPIServiceAlertsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIServiceAlertsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIServiceAlertsV3",
		Method:             "GET",
		PathPattern:        "/api/service-alerts/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIServiceAlertsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIServiceAlertsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIServiceAlertsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIServiceAlertsV3Selector gets a service alert

  Get an individual Service Alert and it's metadata.
*/
func (a *Client) GetAPIServiceAlertsV3Selector(params *GetAPIServiceAlertsV3SelectorParams, opts ...ClientOption) (*GetAPIServiceAlertsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIServiceAlertsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIServiceAlertsV3Selector",
		Method:             "GET",
		PathPattern:        "/api/service-alerts/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIServiceAlertsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIServiceAlertsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIServiceAlertsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIServiceAlertsV3Selector edits a service alert

  Update a service alert with new information.
*/
func (a *Client) PatchAPIServiceAlertsV3Selector(params *PatchAPIServiceAlertsV3SelectorParams, opts ...ClientOption) (*PatchAPIServiceAlertsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIServiceAlertsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIServiceAlertsV3Selector",
		Method:             "PATCH",
		PathPattern:        "/api/service-alerts/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIServiceAlertsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIServiceAlertsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIServiceAlertsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIServiceAlertsV3 creates a service alert

  Create a service alert to be displayed within terra.
*/
func (a *Client) PostAPIServiceAlertsV3(params *PostAPIServiceAlertsV3Params, opts ...ClientOption) (*PostAPIServiceAlertsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIServiceAlertsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIServiceAlertsV3",
		Method:             "POST",
		PathPattern:        "/api/service-alerts/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIServiceAlertsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIServiceAlertsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIServiceAlertsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
