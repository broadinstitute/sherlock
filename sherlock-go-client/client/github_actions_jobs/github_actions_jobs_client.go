// Code generated by go-swagger; DO NOT EDIT.

package github_actions_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new github actions jobs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for github actions jobs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIGithubActionsJobsV3(params *GetAPIGithubActionsJobsV3Params, opts ...ClientOption) (*GetAPIGithubActionsJobsV3OK, error)

	GetAPIGithubActionsJobsV3Selector(params *GetAPIGithubActionsJobsV3SelectorParams, opts ...ClientOption) (*GetAPIGithubActionsJobsV3SelectorOK, error)

	PutAPIGithubActionsJobsV3(params *PutAPIGithubActionsJobsV3Params, opts ...ClientOption) (*PutAPIGithubActionsJobsV3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPIGithubActionsJobsV3 lists github actions jobs matching a filter

  List GithubActionsJobs matching a filter.
Results are ordered by start time, starting at most recent.
*/
func (a *Client) GetAPIGithubActionsJobsV3(params *GetAPIGithubActionsJobsV3Params, opts ...ClientOption) (*GetAPIGithubActionsJobsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIGithubActionsJobsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIGithubActionsJobsV3",
		Method:             "GET",
		PathPattern:        "/api/github-actions-jobs/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIGithubActionsJobsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIGithubActionsJobsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIGithubActionsJobsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIGithubActionsJobsV3Selector gets an individual github actions job

  Get an individual GithubActionsJob.
*/
func (a *Client) GetAPIGithubActionsJobsV3Selector(params *GetAPIGithubActionsJobsV3SelectorParams, opts ...ClientOption) (*GetAPIGithubActionsJobsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIGithubActionsJobsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIGithubActionsJobsV3Selector",
		Method:             "GET",
		PathPattern:        "/api/github-actions-jobs/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIGithubActionsJobsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIGithubActionsJobsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIGithubActionsJobsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIGithubActionsJobsV3 upserts github actions job

  Upsert GithubActionsJob.
*/
func (a *Client) PutAPIGithubActionsJobsV3(params *PutAPIGithubActionsJobsV3Params, opts ...ClientOption) (*PutAPIGithubActionsJobsV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIGithubActionsJobsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIGithubActionsJobsV3",
		Method:             "PUT",
		PathPattern:        "/api/github-actions-jobs/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIGithubActionsJobsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIGithubActionsJobsV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIGithubActionsJobsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
