// Code generated by go-swagger; DO NOT EDIT.

package ci_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/clients/go/client/models"
)

// NewPatchAPIV2CiRunsSelectorParams creates a new PatchAPIV2CiRunsSelectorParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchAPIV2CiRunsSelectorParams() *PatchAPIV2CiRunsSelectorParams {
	return &PatchAPIV2CiRunsSelectorParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchAPIV2CiRunsSelectorParamsWithTimeout creates a new PatchAPIV2CiRunsSelectorParams object
// with the ability to set a timeout on a request.
func NewPatchAPIV2CiRunsSelectorParamsWithTimeout(timeout time.Duration) *PatchAPIV2CiRunsSelectorParams {
	return &PatchAPIV2CiRunsSelectorParams{
		timeout: timeout,
	}
}

// NewPatchAPIV2CiRunsSelectorParamsWithContext creates a new PatchAPIV2CiRunsSelectorParams object
// with the ability to set a context for a request.
func NewPatchAPIV2CiRunsSelectorParamsWithContext(ctx context.Context) *PatchAPIV2CiRunsSelectorParams {
	return &PatchAPIV2CiRunsSelectorParams{
		Context: ctx,
	}
}

// NewPatchAPIV2CiRunsSelectorParamsWithHTTPClient creates a new PatchAPIV2CiRunsSelectorParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchAPIV2CiRunsSelectorParamsWithHTTPClient(client *http.Client) *PatchAPIV2CiRunsSelectorParams {
	return &PatchAPIV2CiRunsSelectorParams{
		HTTPClient: client,
	}
}

/* PatchAPIV2CiRunsSelectorParams contains all the parameters to send to the API endpoint
   for the patch API v2 ci runs selector operation.

   Typically these are written to a http.Request.
*/
type PatchAPIV2CiRunsSelectorParams struct {

	/* CiRun.

	   The edits to make to the CiRun
	*/
	CiRun *models.V2controllersEditableCiRun

	/* Selector.

	   The CiRun to edit's selector: ID, 'github-actions/' + owner + repo + run ID + attempt number, or 'argo-workflows/' + namespace + name
	*/
	Selector string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch API v2 ci runs selector params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchAPIV2CiRunsSelectorParams) WithDefaults() *PatchAPIV2CiRunsSelectorParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch API v2 ci runs selector params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchAPIV2CiRunsSelectorParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) WithTimeout(timeout time.Duration) *PatchAPIV2CiRunsSelectorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) WithContext(ctx context.Context) *PatchAPIV2CiRunsSelectorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) WithHTTPClient(client *http.Client) *PatchAPIV2CiRunsSelectorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCiRun adds the ciRun to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) WithCiRun(ciRun *models.V2controllersEditableCiRun) *PatchAPIV2CiRunsSelectorParams {
	o.SetCiRun(ciRun)
	return o
}

// SetCiRun adds the ciRun to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) SetCiRun(ciRun *models.V2controllersEditableCiRun) {
	o.CiRun = ciRun
}

// WithSelector adds the selector to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) WithSelector(selector string) *PatchAPIV2CiRunsSelectorParams {
	o.SetSelector(selector)
	return o
}

// SetSelector adds the selector to the patch API v2 ci runs selector params
func (o *PatchAPIV2CiRunsSelectorParams) SetSelector(selector string) {
	o.Selector = selector
}

// WriteToRequest writes these params to a swagger request
func (o *PatchAPIV2CiRunsSelectorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.CiRun != nil {
		if err := r.SetBodyParam(o.CiRun); err != nil {
			return err
		}
	}

	// path param selector
	if err := r.SetPathParam("selector", o.Selector); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
