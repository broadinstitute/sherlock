// Code generated by go-swagger; DO NOT EDIT.

package ci_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ci runs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ci runs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2CiRunsSelector(params *DeleteAPIV2CiRunsSelectorParams, opts ...ClientOption) (*DeleteAPIV2CiRunsSelectorOK, error)

	GetAPIV2CiRuns(params *GetAPIV2CiRunsParams, opts ...ClientOption) (*GetAPIV2CiRunsOK, error)

	GetAPIV2CiRunsSelector(params *GetAPIV2CiRunsSelectorParams, opts ...ClientOption) (*GetAPIV2CiRunsSelectorOK, error)

	GetAPIV2SelectorsCiRunsSelector(params *GetAPIV2SelectorsCiRunsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsCiRunsSelectorOK, error)

	PatchAPIV2CiRunsSelector(params *PatchAPIV2CiRunsSelectorParams, opts ...ClientOption) (*PatchAPIV2CiRunsSelectorOK, error)

	PostAPIV2CiRuns(params *PostAPIV2CiRunsParams, opts ...ClientOption) (*PostAPIV2CiRunsOK, *PostAPIV2CiRunsCreated, error)

	PutAPIV2CiRunsSelector(params *PutAPIV2CiRunsSelectorParams, opts ...ClientOption) (*PutAPIV2CiRunsSelectorOK, *PutAPIV2CiRunsSelectorCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIV2CiRunsSelector deletes a ci run entry

  Delete an existing CiRun entry via one of its "selectors": ID, 'github-actions/' + owner + repo + run ID + attempt number, or 'argo-workflows/' + namespace + name.
*/
func (a *Client) DeleteAPIV2CiRunsSelector(params *DeleteAPIV2CiRunsSelectorParams, opts ...ClientOption) (*DeleteAPIV2CiRunsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2CiRunsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2CiRunsSelector",
		Method:             "DELETE",
		PathPattern:        "/api/v2/ci-runs/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV2CiRunsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2CiRunsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2CiRunsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2CiRuns lists ci run entries

  List existing CiRun entries, ordered by most recently updated.
*/
func (a *Client) GetAPIV2CiRuns(params *GetAPIV2CiRunsParams, opts ...ClientOption) (*GetAPIV2CiRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2CiRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2CiRuns",
		Method:             "GET",
		PathPattern:        "/api/v2/ci-runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2CiRunsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2CiRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2CiRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2CiRunsSelector gets a ci run entry

  Get an existing CiRun entry via one of its "selectors": ID, 'github-actions/' + owner + repo + run ID + attempt number, or 'argo-workflows/' + namespace + name.
*/
func (a *Client) GetAPIV2CiRunsSelector(params *GetAPIV2CiRunsSelectorParams, opts ...ClientOption) (*GetAPIV2CiRunsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2CiRunsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2CiRunsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/ci-runs/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2CiRunsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2CiRunsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2CiRunsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2SelectorsCiRunsSelector lists ci run selectors

  Validate a given CiRun selector and provide any other selectors that would match the same CiRun.
*/
func (a *Client) GetAPIV2SelectorsCiRunsSelector(params *GetAPIV2SelectorsCiRunsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsCiRunsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SelectorsCiRunsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SelectorsCiRunsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/selectors/ci-runs/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2SelectorsCiRunsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SelectorsCiRunsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SelectorsCiRunsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIV2CiRunsSelector edits a ci run entry

  Edit an existing CiRun entry via one of its "selectors": ID, 'github-actions/' + owner + repo + run ID + attempt number, or 'argo-workflows/' + namespace + name. Note that only mutable fields are available here, immutable fields can only be set using /create.
*/
func (a *Client) PatchAPIV2CiRunsSelector(params *PatchAPIV2CiRunsSelectorParams, opts ...ClientOption) (*PatchAPIV2CiRunsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2CiRunsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2CiRunsSelector",
		Method:             "PATCH",
		PathPattern:        "/api/v2/ci-runs/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIV2CiRunsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2CiRunsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2CiRunsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2CiRuns creates a new ci run entry

  Create a new CiRun entry. Note that some fields are immutable after creation; /edit lists mutable fields.
*/
func (a *Client) PostAPIV2CiRuns(params *PostAPIV2CiRunsParams, opts ...ClientOption) (*PostAPIV2CiRunsOK, *PostAPIV2CiRunsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2CiRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2CiRuns",
		Method:             "POST",
		PathPattern:        "/api/v2/ci-runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2CiRunsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAPIV2CiRunsOK:
		return value, nil, nil
	case *PostAPIV2CiRunsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ci_runs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV2CiRunsSelector creates or edit a ci run entry

  Create or edit a CiRun entry. Attempts to edit and will attempt to create upon an error.
If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
*/
func (a *Client) PutAPIV2CiRunsSelector(params *PutAPIV2CiRunsSelectorParams, opts ...ClientOption) (*PutAPIV2CiRunsSelectorOK, *PutAPIV2CiRunsSelectorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2CiRunsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2CiRunsSelector",
		Method:             "PUT",
		PathPattern:        "/api/v2/ci-runs/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV2CiRunsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutAPIV2CiRunsSelectorOK:
		return value, nil, nil
	case *PutAPIV2CiRunsSelectorCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ci_runs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
