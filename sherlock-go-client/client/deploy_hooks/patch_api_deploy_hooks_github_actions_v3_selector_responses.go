// Code generated by go-swagger; DO NOT EDIT.

package deploy_hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/sherlock-go-client/client/models"
)

// PatchAPIDeployHooksGithubActionsV3SelectorReader is a Reader for the PatchAPIDeployHooksGithubActionsV3Selector structure.
type PatchAPIDeployHooksGithubActionsV3SelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIDeployHooksGithubActionsV3SelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIDeployHooksGithubActionsV3SelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorOK creates a PatchAPIDeployHooksGithubActionsV3SelectorOK with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorOK() *PatchAPIDeployHooksGithubActionsV3SelectorOK {
	return &PatchAPIDeployHooksGithubActionsV3SelectorOK{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIDeployHooksGithubActionsV3SelectorOK struct {
	Payload *models.SherlockGithubActionsDeployHookV3
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorOK  %+v", 200, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorOK) GetPayload() *models.SherlockGithubActionsDeployHookV3 {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SherlockGithubActionsDeployHookV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorBadRequest creates a PatchAPIDeployHooksGithubActionsV3SelectorBadRequest with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorBadRequest() *PatchAPIDeployHooksGithubActionsV3SelectorBadRequest {
	return &PatchAPIDeployHooksGithubActionsV3SelectorBadRequest{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIDeployHooksGithubActionsV3SelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorForbidden creates a PatchAPIDeployHooksGithubActionsV3SelectorForbidden with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorForbidden() *PatchAPIDeployHooksGithubActionsV3SelectorForbidden {
	return &PatchAPIDeployHooksGithubActionsV3SelectorForbidden{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIDeployHooksGithubActionsV3SelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorForbidden  %+v", 403, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorNotFound creates a PatchAPIDeployHooksGithubActionsV3SelectorNotFound with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorNotFound() *PatchAPIDeployHooksGithubActionsV3SelectorNotFound {
	return &PatchAPIDeployHooksGithubActionsV3SelectorNotFound{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIDeployHooksGithubActionsV3SelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorNotFound  %+v", 404, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired creates a PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired() *PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired {
	return &PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorConflict creates a PatchAPIDeployHooksGithubActionsV3SelectorConflict with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorConflict() *PatchAPIDeployHooksGithubActionsV3SelectorConflict {
	return &PatchAPIDeployHooksGithubActionsV3SelectorConflict{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIDeployHooksGithubActionsV3SelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorConflict  %+v", 409, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIDeployHooksGithubActionsV3SelectorInternalServerError creates a PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError with default headers values
func NewPatchAPIDeployHooksGithubActionsV3SelectorInternalServerError() *PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError {
	return &PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError{}
}

/* PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/deploy-hooks/github-actions/v3/{selector}][%d] patchApiDeployHooksGithubActionsV3SelectorInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIDeployHooksGithubActionsV3SelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
