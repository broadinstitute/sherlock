// Code generated by go-swagger; DO NOT EDIT.

package deploy_hooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIDeployHooksGithubActionsV3Params creates a new GetAPIDeployHooksGithubActionsV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIDeployHooksGithubActionsV3Params() *GetAPIDeployHooksGithubActionsV3Params {
	return &GetAPIDeployHooksGithubActionsV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIDeployHooksGithubActionsV3ParamsWithTimeout creates a new GetAPIDeployHooksGithubActionsV3Params object
// with the ability to set a timeout on a request.
func NewGetAPIDeployHooksGithubActionsV3ParamsWithTimeout(timeout time.Duration) *GetAPIDeployHooksGithubActionsV3Params {
	return &GetAPIDeployHooksGithubActionsV3Params{
		timeout: timeout,
	}
}

// NewGetAPIDeployHooksGithubActionsV3ParamsWithContext creates a new GetAPIDeployHooksGithubActionsV3Params object
// with the ability to set a context for a request.
func NewGetAPIDeployHooksGithubActionsV3ParamsWithContext(ctx context.Context) *GetAPIDeployHooksGithubActionsV3Params {
	return &GetAPIDeployHooksGithubActionsV3Params{
		Context: ctx,
	}
}

// NewGetAPIDeployHooksGithubActionsV3ParamsWithHTTPClient creates a new GetAPIDeployHooksGithubActionsV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIDeployHooksGithubActionsV3ParamsWithHTTPClient(client *http.Client) *GetAPIDeployHooksGithubActionsV3Params {
	return &GetAPIDeployHooksGithubActionsV3Params{
		HTTPClient: client,
	}
}

/* GetAPIDeployHooksGithubActionsV3Params contains all the parameters to send to the API endpoint
   for the get API deploy hooks github actions v3 operation.

   Typically these are written to a http.Request.
*/
type GetAPIDeployHooksGithubActionsV3Params struct {

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	// GithubActionsDefaultRef.
	GithubActionsDefaultRef *string

	// GithubActionsOwner.
	GithubActionsOwner *string

	/* GithubActionsRefBehavior.

	   This field determines what git ref the workflow will be run on. The default of always-use-default-ref always uses the default ref; use-app-version-as-ref will use the app version (when available) as the ref, useful when versions are always commit hashes or tags; use-app-version-commit-as-ref will use the app version's commit (when available) as the ref, useful when the repo is configured to fully report app versions to Sherlock.

	   Default: "always-use-default-ref"
	*/
	GithubActionsRefBehavior *string

	// GithubActionsRepo.
	GithubActionsRepo *string

	// GithubActionsWorkflowPath.
	GithubActionsWorkflowPath *string

	// ID.
	ID *int64

	/* Limit.

	   Control how many GithubActionsDeployHooks are returned (default 100)
	*/
	Limit *int64

	/* Offset.

	   Control the offset for the returned GithubActionsDeployHooks (default 0)
	*/
	Offset *int64

	// OnChartRelease.
	OnChartRelease *string

	// OnEnvironment.
	OnEnvironment *string

	// OnFailure.
	OnFailure *bool

	// OnSuccess.
	OnSuccess *bool

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API deploy hooks github actions v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIDeployHooksGithubActionsV3Params) WithDefaults() *GetAPIDeployHooksGithubActionsV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API deploy hooks github actions v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIDeployHooksGithubActionsV3Params) SetDefaults() {
	var (
		githubActionsRefBehaviorDefault = string("always-use-default-ref")
	)

	val := GetAPIDeployHooksGithubActionsV3Params{
		GithubActionsRefBehavior: &githubActionsRefBehaviorDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithTimeout(timeout time.Duration) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithContext(ctx context.Context) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithHTTPClient(client *http.Client) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAt adds the createdAt to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithGithubActionsDefaultRef adds the githubActionsDefaultRef to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithGithubActionsDefaultRef(githubActionsDefaultRef *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetGithubActionsDefaultRef(githubActionsDefaultRef)
	return o
}

// SetGithubActionsDefaultRef adds the githubActionsDefaultRef to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetGithubActionsDefaultRef(githubActionsDefaultRef *string) {
	o.GithubActionsDefaultRef = githubActionsDefaultRef
}

// WithGithubActionsOwner adds the githubActionsOwner to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithGithubActionsOwner(githubActionsOwner *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetGithubActionsOwner(githubActionsOwner)
	return o
}

// SetGithubActionsOwner adds the githubActionsOwner to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetGithubActionsOwner(githubActionsOwner *string) {
	o.GithubActionsOwner = githubActionsOwner
}

// WithGithubActionsRefBehavior adds the githubActionsRefBehavior to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithGithubActionsRefBehavior(githubActionsRefBehavior *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetGithubActionsRefBehavior(githubActionsRefBehavior)
	return o
}

// SetGithubActionsRefBehavior adds the githubActionsRefBehavior to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetGithubActionsRefBehavior(githubActionsRefBehavior *string) {
	o.GithubActionsRefBehavior = githubActionsRefBehavior
}

// WithGithubActionsRepo adds the githubActionsRepo to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithGithubActionsRepo(githubActionsRepo *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetGithubActionsRepo(githubActionsRepo)
	return o
}

// SetGithubActionsRepo adds the githubActionsRepo to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetGithubActionsRepo(githubActionsRepo *string) {
	o.GithubActionsRepo = githubActionsRepo
}

// WithGithubActionsWorkflowPath adds the githubActionsWorkflowPath to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithGithubActionsWorkflowPath(githubActionsWorkflowPath *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetGithubActionsWorkflowPath(githubActionsWorkflowPath)
	return o
}

// SetGithubActionsWorkflowPath adds the githubActionsWorkflowPath to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetGithubActionsWorkflowPath(githubActionsWorkflowPath *string) {
	o.GithubActionsWorkflowPath = githubActionsWorkflowPath
}

// WithID adds the id to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithID(id *int64) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithLimit(limit *int64) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithOffset(offset *int64) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOnChartRelease adds the onChartRelease to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithOnChartRelease(onChartRelease *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetOnChartRelease(onChartRelease)
	return o
}

// SetOnChartRelease adds the onChartRelease to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetOnChartRelease(onChartRelease *string) {
	o.OnChartRelease = onChartRelease
}

// WithOnEnvironment adds the onEnvironment to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithOnEnvironment(onEnvironment *string) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetOnEnvironment(onEnvironment)
	return o
}

// SetOnEnvironment adds the onEnvironment to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetOnEnvironment(onEnvironment *string) {
	o.OnEnvironment = onEnvironment
}

// WithOnFailure adds the onFailure to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithOnFailure(onFailure *bool) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetOnFailure(onFailure)
	return o
}

// SetOnFailure adds the onFailure to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetOnFailure(onFailure *bool) {
	o.OnFailure = onFailure
}

// WithOnSuccess adds the onSuccess to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithOnSuccess(onSuccess *bool) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetOnSuccess(onSuccess)
	return o
}

// SetOnSuccess adds the onSuccess to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetOnSuccess(onSuccess *bool) {
	o.OnSuccess = onSuccess
}

// WithUpdatedAt adds the updatedAt to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIDeployHooksGithubActionsV3Params {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API deploy hooks github actions v3 params
func (o *GetAPIDeployHooksGithubActionsV3Params) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIDeployHooksGithubActionsV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.GithubActionsDefaultRef != nil {

		// query param githubActionsDefaultRef
		var qrGithubActionsDefaultRef string

		if o.GithubActionsDefaultRef != nil {
			qrGithubActionsDefaultRef = *o.GithubActionsDefaultRef
		}
		qGithubActionsDefaultRef := qrGithubActionsDefaultRef
		if qGithubActionsDefaultRef != "" {

			if err := r.SetQueryParam("githubActionsDefaultRef", qGithubActionsDefaultRef); err != nil {
				return err
			}
		}
	}

	if o.GithubActionsOwner != nil {

		// query param githubActionsOwner
		var qrGithubActionsOwner string

		if o.GithubActionsOwner != nil {
			qrGithubActionsOwner = *o.GithubActionsOwner
		}
		qGithubActionsOwner := qrGithubActionsOwner
		if qGithubActionsOwner != "" {

			if err := r.SetQueryParam("githubActionsOwner", qGithubActionsOwner); err != nil {
				return err
			}
		}
	}

	if o.GithubActionsRefBehavior != nil {

		// query param githubActionsRefBehavior
		var qrGithubActionsRefBehavior string

		if o.GithubActionsRefBehavior != nil {
			qrGithubActionsRefBehavior = *o.GithubActionsRefBehavior
		}
		qGithubActionsRefBehavior := qrGithubActionsRefBehavior
		if qGithubActionsRefBehavior != "" {

			if err := r.SetQueryParam("githubActionsRefBehavior", qGithubActionsRefBehavior); err != nil {
				return err
			}
		}
	}

	if o.GithubActionsRepo != nil {

		// query param githubActionsRepo
		var qrGithubActionsRepo string

		if o.GithubActionsRepo != nil {
			qrGithubActionsRepo = *o.GithubActionsRepo
		}
		qGithubActionsRepo := qrGithubActionsRepo
		if qGithubActionsRepo != "" {

			if err := r.SetQueryParam("githubActionsRepo", qGithubActionsRepo); err != nil {
				return err
			}
		}
	}

	if o.GithubActionsWorkflowPath != nil {

		// query param githubActionsWorkflowPath
		var qrGithubActionsWorkflowPath string

		if o.GithubActionsWorkflowPath != nil {
			qrGithubActionsWorkflowPath = *o.GithubActionsWorkflowPath
		}
		qGithubActionsWorkflowPath := qrGithubActionsWorkflowPath
		if qGithubActionsWorkflowPath != "" {

			if err := r.SetQueryParam("githubActionsWorkflowPath", qGithubActionsWorkflowPath); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OnChartRelease != nil {

		// query param onChartRelease
		var qrOnChartRelease string

		if o.OnChartRelease != nil {
			qrOnChartRelease = *o.OnChartRelease
		}
		qOnChartRelease := qrOnChartRelease
		if qOnChartRelease != "" {

			if err := r.SetQueryParam("onChartRelease", qOnChartRelease); err != nil {
				return err
			}
		}
	}

	if o.OnEnvironment != nil {

		// query param onEnvironment
		var qrOnEnvironment string

		if o.OnEnvironment != nil {
			qrOnEnvironment = *o.OnEnvironment
		}
		qOnEnvironment := qrOnEnvironment
		if qOnEnvironment != "" {

			if err := r.SetQueryParam("onEnvironment", qOnEnvironment); err != nil {
				return err
			}
		}
	}

	if o.OnFailure != nil {

		// query param onFailure
		var qrOnFailure bool

		if o.OnFailure != nil {
			qrOnFailure = *o.OnFailure
		}
		qOnFailure := swag.FormatBool(qrOnFailure)
		if qOnFailure != "" {

			if err := r.SetQueryParam("onFailure", qOnFailure); err != nil {
				return err
			}
		}
	}

	if o.OnSuccess != nil {

		// query param onSuccess
		var qrOnSuccess bool

		if o.OnSuccess != nil {
			qrOnSuccess = *o.OnSuccess
		}
		qOnSuccess := swag.FormatBool(qrOnSuccess)
		if qOnSuccess != "" {

			if err := r.SetQueryParam("onSuccess", qOnSuccess); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
