// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIRolesV3Params creates a new GetAPIRolesV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIRolesV3Params() *GetAPIRolesV3Params {
	return &GetAPIRolesV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIRolesV3ParamsWithTimeout creates a new GetAPIRolesV3Params object
// with the ability to set a timeout on a request.
func NewGetAPIRolesV3ParamsWithTimeout(timeout time.Duration) *GetAPIRolesV3Params {
	return &GetAPIRolesV3Params{
		timeout: timeout,
	}
}

// NewGetAPIRolesV3ParamsWithContext creates a new GetAPIRolesV3Params object
// with the ability to set a context for a request.
func NewGetAPIRolesV3ParamsWithContext(ctx context.Context) *GetAPIRolesV3Params {
	return &GetAPIRolesV3Params{
		Context: ctx,
	}
}

// NewGetAPIRolesV3ParamsWithHTTPClient creates a new GetAPIRolesV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIRolesV3ParamsWithHTTPClient(client *http.Client) *GetAPIRolesV3Params {
	return &GetAPIRolesV3Params{
		HTTPClient: client,
	}
}

/* GetAPIRolesV3Params contains all the parameters to send to the API endpoint
   for the get API roles v3 operation.

   Typically these are written to a http.Request.
*/
type GetAPIRolesV3Params struct {

	/* AutoAssignAllUsers.

	   When true, Sherlock will automatically assign all users to this role who do not already have a role assignment
	*/
	AutoAssignAllUsers *bool

	// CanBeGlassBrokenByRole.
	CanBeGlassBrokenByRole *int64

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	// DefaultGlassBreakDuration.
	DefaultGlassBreakDuration *string

	// GrantsBroadInstituteGroup.
	GrantsBroadInstituteGroup *string

	// GrantsDevAzureGroup.
	GrantsDevAzureGroup *string

	// GrantsDevFirecloudGroup.
	GrantsDevFirecloudGroup *string

	// GrantsProdAzureGroup.
	GrantsProdAzureGroup *string

	// GrantsProdFirecloudGroup.
	GrantsProdFirecloudGroup *string

	// GrantsQaFirecloudGroup.
	GrantsQaFirecloudGroup *string

	// GrantsSherlockSuperAdmin.
	GrantsSherlockSuperAdmin *bool

	// ID.
	ID *int64

	/* Limit.

	   Control how many Roles are returned (default 0, no limit)
	*/
	Limit *int64

	// Name.
	Name *string

	/* Offset.

	   Control the offset for the returned Roles (default 0)
	*/
	Offset *int64

	/* SuspendNonSuitableUsers.

	   When true, the "suspended" field on role assignments will be computed by Sherlock based on suitability instead of being a mutable API field
	*/
	SuspendNonSuitableUsers *bool

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API roles v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIRolesV3Params) WithDefaults() *GetAPIRolesV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API roles v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIRolesV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithTimeout(timeout time.Duration) *GetAPIRolesV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithContext(ctx context.Context) *GetAPIRolesV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithHTTPClient(client *http.Client) *GetAPIRolesV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutoAssignAllUsers adds the autoAssignAllUsers to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithAutoAssignAllUsers(autoAssignAllUsers *bool) *GetAPIRolesV3Params {
	o.SetAutoAssignAllUsers(autoAssignAllUsers)
	return o
}

// SetAutoAssignAllUsers adds the autoAssignAllUsers to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetAutoAssignAllUsers(autoAssignAllUsers *bool) {
	o.AutoAssignAllUsers = autoAssignAllUsers
}

// WithCanBeGlassBrokenByRole adds the canBeGlassBrokenByRole to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithCanBeGlassBrokenByRole(canBeGlassBrokenByRole *int64) *GetAPIRolesV3Params {
	o.SetCanBeGlassBrokenByRole(canBeGlassBrokenByRole)
	return o
}

// SetCanBeGlassBrokenByRole adds the canBeGlassBrokenByRole to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetCanBeGlassBrokenByRole(canBeGlassBrokenByRole *int64) {
	o.CanBeGlassBrokenByRole = canBeGlassBrokenByRole
}

// WithCreatedAt adds the createdAt to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIRolesV3Params {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithDefaultGlassBreakDuration adds the defaultGlassBreakDuration to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithDefaultGlassBreakDuration(defaultGlassBreakDuration *string) *GetAPIRolesV3Params {
	o.SetDefaultGlassBreakDuration(defaultGlassBreakDuration)
	return o
}

// SetDefaultGlassBreakDuration adds the defaultGlassBreakDuration to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetDefaultGlassBreakDuration(defaultGlassBreakDuration *string) {
	o.DefaultGlassBreakDuration = defaultGlassBreakDuration
}

// WithGrantsBroadInstituteGroup adds the grantsBroadInstituteGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsBroadInstituteGroup(grantsBroadInstituteGroup *string) *GetAPIRolesV3Params {
	o.SetGrantsBroadInstituteGroup(grantsBroadInstituteGroup)
	return o
}

// SetGrantsBroadInstituteGroup adds the grantsBroadInstituteGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsBroadInstituteGroup(grantsBroadInstituteGroup *string) {
	o.GrantsBroadInstituteGroup = grantsBroadInstituteGroup
}

// WithGrantsDevAzureGroup adds the grantsDevAzureGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsDevAzureGroup(grantsDevAzureGroup *string) *GetAPIRolesV3Params {
	o.SetGrantsDevAzureGroup(grantsDevAzureGroup)
	return o
}

// SetGrantsDevAzureGroup adds the grantsDevAzureGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsDevAzureGroup(grantsDevAzureGroup *string) {
	o.GrantsDevAzureGroup = grantsDevAzureGroup
}

// WithGrantsDevFirecloudGroup adds the grantsDevFirecloudGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsDevFirecloudGroup(grantsDevFirecloudGroup *string) *GetAPIRolesV3Params {
	o.SetGrantsDevFirecloudGroup(grantsDevFirecloudGroup)
	return o
}

// SetGrantsDevFirecloudGroup adds the grantsDevFirecloudGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsDevFirecloudGroup(grantsDevFirecloudGroup *string) {
	o.GrantsDevFirecloudGroup = grantsDevFirecloudGroup
}

// WithGrantsProdAzureGroup adds the grantsProdAzureGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsProdAzureGroup(grantsProdAzureGroup *string) *GetAPIRolesV3Params {
	o.SetGrantsProdAzureGroup(grantsProdAzureGroup)
	return o
}

// SetGrantsProdAzureGroup adds the grantsProdAzureGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsProdAzureGroup(grantsProdAzureGroup *string) {
	o.GrantsProdAzureGroup = grantsProdAzureGroup
}

// WithGrantsProdFirecloudGroup adds the grantsProdFirecloudGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsProdFirecloudGroup(grantsProdFirecloudGroup *string) *GetAPIRolesV3Params {
	o.SetGrantsProdFirecloudGroup(grantsProdFirecloudGroup)
	return o
}

// SetGrantsProdFirecloudGroup adds the grantsProdFirecloudGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsProdFirecloudGroup(grantsProdFirecloudGroup *string) {
	o.GrantsProdFirecloudGroup = grantsProdFirecloudGroup
}

// WithGrantsQaFirecloudGroup adds the grantsQaFirecloudGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsQaFirecloudGroup(grantsQaFirecloudGroup *string) *GetAPIRolesV3Params {
	o.SetGrantsQaFirecloudGroup(grantsQaFirecloudGroup)
	return o
}

// SetGrantsQaFirecloudGroup adds the grantsQaFirecloudGroup to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsQaFirecloudGroup(grantsQaFirecloudGroup *string) {
	o.GrantsQaFirecloudGroup = grantsQaFirecloudGroup
}

// WithGrantsSherlockSuperAdmin adds the grantsSherlockSuperAdmin to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithGrantsSherlockSuperAdmin(grantsSherlockSuperAdmin *bool) *GetAPIRolesV3Params {
	o.SetGrantsSherlockSuperAdmin(grantsSherlockSuperAdmin)
	return o
}

// SetGrantsSherlockSuperAdmin adds the grantsSherlockSuperAdmin to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetGrantsSherlockSuperAdmin(grantsSherlockSuperAdmin *bool) {
	o.GrantsSherlockSuperAdmin = grantsSherlockSuperAdmin
}

// WithID adds the id to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithID(id *int64) *GetAPIRolesV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithLimit(limit *int64) *GetAPIRolesV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithName(name *string) *GetAPIRolesV3Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithOffset(offset *int64) *GetAPIRolesV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSuspendNonSuitableUsers adds the suspendNonSuitableUsers to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithSuspendNonSuitableUsers(suspendNonSuitableUsers *bool) *GetAPIRolesV3Params {
	o.SetSuspendNonSuitableUsers(suspendNonSuitableUsers)
	return o
}

// SetSuspendNonSuitableUsers adds the suspendNonSuitableUsers to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetSuspendNonSuitableUsers(suspendNonSuitableUsers *bool) {
	o.SuspendNonSuitableUsers = suspendNonSuitableUsers
}

// WithUpdatedAt adds the updatedAt to the get API roles v3 params
func (o *GetAPIRolesV3Params) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIRolesV3Params {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API roles v3 params
func (o *GetAPIRolesV3Params) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIRolesV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutoAssignAllUsers != nil {

		// query param autoAssignAllUsers
		var qrAutoAssignAllUsers bool

		if o.AutoAssignAllUsers != nil {
			qrAutoAssignAllUsers = *o.AutoAssignAllUsers
		}
		qAutoAssignAllUsers := swag.FormatBool(qrAutoAssignAllUsers)
		if qAutoAssignAllUsers != "" {

			if err := r.SetQueryParam("autoAssignAllUsers", qAutoAssignAllUsers); err != nil {
				return err
			}
		}
	}

	if o.CanBeGlassBrokenByRole != nil {

		// query param canBeGlassBrokenByRole
		var qrCanBeGlassBrokenByRole int64

		if o.CanBeGlassBrokenByRole != nil {
			qrCanBeGlassBrokenByRole = *o.CanBeGlassBrokenByRole
		}
		qCanBeGlassBrokenByRole := swag.FormatInt64(qrCanBeGlassBrokenByRole)
		if qCanBeGlassBrokenByRole != "" {

			if err := r.SetQueryParam("canBeGlassBrokenByRole", qCanBeGlassBrokenByRole); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.DefaultGlassBreakDuration != nil {

		// query param defaultGlassBreakDuration
		var qrDefaultGlassBreakDuration string

		if o.DefaultGlassBreakDuration != nil {
			qrDefaultGlassBreakDuration = *o.DefaultGlassBreakDuration
		}
		qDefaultGlassBreakDuration := qrDefaultGlassBreakDuration
		if qDefaultGlassBreakDuration != "" {

			if err := r.SetQueryParam("defaultGlassBreakDuration", qDefaultGlassBreakDuration); err != nil {
				return err
			}
		}
	}

	if o.GrantsBroadInstituteGroup != nil {

		// query param grantsBroadInstituteGroup
		var qrGrantsBroadInstituteGroup string

		if o.GrantsBroadInstituteGroup != nil {
			qrGrantsBroadInstituteGroup = *o.GrantsBroadInstituteGroup
		}
		qGrantsBroadInstituteGroup := qrGrantsBroadInstituteGroup
		if qGrantsBroadInstituteGroup != "" {

			if err := r.SetQueryParam("grantsBroadInstituteGroup", qGrantsBroadInstituteGroup); err != nil {
				return err
			}
		}
	}

	if o.GrantsDevAzureGroup != nil {

		// query param grantsDevAzureGroup
		var qrGrantsDevAzureGroup string

		if o.GrantsDevAzureGroup != nil {
			qrGrantsDevAzureGroup = *o.GrantsDevAzureGroup
		}
		qGrantsDevAzureGroup := qrGrantsDevAzureGroup
		if qGrantsDevAzureGroup != "" {

			if err := r.SetQueryParam("grantsDevAzureGroup", qGrantsDevAzureGroup); err != nil {
				return err
			}
		}
	}

	if o.GrantsDevFirecloudGroup != nil {

		// query param grantsDevFirecloudGroup
		var qrGrantsDevFirecloudGroup string

		if o.GrantsDevFirecloudGroup != nil {
			qrGrantsDevFirecloudGroup = *o.GrantsDevFirecloudGroup
		}
		qGrantsDevFirecloudGroup := qrGrantsDevFirecloudGroup
		if qGrantsDevFirecloudGroup != "" {

			if err := r.SetQueryParam("grantsDevFirecloudGroup", qGrantsDevFirecloudGroup); err != nil {
				return err
			}
		}
	}

	if o.GrantsProdAzureGroup != nil {

		// query param grantsProdAzureGroup
		var qrGrantsProdAzureGroup string

		if o.GrantsProdAzureGroup != nil {
			qrGrantsProdAzureGroup = *o.GrantsProdAzureGroup
		}
		qGrantsProdAzureGroup := qrGrantsProdAzureGroup
		if qGrantsProdAzureGroup != "" {

			if err := r.SetQueryParam("grantsProdAzureGroup", qGrantsProdAzureGroup); err != nil {
				return err
			}
		}
	}

	if o.GrantsProdFirecloudGroup != nil {

		// query param grantsProdFirecloudGroup
		var qrGrantsProdFirecloudGroup string

		if o.GrantsProdFirecloudGroup != nil {
			qrGrantsProdFirecloudGroup = *o.GrantsProdFirecloudGroup
		}
		qGrantsProdFirecloudGroup := qrGrantsProdFirecloudGroup
		if qGrantsProdFirecloudGroup != "" {

			if err := r.SetQueryParam("grantsProdFirecloudGroup", qGrantsProdFirecloudGroup); err != nil {
				return err
			}
		}
	}

	if o.GrantsQaFirecloudGroup != nil {

		// query param grantsQaFirecloudGroup
		var qrGrantsQaFirecloudGroup string

		if o.GrantsQaFirecloudGroup != nil {
			qrGrantsQaFirecloudGroup = *o.GrantsQaFirecloudGroup
		}
		qGrantsQaFirecloudGroup := qrGrantsQaFirecloudGroup
		if qGrantsQaFirecloudGroup != "" {

			if err := r.SetQueryParam("grantsQaFirecloudGroup", qGrantsQaFirecloudGroup); err != nil {
				return err
			}
		}
	}

	if o.GrantsSherlockSuperAdmin != nil {

		// query param grantsSherlockSuperAdmin
		var qrGrantsSherlockSuperAdmin bool

		if o.GrantsSherlockSuperAdmin != nil {
			qrGrantsSherlockSuperAdmin = *o.GrantsSherlockSuperAdmin
		}
		qGrantsSherlockSuperAdmin := swag.FormatBool(qrGrantsSherlockSuperAdmin)
		if qGrantsSherlockSuperAdmin != "" {

			if err := r.SetQueryParam("grantsSherlockSuperAdmin", qGrantsSherlockSuperAdmin); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.SuspendNonSuitableUsers != nil {

		// query param suspendNonSuitableUsers
		var qrSuspendNonSuitableUsers bool

		if o.SuspendNonSuitableUsers != nil {
			qrSuspendNonSuitableUsers = *o.SuspendNonSuitableUsers
		}
		qSuspendNonSuitableUsers := swag.FormatBool(qrSuspendNonSuitableUsers)
		if qSuspendNonSuitableUsers != "" {

			if err := r.SetQueryParam("suspendNonSuitableUsers", qSuspendNonSuitableUsers); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
