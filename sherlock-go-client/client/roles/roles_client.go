// Code generated by go-swagger; DO NOT EDIT.

package roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIRolesV3ID(params *DeleteAPIRolesV3IDParams, opts ...ClientOption) (*DeleteAPIRolesV3IDOK, error)

	GetAPIRolesV3(params *GetAPIRolesV3Params, opts ...ClientOption) (*GetAPIRolesV3OK, error)

	GetAPIRolesV3ID(params *GetAPIRolesV3IDParams, opts ...ClientOption) (*GetAPIRolesV3IDOK, error)

	PatchAPIRolesV3ID(params *PatchAPIRolesV3IDParams, opts ...ClientOption) (*PatchAPIRolesV3IDOK, error)

	PostAPIRolesV3(params *PostAPIRolesV3Params, opts ...ClientOption) (*PostAPIRolesV3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIRolesV3ID deletes a role

  Delete an individual Role.
Only super-admins may mutate Roles.
*/
func (a *Client) DeleteAPIRolesV3ID(params *DeleteAPIRolesV3IDParams, opts ...ClientOption) (*DeleteAPIRolesV3IDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIRolesV3IDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIRolesV3ID",
		Method:             "DELETE",
		PathPattern:        "/api/roles/v3/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIRolesV3IDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIRolesV3IDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIRolesV3ID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIRolesV3 lists roles matching a filter

  List Roles matching a filter.
*/
func (a *Client) GetAPIRolesV3(params *GetAPIRolesV3Params, opts ...ClientOption) (*GetAPIRolesV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIRolesV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIRolesV3",
		Method:             "GET",
		PathPattern:        "/api/roles/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIRolesV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIRolesV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIRolesV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIRolesV3ID gets a role

  Get an individual Role and the Users assigned to it.
*/
func (a *Client) GetAPIRolesV3ID(params *GetAPIRolesV3IDParams, opts ...ClientOption) (*GetAPIRolesV3IDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIRolesV3IDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIRolesV3ID",
		Method:             "GET",
		PathPattern:        "/api/roles/v3/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIRolesV3IDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIRolesV3IDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIRolesV3ID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIRolesV3ID edits a role

  Edit an individual Role.
Only super-admins may mutate Roles.
*/
func (a *Client) PatchAPIRolesV3ID(params *PatchAPIRolesV3IDParams, opts ...ClientOption) (*PatchAPIRolesV3IDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIRolesV3IDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIRolesV3ID",
		Method:             "PATCH",
		PathPattern:        "/api/roles/v3/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIRolesV3IDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIRolesV3IDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIRolesV3ID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIRolesV3 creates a role

  Create an individual Role with no one assigned to it.
Only super-admins may mutate Roles.
*/
func (a *Client) PostAPIRolesV3(params *PostAPIRolesV3Params, opts ...ClientOption) (*PostAPIRolesV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIRolesV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIRolesV3",
		Method:             "POST",
		PathPattern:        "/api/roles/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIRolesV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIRolesV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIRolesV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
