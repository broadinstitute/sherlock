// Code generated by go-swagger; DO NOT EDIT.

package git_commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/sherlock-go-client/client/models"
)

// PutAPIGitCommitsV3Reader is a Reader for the PutAPIGitCommitsV3 structure.
type PutAPIGitCommitsV3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAPIGitCommitsV3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewPutAPIGitCommitsV3Created()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutAPIGitCommitsV3BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAPIGitCommitsV3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutAPIGitCommitsV3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPutAPIGitCommitsV3ProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutAPIGitCommitsV3Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutAPIGitCommitsV3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutAPIGitCommitsV3Created creates a PutAPIGitCommitsV3Created with default headers values
func NewPutAPIGitCommitsV3Created() *PutAPIGitCommitsV3Created {
	return &PutAPIGitCommitsV3Created{}
}

/* PutAPIGitCommitsV3Created describes a response with status code 201, with default header values.

Created
*/
type PutAPIGitCommitsV3Created struct {
	Payload *models.SherlockGitCommitV3
}

func (o *PutAPIGitCommitsV3Created) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3Created  %+v", 201, o.Payload)
}
func (o *PutAPIGitCommitsV3Created) GetPayload() *models.SherlockGitCommitV3 {
	return o.Payload
}

func (o *PutAPIGitCommitsV3Created) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SherlockGitCommitV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIGitCommitsV3BadRequest creates a PutAPIGitCommitsV3BadRequest with default headers values
func NewPutAPIGitCommitsV3BadRequest() *PutAPIGitCommitsV3BadRequest {
	return &PutAPIGitCommitsV3BadRequest{}
}

/* PutAPIGitCommitsV3BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutAPIGitCommitsV3BadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PutAPIGitCommitsV3BadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3BadRequest  %+v", 400, o.Payload)
}
func (o *PutAPIGitCommitsV3BadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PutAPIGitCommitsV3BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIGitCommitsV3Forbidden creates a PutAPIGitCommitsV3Forbidden with default headers values
func NewPutAPIGitCommitsV3Forbidden() *PutAPIGitCommitsV3Forbidden {
	return &PutAPIGitCommitsV3Forbidden{}
}

/* PutAPIGitCommitsV3Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PutAPIGitCommitsV3Forbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PutAPIGitCommitsV3Forbidden) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3Forbidden  %+v", 403, o.Payload)
}
func (o *PutAPIGitCommitsV3Forbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PutAPIGitCommitsV3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIGitCommitsV3NotFound creates a PutAPIGitCommitsV3NotFound with default headers values
func NewPutAPIGitCommitsV3NotFound() *PutAPIGitCommitsV3NotFound {
	return &PutAPIGitCommitsV3NotFound{}
}

/* PutAPIGitCommitsV3NotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutAPIGitCommitsV3NotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PutAPIGitCommitsV3NotFound) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3NotFound  %+v", 404, o.Payload)
}
func (o *PutAPIGitCommitsV3NotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PutAPIGitCommitsV3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIGitCommitsV3ProxyAuthenticationRequired creates a PutAPIGitCommitsV3ProxyAuthenticationRequired with default headers values
func NewPutAPIGitCommitsV3ProxyAuthenticationRequired() *PutAPIGitCommitsV3ProxyAuthenticationRequired {
	return &PutAPIGitCommitsV3ProxyAuthenticationRequired{}
}

/* PutAPIGitCommitsV3ProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PutAPIGitCommitsV3ProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PutAPIGitCommitsV3ProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3ProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PutAPIGitCommitsV3ProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PutAPIGitCommitsV3ProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIGitCommitsV3Conflict creates a PutAPIGitCommitsV3Conflict with default headers values
func NewPutAPIGitCommitsV3Conflict() *PutAPIGitCommitsV3Conflict {
	return &PutAPIGitCommitsV3Conflict{}
}

/* PutAPIGitCommitsV3Conflict describes a response with status code 409, with default header values.

Conflict
*/
type PutAPIGitCommitsV3Conflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PutAPIGitCommitsV3Conflict) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3Conflict  %+v", 409, o.Payload)
}
func (o *PutAPIGitCommitsV3Conflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PutAPIGitCommitsV3Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIGitCommitsV3InternalServerError creates a PutAPIGitCommitsV3InternalServerError with default headers values
func NewPutAPIGitCommitsV3InternalServerError() *PutAPIGitCommitsV3InternalServerError {
	return &PutAPIGitCommitsV3InternalServerError{}
}

/* PutAPIGitCommitsV3InternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PutAPIGitCommitsV3InternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PutAPIGitCommitsV3InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/git-commits/v3][%d] putApiGitCommitsV3InternalServerError  %+v", 500, o.Payload)
}
func (o *PutAPIGitCommitsV3InternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PutAPIGitCommitsV3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
