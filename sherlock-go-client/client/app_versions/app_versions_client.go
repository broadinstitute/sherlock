// Code generated by go-swagger; DO NOT EDIT.

package app_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new app versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIAppVersionsProceduresV3Changelog(params *GetAPIAppVersionsProceduresV3ChangelogParams, opts ...ClientOption) (*GetAPIAppVersionsProceduresV3ChangelogOK, error)

	GetAPIAppVersionsV3(params *GetAPIAppVersionsV3Params, opts ...ClientOption) (*GetAPIAppVersionsV3OK, error)

	GetAPIAppVersionsV3Selector(params *GetAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*GetAPIAppVersionsV3SelectorOK, error)

	GetAPIV2AppVersions(params *GetAPIV2AppVersionsParams, opts ...ClientOption) (*GetAPIV2AppVersionsOK, error)

	GetAPIV2AppVersionsSelector(params *GetAPIV2AppVersionsSelectorParams, opts ...ClientOption) (*GetAPIV2AppVersionsSelectorOK, error)

	GetAPIV2ProceduresAppVersionsChildrenPathToParent(params *GetAPIV2ProceduresAppVersionsChildrenPathToParentParams, opts ...ClientOption) (*GetAPIV2ProceduresAppVersionsChildrenPathToParentOK, *GetAPIV2ProceduresAppVersionsChildrenPathToParentNoContent, error)

	GetAPIV2SelectorsAppVersionsSelector(params *GetAPIV2SelectorsAppVersionsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsAppVersionsSelectorOK, error)

	PatchAPIAppVersionsV3Selector(params *PatchAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*PatchAPIAppVersionsV3SelectorOK, error)

	PatchAPIV2AppVersionsSelector(params *PatchAPIV2AppVersionsSelectorParams, opts ...ClientOption) (*PatchAPIV2AppVersionsSelectorOK, error)

	PostAPIAppVersionsV3(params *PostAPIAppVersionsV3Params, opts ...ClientOption) (*PostAPIAppVersionsV3Created, error)

	PostAPIV2AppVersions(params *PostAPIV2AppVersionsParams, opts ...ClientOption) (*PostAPIV2AppVersionsOK, *PostAPIV2AppVersionsCreated, error)

	PutAPIV2AppVersionsSelector(params *PutAPIV2AppVersionsSelectorParams, opts ...ClientOption) (*PutAPIV2AppVersionsSelectorOK, *PutAPIV2AppVersionsSelectorCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPIAppVersionsProceduresV3Changelog gets a changelog between two app versions

  Get the path through parent references from a child AppVersion (inclusive) to a parent AppVersion (exclusive), if possible. Because parent references point from newer children to older parents, the newer AppVersion should be the child. The result will always exclude the parent.
*/
func (a *Client) GetAPIAppVersionsProceduresV3Changelog(params *GetAPIAppVersionsProceduresV3ChangelogParams, opts ...ClientOption) (*GetAPIAppVersionsProceduresV3ChangelogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAppVersionsProceduresV3ChangelogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIAppVersionsProceduresV3Changelog",
		Method:             "GET",
		PathPattern:        "/api/app-versions/procedures/v3/changelog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIAppVersionsProceduresV3ChangelogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAppVersionsProceduresV3ChangelogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAppVersionsProceduresV3Changelog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAppVersionsV3 lists app versions matching a filter

  List AppVersions matching a filter.
*/
func (a *Client) GetAPIAppVersionsV3(params *GetAPIAppVersionsV3Params, opts ...ClientOption) (*GetAPIAppVersionsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAppVersionsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIAppVersionsV3",
		Method:             "GET",
		PathPattern:        "/api/app-versions/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIAppVersionsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAppVersionsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAppVersionsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAppVersionsV3Selector gets an individual app version

  Get an individual AppVersion.
*/
func (a *Client) GetAPIAppVersionsV3Selector(params *GetAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*GetAPIAppVersionsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAppVersionsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIAppVersionsV3Selector",
		Method:             "GET",
		PathPattern:        "/api/app-versions/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIAppVersionsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAppVersionsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAppVersionsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2AppVersions lists app version entries

  List existing AppVersion entries, ordered by most recently updated.
*/
func (a *Client) GetAPIV2AppVersions(params *GetAPIV2AppVersionsParams, opts ...ClientOption) (*GetAPIV2AppVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2AppVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2AppVersions",
		Method:             "GET",
		PathPattern:        "/api/v2/app-versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2AppVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2AppVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2AppVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2AppVersionsSelector gets a app version entry

  Get an existing AppVersion entry via one its "selectors": chart/version or numeric ID.
*/
func (a *Client) GetAPIV2AppVersionsSelector(params *GetAPIV2AppVersionsSelectorParams, opts ...ClientOption) (*GetAPIV2AppVersionsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2AppVersionsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2AppVersionsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/app-versions/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2AppVersionsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2AppVersionsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2AppVersionsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2ProceduresAppVersionsChildrenPathToParent gets a changelog between two app versions

  Get the path through parent references from a child AppVersion (inclusive) to a parent AppVersion (exclusive), if possible. Because parent references point from newer children to older parents, the newer AppVersion should be the child. The result will always exclude the parent. If the child can't be connected to the parent, just the child will be returned with a 204 code.
*/
func (a *Client) GetAPIV2ProceduresAppVersionsChildrenPathToParent(params *GetAPIV2ProceduresAppVersionsChildrenPathToParentParams, opts ...ClientOption) (*GetAPIV2ProceduresAppVersionsChildrenPathToParentOK, *GetAPIV2ProceduresAppVersionsChildrenPathToParentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ProceduresAppVersionsChildrenPathToParentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2ProceduresAppVersionsChildrenPathToParent",
		Method:             "GET",
		PathPattern:        "/api/v2/procedures/app-versions/children-path-to-parent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2ProceduresAppVersionsChildrenPathToParentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAPIV2ProceduresAppVersionsChildrenPathToParentOK:
		return value, nil, nil
	case *GetAPIV2ProceduresAppVersionsChildrenPathToParentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for app_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2SelectorsAppVersionsSelector lists app version selectors

  Validate a given AppVersion selector and provide any other selectors that would match the same AppVersion.
*/
func (a *Client) GetAPIV2SelectorsAppVersionsSelector(params *GetAPIV2SelectorsAppVersionsSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsAppVersionsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SelectorsAppVersionsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SelectorsAppVersionsSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/selectors/app-versions/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2SelectorsAppVersionsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SelectorsAppVersionsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SelectorsAppVersionsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIAppVersionsV3Selector edits an individual app version

  Edit an individual AppVersion.
*/
func (a *Client) PatchAPIAppVersionsV3Selector(params *PatchAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*PatchAPIAppVersionsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIAppVersionsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIAppVersionsV3Selector",
		Method:             "PATCH",
		PathPattern:        "/api/app-versions/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIAppVersionsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIAppVersionsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIAppVersionsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIV2AppVersionsSelector edits a app version entry

  Edit an existing AppVersion entry via one its "selectors": chart/version or numeric ID. Note that only mutable fields are available here, immutable fields can only be set using /create.
*/
func (a *Client) PatchAPIV2AppVersionsSelector(params *PatchAPIV2AppVersionsSelectorParams, opts ...ClientOption) (*PatchAPIV2AppVersionsSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2AppVersionsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2AppVersionsSelector",
		Method:             "PATCH",
		PathPattern:        "/api/v2/app-versions/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIV2AppVersionsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2AppVersionsSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2AppVersionsSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIAppVersionsV3 upserts a app version

  Upsert a AppVersion.
*/
func (a *Client) PostAPIAppVersionsV3(params *PostAPIAppVersionsV3Params, opts ...ClientOption) (*PostAPIAppVersionsV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIAppVersionsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIAppVersionsV3",
		Method:             "POST",
		PathPattern:        "/api/app-versions/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIAppVersionsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIAppVersionsV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIAppVersionsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2AppVersions creates a new app version entry

  Create a new AppVersion entry. Note that fields are immutable after creation.
If the new entry is a duplicate of one already in the database, the database will not be altered and the call will return normally but with a 200 code.
*/
func (a *Client) PostAPIV2AppVersions(params *PostAPIV2AppVersionsParams, opts ...ClientOption) (*PostAPIV2AppVersionsOK, *PostAPIV2AppVersionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2AppVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2AppVersions",
		Method:             "POST",
		PathPattern:        "/api/v2/app-versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2AppVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAPIV2AppVersionsOK:
		return value, nil, nil
	case *PostAPIV2AppVersionsCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for app_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV2AppVersionsSelector creates or edit an app version entry

  Create or edit an AppVersion entry. Attempts to edit and will attempt to create upon an error.
If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
*/
func (a *Client) PutAPIV2AppVersionsSelector(params *PutAPIV2AppVersionsSelectorParams, opts ...ClientOption) (*PutAPIV2AppVersionsSelectorOK, *PutAPIV2AppVersionsSelectorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2AppVersionsSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2AppVersionsSelector",
		Method:             "PUT",
		PathPattern:        "/api/v2/app-versions/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV2AppVersionsSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutAPIV2AppVersionsSelectorOK:
		return value, nil, nil
	case *PutAPIV2AppVersionsSelectorCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for app_versions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
