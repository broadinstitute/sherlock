// Code generated by go-swagger; DO NOT EDIT.

package app_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new app versions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for app versions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIAppVersionsProceduresV3Changelog(params *GetAPIAppVersionsProceduresV3ChangelogParams, opts ...ClientOption) (*GetAPIAppVersionsProceduresV3ChangelogOK, error)

	GetAPIAppVersionsV3(params *GetAPIAppVersionsV3Params, opts ...ClientOption) (*GetAPIAppVersionsV3OK, error)

	GetAPIAppVersionsV3Selector(params *GetAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*GetAPIAppVersionsV3SelectorOK, error)

	PatchAPIAppVersionsV3Selector(params *PatchAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*PatchAPIAppVersionsV3SelectorOK, error)

	PutAPIAppVersionsV3(params *PutAPIAppVersionsV3Params, opts ...ClientOption) (*PutAPIAppVersionsV3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPIAppVersionsProceduresV3Changelog gets a changelog between two app versions

  Get the path through parent references from a child AppVersion (inclusive) to a parent AppVersion (exclusive), if possible. Because parent references point from newer children to older parents, the newer AppVersion should be the child. The result will always exclude the parent.
*/
func (a *Client) GetAPIAppVersionsProceduresV3Changelog(params *GetAPIAppVersionsProceduresV3ChangelogParams, opts ...ClientOption) (*GetAPIAppVersionsProceduresV3ChangelogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAppVersionsProceduresV3ChangelogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIAppVersionsProceduresV3Changelog",
		Method:             "GET",
		PathPattern:        "/api/app-versions/procedures/v3/changelog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIAppVersionsProceduresV3ChangelogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAppVersionsProceduresV3ChangelogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAppVersionsProceduresV3Changelog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAppVersionsV3 lists app versions matching a filter

  List AppVersions matching a filter.
*/
func (a *Client) GetAPIAppVersionsV3(params *GetAPIAppVersionsV3Params, opts ...ClientOption) (*GetAPIAppVersionsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAppVersionsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIAppVersionsV3",
		Method:             "GET",
		PathPattern:        "/api/app-versions/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIAppVersionsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAppVersionsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAppVersionsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIAppVersionsV3Selector gets an individual app version

  Get an individual AppVersion.
*/
func (a *Client) GetAPIAppVersionsV3Selector(params *GetAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*GetAPIAppVersionsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIAppVersionsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIAppVersionsV3Selector",
		Method:             "GET",
		PathPattern:        "/api/app-versions/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIAppVersionsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIAppVersionsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIAppVersionsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIAppVersionsV3Selector edits an individual app version

  Edit an individual AppVersion.
*/
func (a *Client) PatchAPIAppVersionsV3Selector(params *PatchAPIAppVersionsV3SelectorParams, opts ...ClientOption) (*PatchAPIAppVersionsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIAppVersionsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIAppVersionsV3Selector",
		Method:             "PATCH",
		PathPattern:        "/api/app-versions/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIAppVersionsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIAppVersionsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIAppVersionsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIAppVersionsV3 upserts a app version

  Upsert a AppVersion.
*/
func (a *Client) PutAPIAppVersionsV3(params *PutAPIAppVersionsV3Params, opts ...ClientOption) (*PutAPIAppVersionsV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIAppVersionsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIAppVersionsV3",
		Method:             "PUT",
		PathPattern:        "/api/app-versions/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIAppVersionsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIAppVersionsV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIAppVersionsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
