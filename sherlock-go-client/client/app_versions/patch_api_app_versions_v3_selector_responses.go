// Code generated by go-swagger; DO NOT EDIT.

package app_versions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/sherlock-go-client/client/models"
)

// PatchAPIAppVersionsV3SelectorReader is a Reader for the PatchAPIAppVersionsV3Selector structure.
type PatchAPIAppVersionsV3SelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIAppVersionsV3SelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIAppVersionsV3SelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIAppVersionsV3SelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIAppVersionsV3SelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIAppVersionsV3SelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIAppVersionsV3SelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIAppVersionsV3SelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIAppVersionsV3SelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIAppVersionsV3SelectorOK creates a PatchAPIAppVersionsV3SelectorOK with default headers values
func NewPatchAPIAppVersionsV3SelectorOK() *PatchAPIAppVersionsV3SelectorOK {
	return &PatchAPIAppVersionsV3SelectorOK{}
}

/* PatchAPIAppVersionsV3SelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIAppVersionsV3SelectorOK struct {
	Payload *models.SherlockAppVersionV3
}

func (o *PatchAPIAppVersionsV3SelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorOK  %+v", 200, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorOK) GetPayload() *models.SherlockAppVersionV3 {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SherlockAppVersionV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIAppVersionsV3SelectorBadRequest creates a PatchAPIAppVersionsV3SelectorBadRequest with default headers values
func NewPatchAPIAppVersionsV3SelectorBadRequest() *PatchAPIAppVersionsV3SelectorBadRequest {
	return &PatchAPIAppVersionsV3SelectorBadRequest{}
}

/* PatchAPIAppVersionsV3SelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIAppVersionsV3SelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIAppVersionsV3SelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIAppVersionsV3SelectorForbidden creates a PatchAPIAppVersionsV3SelectorForbidden with default headers values
func NewPatchAPIAppVersionsV3SelectorForbidden() *PatchAPIAppVersionsV3SelectorForbidden {
	return &PatchAPIAppVersionsV3SelectorForbidden{}
}

/* PatchAPIAppVersionsV3SelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIAppVersionsV3SelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIAppVersionsV3SelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorForbidden  %+v", 403, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIAppVersionsV3SelectorNotFound creates a PatchAPIAppVersionsV3SelectorNotFound with default headers values
func NewPatchAPIAppVersionsV3SelectorNotFound() *PatchAPIAppVersionsV3SelectorNotFound {
	return &PatchAPIAppVersionsV3SelectorNotFound{}
}

/* PatchAPIAppVersionsV3SelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIAppVersionsV3SelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIAppVersionsV3SelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorNotFound  %+v", 404, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIAppVersionsV3SelectorProxyAuthenticationRequired creates a PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIAppVersionsV3SelectorProxyAuthenticationRequired() *PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired {
	return &PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired{}
}

/* PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIAppVersionsV3SelectorConflict creates a PatchAPIAppVersionsV3SelectorConflict with default headers values
func NewPatchAPIAppVersionsV3SelectorConflict() *PatchAPIAppVersionsV3SelectorConflict {
	return &PatchAPIAppVersionsV3SelectorConflict{}
}

/* PatchAPIAppVersionsV3SelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIAppVersionsV3SelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIAppVersionsV3SelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorConflict  %+v", 409, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIAppVersionsV3SelectorInternalServerError creates a PatchAPIAppVersionsV3SelectorInternalServerError with default headers values
func NewPatchAPIAppVersionsV3SelectorInternalServerError() *PatchAPIAppVersionsV3SelectorInternalServerError {
	return &PatchAPIAppVersionsV3SelectorInternalServerError{}
}

/* PatchAPIAppVersionsV3SelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIAppVersionsV3SelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIAppVersionsV3SelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/app-versions/v3/{selector}][%d] patchApiAppVersionsV3SelectorInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAPIAppVersionsV3SelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIAppVersionsV3SelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
