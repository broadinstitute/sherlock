// Code generated by go-swagger; DO NOT EDIT.

package environments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new environments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for environments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIEnvironmentsV3Selector(params *DeleteAPIEnvironmentsV3SelectorParams, opts ...ClientOption) (*DeleteAPIEnvironmentsV3SelectorOK, error)

	GetAPIEnvironmentsV3(params *GetAPIEnvironmentsV3Params, opts ...ClientOption) (*GetAPIEnvironmentsV3OK, error)

	GetAPIEnvironmentsV3Selector(params *GetAPIEnvironmentsV3SelectorParams, opts ...ClientOption) (*GetAPIEnvironmentsV3SelectorOK, error)

	PatchAPIEnvironmentsV3Selector(params *PatchAPIEnvironmentsV3SelectorParams, opts ...ClientOption) (*PatchAPIEnvironmentsV3SelectorOK, error)

	PostAPIEnvironmentsV3(params *PostAPIEnvironmentsV3Params, opts ...ClientOption) (*PostAPIEnvironmentsV3Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAPIEnvironmentsV3Selector deletes an individual environment

  Delete an individual Environment by its ID.
*/
func (a *Client) DeleteAPIEnvironmentsV3Selector(params *DeleteAPIEnvironmentsV3SelectorParams, opts ...ClientOption) (*DeleteAPIEnvironmentsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIEnvironmentsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIEnvironmentsV3Selector",
		Method:             "DELETE",
		PathPattern:        "/api/environments/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIEnvironmentsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIEnvironmentsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIEnvironmentsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIEnvironmentsV3 lists environments matching a filter

  List Environments matching a filter.
*/
func (a *Client) GetAPIEnvironmentsV3(params *GetAPIEnvironmentsV3Params, opts ...ClientOption) (*GetAPIEnvironmentsV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIEnvironmentsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIEnvironmentsV3",
		Method:             "GET",
		PathPattern:        "/api/environments/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIEnvironmentsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIEnvironmentsV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIEnvironmentsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIEnvironmentsV3Selector gets an individual environment

  Get an individual Environment.
*/
func (a *Client) GetAPIEnvironmentsV3Selector(params *GetAPIEnvironmentsV3SelectorParams, opts ...ClientOption) (*GetAPIEnvironmentsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIEnvironmentsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIEnvironmentsV3Selector",
		Method:             "GET",
		PathPattern:        "/api/environments/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIEnvironmentsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIEnvironmentsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIEnvironmentsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIEnvironmentsV3Selector edits an individual environment

  Edit an individual Environment.
*/
func (a *Client) PatchAPIEnvironmentsV3Selector(params *PatchAPIEnvironmentsV3SelectorParams, opts ...ClientOption) (*PatchAPIEnvironmentsV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIEnvironmentsV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIEnvironmentsV3Selector",
		Method:             "PATCH",
		PathPattern:        "/api/environments/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIEnvironmentsV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIEnvironmentsV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIEnvironmentsV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIEnvironmentsV3 creates a environment

  Create a Environment.
*/
func (a *Client) PostAPIEnvironmentsV3(params *PostAPIEnvironmentsV3Params, opts ...ClientOption) (*PostAPIEnvironmentsV3Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIEnvironmentsV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIEnvironmentsV3",
		Method:             "POST",
		PathPattern:        "/api/environments/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIEnvironmentsV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIEnvironmentsV3Created)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIEnvironmentsV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
