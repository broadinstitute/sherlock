// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/broadinstitute/sherlock/sherlock-go-client/client/models"
)

// PatchAPIIncidentsV3SelectorReader is a Reader for the PatchAPIIncidentsV3Selector structure.
type PatchAPIIncidentsV3SelectorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAPIIncidentsV3SelectorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAPIIncidentsV3SelectorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAPIIncidentsV3SelectorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchAPIIncidentsV3SelectorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAPIIncidentsV3SelectorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 407:
		result := NewPatchAPIIncidentsV3SelectorProxyAuthenticationRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPatchAPIIncidentsV3SelectorConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAPIIncidentsV3SelectorInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAPIIncidentsV3SelectorOK creates a PatchAPIIncidentsV3SelectorOK with default headers values
func NewPatchAPIIncidentsV3SelectorOK() *PatchAPIIncidentsV3SelectorOK {
	return &PatchAPIIncidentsV3SelectorOK{}
}

/* PatchAPIIncidentsV3SelectorOK describes a response with status code 200, with default header values.

OK
*/
type PatchAPIIncidentsV3SelectorOK struct {
	Payload *models.SherlockIncidentV3
}

func (o *PatchAPIIncidentsV3SelectorOK) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorOK  %+v", 200, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorOK) GetPayload() *models.SherlockIncidentV3 {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SherlockIncidentV3)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIIncidentsV3SelectorBadRequest creates a PatchAPIIncidentsV3SelectorBadRequest with default headers values
func NewPatchAPIIncidentsV3SelectorBadRequest() *PatchAPIIncidentsV3SelectorBadRequest {
	return &PatchAPIIncidentsV3SelectorBadRequest{}
}

/* PatchAPIIncidentsV3SelectorBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchAPIIncidentsV3SelectorBadRequest struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIIncidentsV3SelectorBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorBadRequest) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIIncidentsV3SelectorForbidden creates a PatchAPIIncidentsV3SelectorForbidden with default headers values
func NewPatchAPIIncidentsV3SelectorForbidden() *PatchAPIIncidentsV3SelectorForbidden {
	return &PatchAPIIncidentsV3SelectorForbidden{}
}

/* PatchAPIIncidentsV3SelectorForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchAPIIncidentsV3SelectorForbidden struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIIncidentsV3SelectorForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorForbidden  %+v", 403, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorForbidden) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIIncidentsV3SelectorNotFound creates a PatchAPIIncidentsV3SelectorNotFound with default headers values
func NewPatchAPIIncidentsV3SelectorNotFound() *PatchAPIIncidentsV3SelectorNotFound {
	return &PatchAPIIncidentsV3SelectorNotFound{}
}

/* PatchAPIIncidentsV3SelectorNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PatchAPIIncidentsV3SelectorNotFound struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIIncidentsV3SelectorNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorNotFound  %+v", 404, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorNotFound) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIIncidentsV3SelectorProxyAuthenticationRequired creates a PatchAPIIncidentsV3SelectorProxyAuthenticationRequired with default headers values
func NewPatchAPIIncidentsV3SelectorProxyAuthenticationRequired() *PatchAPIIncidentsV3SelectorProxyAuthenticationRequired {
	return &PatchAPIIncidentsV3SelectorProxyAuthenticationRequired{}
}

/* PatchAPIIncidentsV3SelectorProxyAuthenticationRequired describes a response with status code 407, with default header values.

Proxy Authentication Required
*/
type PatchAPIIncidentsV3SelectorProxyAuthenticationRequired struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIIncidentsV3SelectorProxyAuthenticationRequired) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorProxyAuthenticationRequired  %+v", 407, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorProxyAuthenticationRequired) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorProxyAuthenticationRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIIncidentsV3SelectorConflict creates a PatchAPIIncidentsV3SelectorConflict with default headers values
func NewPatchAPIIncidentsV3SelectorConflict() *PatchAPIIncidentsV3SelectorConflict {
	return &PatchAPIIncidentsV3SelectorConflict{}
}

/* PatchAPIIncidentsV3SelectorConflict describes a response with status code 409, with default header values.

Conflict
*/
type PatchAPIIncidentsV3SelectorConflict struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIIncidentsV3SelectorConflict) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorConflict  %+v", 409, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorConflict) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAPIIncidentsV3SelectorInternalServerError creates a PatchAPIIncidentsV3SelectorInternalServerError with default headers values
func NewPatchAPIIncidentsV3SelectorInternalServerError() *PatchAPIIncidentsV3SelectorInternalServerError {
	return &PatchAPIIncidentsV3SelectorInternalServerError{}
}

/* PatchAPIIncidentsV3SelectorInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PatchAPIIncidentsV3SelectorInternalServerError struct {
	Payload *models.ErrorsErrorResponse
}

func (o *PatchAPIIncidentsV3SelectorInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /api/incidents/v3/{selector}][%d] patchApiIncidentsV3SelectorInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAPIIncidentsV3SelectorInternalServerError) GetPayload() *models.ErrorsErrorResponse {
	return o.Payload
}

func (o *PatchAPIIncidentsV3SelectorInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
