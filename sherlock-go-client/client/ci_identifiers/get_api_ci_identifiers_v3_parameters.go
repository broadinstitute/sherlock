// Code generated by go-swagger; DO NOT EDIT.

package ci_identifiers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPICiIdentifiersV3Params creates a new GetAPICiIdentifiersV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPICiIdentifiersV3Params() *GetAPICiIdentifiersV3Params {
	return &GetAPICiIdentifiersV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPICiIdentifiersV3ParamsWithTimeout creates a new GetAPICiIdentifiersV3Params object
// with the ability to set a timeout on a request.
func NewGetAPICiIdentifiersV3ParamsWithTimeout(timeout time.Duration) *GetAPICiIdentifiersV3Params {
	return &GetAPICiIdentifiersV3Params{
		timeout: timeout,
	}
}

// NewGetAPICiIdentifiersV3ParamsWithContext creates a new GetAPICiIdentifiersV3Params object
// with the ability to set a context for a request.
func NewGetAPICiIdentifiersV3ParamsWithContext(ctx context.Context) *GetAPICiIdentifiersV3Params {
	return &GetAPICiIdentifiersV3Params{
		Context: ctx,
	}
}

// NewGetAPICiIdentifiersV3ParamsWithHTTPClient creates a new GetAPICiIdentifiersV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPICiIdentifiersV3ParamsWithHTTPClient(client *http.Client) *GetAPICiIdentifiersV3Params {
	return &GetAPICiIdentifiersV3Params{
		HTTPClient: client,
	}
}

/* GetAPICiIdentifiersV3Params contains all the parameters to send to the API endpoint
   for the get API ci identifiers v3 operation.

   Typically these are written to a http.Request.
*/
type GetAPICiIdentifiersV3Params struct {

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	// ID.
	ID *int64

	/* Limit.

	   Control how many CiIdentifiers are returned (default 100)
	*/
	Limit *int64

	/* Offset.

	   Control the offset for the returned CiIdentifiers (default 0)
	*/
	Offset *int64

	// ResourceID.
	ResourceID *int64

	/* ResourceStatus.

	   Available only when querying a CiIdentifier via a CiRun, indicates the status of the run for that resource
	*/
	ResourceStatus *string

	// ResourceType.
	ResourceType *string

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API ci identifiers v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPICiIdentifiersV3Params) WithDefaults() *GetAPICiIdentifiersV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API ci identifiers v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPICiIdentifiersV3Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithTimeout(timeout time.Duration) *GetAPICiIdentifiersV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithContext(ctx context.Context) *GetAPICiIdentifiersV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithHTTPClient(client *http.Client) *GetAPICiIdentifiersV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAt adds the createdAt to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPICiIdentifiersV3Params {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithID adds the id to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithID(id *int64) *GetAPICiIdentifiersV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithLimit(limit *int64) *GetAPICiIdentifiersV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithOffset(offset *int64) *GetAPICiIdentifiersV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithResourceID adds the resourceID to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithResourceID(resourceID *int64) *GetAPICiIdentifiersV3Params {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetResourceID(resourceID *int64) {
	o.ResourceID = resourceID
}

// WithResourceStatus adds the resourceStatus to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithResourceStatus(resourceStatus *string) *GetAPICiIdentifiersV3Params {
	o.SetResourceStatus(resourceStatus)
	return o
}

// SetResourceStatus adds the resourceStatus to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetResourceStatus(resourceStatus *string) {
	o.ResourceStatus = resourceStatus
}

// WithResourceType adds the resourceType to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithResourceType(resourceType *string) *GetAPICiIdentifiersV3Params {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WithUpdatedAt adds the updatedAt to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPICiIdentifiersV3Params {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API ci identifiers v3 params
func (o *GetAPICiIdentifiersV3Params) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPICiIdentifiersV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.ResourceID != nil {

		// query param resourceID
		var qrResourceID int64

		if o.ResourceID != nil {
			qrResourceID = *o.ResourceID
		}
		qResourceID := swag.FormatInt64(qrResourceID)
		if qResourceID != "" {

			if err := r.SetQueryParam("resourceID", qResourceID); err != nil {
				return err
			}
		}
	}

	if o.ResourceStatus != nil {

		// query param resourceStatus
		var qrResourceStatus string

		if o.ResourceStatus != nil {
			qrResourceStatus = *o.ResourceStatus
		}
		qResourceStatus := qrResourceStatus
		if qResourceStatus != "" {

			if err := r.SetQueryParam("resourceStatus", qResourceStatus); err != nil {
				return err
			}
		}
	}

	if o.ResourceType != nil {

		// query param resourceType
		var qrResourceType string

		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {

			if err := r.SetQueryParam("resourceType", qResourceType); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
