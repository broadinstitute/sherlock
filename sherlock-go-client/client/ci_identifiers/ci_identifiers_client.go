// Code generated by go-swagger; DO NOT EDIT.

package ci_identifiers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ci identifiers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ci identifiers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPICiIdentifiersV3(params *GetAPICiIdentifiersV3Params, opts ...ClientOption) (*GetAPICiIdentifiersV3OK, error)

	GetAPICiIdentifiersV3Selector(params *GetAPICiIdentifiersV3SelectorParams, opts ...ClientOption) (*GetAPICiIdentifiersV3SelectorOK, error)

	GetAPIV2CiIdentifiers(params *GetAPIV2CiIdentifiersParams, opts ...ClientOption) (*GetAPIV2CiIdentifiersOK, error)

	GetAPIV2CiIdentifiersSelector(params *GetAPIV2CiIdentifiersSelectorParams, opts ...ClientOption) (*GetAPIV2CiIdentifiersSelectorOK, error)

	GetAPIV2SelectorsCiIdentifiersSelector(params *GetAPIV2SelectorsCiIdentifiersSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsCiIdentifiersSelectorOK, error)

	PatchAPIV2CiIdentifiersSelector(params *PatchAPIV2CiIdentifiersSelectorParams, opts ...ClientOption) (*PatchAPIV2CiIdentifiersSelectorOK, error)

	PostAPIV2CiIdentifiers(params *PostAPIV2CiIdentifiersParams, opts ...ClientOption) (*PostAPIV2CiIdentifiersOK, *PostAPIV2CiIdentifiersCreated, error)

	PutAPIV2CiIdentifiersSelector(params *PutAPIV2CiIdentifiersSelectorParams, opts ...ClientOption) (*PutAPIV2CiIdentifiersSelectorOK, *PutAPIV2CiIdentifiersSelectorCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAPICiIdentifiersV3 lists ci identifiers matching a filter

  List CiIdentifiers matching a filter. The CiRuns would have to re-queried directly to load the CiRuns.
This is mainly helpful for debugging and directly querying the existence of a CiIdentifier. Results are
ordered by creation date, starting at most recent.
*/
func (a *Client) GetAPICiIdentifiersV3(params *GetAPICiIdentifiersV3Params, opts ...ClientOption) (*GetAPICiIdentifiersV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICiIdentifiersV3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICiIdentifiersV3",
		Method:             "GET",
		PathPattern:        "/api/ci-identifiers/v3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICiIdentifiersV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICiIdentifiersV3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPICiIdentifiersV3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPICiIdentifiersV3Selector gets ci runs for a resource by its ci identifier

  Get CiRuns for a resource by its CiIdentifier, which can be referenced by '{type}/{selector...}'.
*/
func (a *Client) GetAPICiIdentifiersV3Selector(params *GetAPICiIdentifiersV3SelectorParams, opts ...ClientOption) (*GetAPICiIdentifiersV3SelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPICiIdentifiersV3SelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPICiIdentifiersV3Selector",
		Method:             "GET",
		PathPattern:        "/api/ci-identifiers/v3/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPICiIdentifiersV3SelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPICiIdentifiersV3SelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPICiIdentifiersV3Selector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2CiIdentifiers lists ci identifier entries

  List existing CiIdentifier entries, ordered by most recently updated.
*/
func (a *Client) GetAPIV2CiIdentifiers(params *GetAPIV2CiIdentifiersParams, opts ...ClientOption) (*GetAPIV2CiIdentifiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2CiIdentifiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2CiIdentifiers",
		Method:             "GET",
		PathPattern:        "/api/v2/ci-identifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2CiIdentifiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2CiIdentifiersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2CiIdentifiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2CiIdentifiersSelector gets a ci identifier entry

  Get an existing CiIdentifier entry via one of its "selectors": ID or type + '/' + selector of the referenced type.
*/
func (a *Client) GetAPIV2CiIdentifiersSelector(params *GetAPIV2CiIdentifiersSelectorParams, opts ...ClientOption) (*GetAPIV2CiIdentifiersSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2CiIdentifiersSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2CiIdentifiersSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/ci-identifiers/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2CiIdentifiersSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2CiIdentifiersSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2CiIdentifiersSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAPIV2SelectorsCiIdentifiersSelector lists ci identifier selectors

  Validate a given CiIdentifier selector and provide any other selectors that would match the same CiIdentifier.
*/
func (a *Client) GetAPIV2SelectorsCiIdentifiersSelector(params *GetAPIV2SelectorsCiIdentifiersSelectorParams, opts ...ClientOption) (*GetAPIV2SelectorsCiIdentifiersSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SelectorsCiIdentifiersSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SelectorsCiIdentifiersSelector",
		Method:             "GET",
		PathPattern:        "/api/v2/selectors/ci-identifiers/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV2SelectorsCiIdentifiersSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SelectorsCiIdentifiersSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SelectorsCiIdentifiersSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchAPIV2CiIdentifiersSelector edits a ci identifier entry

  Edit an existing CiIdentifier entry via one of its "selectors": ID or type + '/' + selector of the referenced type. Note that only mutable fields are available here, immutable fields can only be set using /create.
*/
func (a *Client) PatchAPIV2CiIdentifiersSelector(params *PatchAPIV2CiIdentifiersSelectorParams, opts ...ClientOption) (*PatchAPIV2CiIdentifiersSelectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2CiIdentifiersSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2CiIdentifiersSelector",
		Method:             "PATCH",
		PathPattern:        "/api/v2/ci-identifiers/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIV2CiIdentifiersSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2CiIdentifiersSelectorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2CiIdentifiersSelector: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV2CiIdentifiers creates a new ci identifier entry

  Create a new CiIdentifier entry. Note that some fields are immutable after creation; /edit lists mutable fields.
*/
func (a *Client) PostAPIV2CiIdentifiers(params *PostAPIV2CiIdentifiersParams, opts ...ClientOption) (*PostAPIV2CiIdentifiersOK, *PostAPIV2CiIdentifiersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2CiIdentifiersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2CiIdentifiers",
		Method:             "POST",
		PathPattern:        "/api/v2/ci-identifiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV2CiIdentifiersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostAPIV2CiIdentifiersOK:
		return value, nil, nil
	case *PostAPIV2CiIdentifiersCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ci_identifiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutAPIV2CiIdentifiersSelector creates or edit a ci identifier entry

  Create or edit a CiIdentifier entry. Attempts to edit and will attempt to create upon an error.
If an edit was made or the creation process de-duplicates, this method will return normally with a 200.
*/
func (a *Client) PutAPIV2CiIdentifiersSelector(params *PutAPIV2CiIdentifiersSelectorParams, opts ...ClientOption) (*PutAPIV2CiIdentifiersSelectorOK, *PutAPIV2CiIdentifiersSelectorCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2CiIdentifiersSelectorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2CiIdentifiersSelector",
		Method:             "PUT",
		PathPattern:        "/api/v2/ci-identifiers/{selector}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIV2CiIdentifiersSelectorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PutAPIV2CiIdentifiersSelectorOK:
		return value, nil, nil
	case *PutAPIV2CiIdentifiersSelectorCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ci_identifiers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
