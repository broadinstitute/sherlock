// Code generated by go-swagger; DO NOT EDIT.

package charts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIChartsV3Params creates a new GetAPIChartsV3Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIChartsV3Params() *GetAPIChartsV3Params {
	return &GetAPIChartsV3Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIChartsV3ParamsWithTimeout creates a new GetAPIChartsV3Params object
// with the ability to set a timeout on a request.
func NewGetAPIChartsV3ParamsWithTimeout(timeout time.Duration) *GetAPIChartsV3Params {
	return &GetAPIChartsV3Params{
		timeout: timeout,
	}
}

// NewGetAPIChartsV3ParamsWithContext creates a new GetAPIChartsV3Params object
// with the ability to set a context for a request.
func NewGetAPIChartsV3ParamsWithContext(ctx context.Context) *GetAPIChartsV3Params {
	return &GetAPIChartsV3Params{
		Context: ctx,
	}
}

// NewGetAPIChartsV3ParamsWithHTTPClient creates a new GetAPIChartsV3Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIChartsV3ParamsWithHTTPClient(client *http.Client) *GetAPIChartsV3Params {
	return &GetAPIChartsV3Params{
		HTTPClient: client,
	}
}

/* GetAPIChartsV3Params contains all the parameters to send to the API endpoint
   for the get API charts v3 operation.

   Typically these are written to a http.Request.
*/
type GetAPIChartsV3Params struct {

	// AppImageGitMainBranch.
	AppImageGitMainBranch *string

	// AppImageGitRepo.
	AppImageGitRepo *string

	/* ChartExposesEndpoint.

	   Indicates if the default subdomain, protocol, and port fields are relevant for this chart
	*/
	ChartExposesEndpoint *bool

	// ChartRepo.
	//
	// Default: "terra-helm"
	ChartRepo *string

	// CreatedAt.
	//
	// Format: date-time
	CreatedAt *strfmt.DateTime

	// DefaultPort.
	//
	// Default: 443
	DefaultPort *int64

	// DefaultProtocol.
	//
	// Default: "https"
	DefaultProtocol *string

	/* DefaultSubdomain.

	   When creating, will default to the name of the chart
	*/
	DefaultSubdomain *string

	// Description.
	Description *string

	// ID.
	ID *int64

	/* Limit.

	   Control how many Charts are returned (default 0, meaning all)
	*/
	Limit *int64

	/* Name.

	   Required when creating
	*/
	Name *string

	/* Offset.

	   Control the offset for the returned Charts (default 0)
	*/
	Offset *int64

	// PactParticipant.
	PactParticipant *bool

	// PlaybookURL.
	PlaybookURL *string

	// UpdatedAt.
	//
	// Format: date-time
	UpdatedAt *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API charts v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIChartsV3Params) WithDefaults() *GetAPIChartsV3Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API charts v3 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIChartsV3Params) SetDefaults() {
	var (
		chartExposesEndpointDefault = bool(false)

		chartRepoDefault = string("terra-helm")

		defaultPortDefault = int64(443)

		defaultProtocolDefault = string("https")

		pactParticipantDefault = bool(false)
	)

	val := GetAPIChartsV3Params{
		ChartExposesEndpoint: &chartExposesEndpointDefault,
		ChartRepo:            &chartRepoDefault,
		DefaultPort:          &defaultPortDefault,
		DefaultProtocol:      &defaultProtocolDefault,
		PactParticipant:      &pactParticipantDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithTimeout(timeout time.Duration) *GetAPIChartsV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithContext(ctx context.Context) *GetAPIChartsV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithHTTPClient(client *http.Client) *GetAPIChartsV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAppImageGitMainBranch adds the appImageGitMainBranch to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithAppImageGitMainBranch(appImageGitMainBranch *string) *GetAPIChartsV3Params {
	o.SetAppImageGitMainBranch(appImageGitMainBranch)
	return o
}

// SetAppImageGitMainBranch adds the appImageGitMainBranch to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetAppImageGitMainBranch(appImageGitMainBranch *string) {
	o.AppImageGitMainBranch = appImageGitMainBranch
}

// WithAppImageGitRepo adds the appImageGitRepo to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithAppImageGitRepo(appImageGitRepo *string) *GetAPIChartsV3Params {
	o.SetAppImageGitRepo(appImageGitRepo)
	return o
}

// SetAppImageGitRepo adds the appImageGitRepo to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetAppImageGitRepo(appImageGitRepo *string) {
	o.AppImageGitRepo = appImageGitRepo
}

// WithChartExposesEndpoint adds the chartExposesEndpoint to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithChartExposesEndpoint(chartExposesEndpoint *bool) *GetAPIChartsV3Params {
	o.SetChartExposesEndpoint(chartExposesEndpoint)
	return o
}

// SetChartExposesEndpoint adds the chartExposesEndpoint to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetChartExposesEndpoint(chartExposesEndpoint *bool) {
	o.ChartExposesEndpoint = chartExposesEndpoint
}

// WithChartRepo adds the chartRepo to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithChartRepo(chartRepo *string) *GetAPIChartsV3Params {
	o.SetChartRepo(chartRepo)
	return o
}

// SetChartRepo adds the chartRepo to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetChartRepo(chartRepo *string) {
	o.ChartRepo = chartRepo
}

// WithCreatedAt adds the createdAt to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithCreatedAt(createdAt *strfmt.DateTime) *GetAPIChartsV3Params {
	o.SetCreatedAt(createdAt)
	return o
}

// SetCreatedAt adds the createdAt to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetCreatedAt(createdAt *strfmt.DateTime) {
	o.CreatedAt = createdAt
}

// WithDefaultPort adds the defaultPort to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithDefaultPort(defaultPort *int64) *GetAPIChartsV3Params {
	o.SetDefaultPort(defaultPort)
	return o
}

// SetDefaultPort adds the defaultPort to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetDefaultPort(defaultPort *int64) {
	o.DefaultPort = defaultPort
}

// WithDefaultProtocol adds the defaultProtocol to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithDefaultProtocol(defaultProtocol *string) *GetAPIChartsV3Params {
	o.SetDefaultProtocol(defaultProtocol)
	return o
}

// SetDefaultProtocol adds the defaultProtocol to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetDefaultProtocol(defaultProtocol *string) {
	o.DefaultProtocol = defaultProtocol
}

// WithDefaultSubdomain adds the defaultSubdomain to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithDefaultSubdomain(defaultSubdomain *string) *GetAPIChartsV3Params {
	o.SetDefaultSubdomain(defaultSubdomain)
	return o
}

// SetDefaultSubdomain adds the defaultSubdomain to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetDefaultSubdomain(defaultSubdomain *string) {
	o.DefaultSubdomain = defaultSubdomain
}

// WithDescription adds the description to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithDescription(description *string) *GetAPIChartsV3Params {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetDescription(description *string) {
	o.Description = description
}

// WithID adds the id to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithID(id *int64) *GetAPIChartsV3Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetID(id *int64) {
	o.ID = id
}

// WithLimit adds the limit to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithLimit(limit *int64) *GetAPIChartsV3Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithName(name *string) *GetAPIChartsV3Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithOffset(offset *int64) *GetAPIChartsV3Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPactParticipant adds the pactParticipant to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithPactParticipant(pactParticipant *bool) *GetAPIChartsV3Params {
	o.SetPactParticipant(pactParticipant)
	return o
}

// SetPactParticipant adds the pactParticipant to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetPactParticipant(pactParticipant *bool) {
	o.PactParticipant = pactParticipant
}

// WithPlaybookURL adds the playbookURL to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithPlaybookURL(playbookURL *string) *GetAPIChartsV3Params {
	o.SetPlaybookURL(playbookURL)
	return o
}

// SetPlaybookURL adds the playbookUrl to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetPlaybookURL(playbookURL *string) {
	o.PlaybookURL = playbookURL
}

// WithUpdatedAt adds the updatedAt to the get API charts v3 params
func (o *GetAPIChartsV3Params) WithUpdatedAt(updatedAt *strfmt.DateTime) *GetAPIChartsV3Params {
	o.SetUpdatedAt(updatedAt)
	return o
}

// SetUpdatedAt adds the updatedAt to the get API charts v3 params
func (o *GetAPIChartsV3Params) SetUpdatedAt(updatedAt *strfmt.DateTime) {
	o.UpdatedAt = updatedAt
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIChartsV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AppImageGitMainBranch != nil {

		// query param appImageGitMainBranch
		var qrAppImageGitMainBranch string

		if o.AppImageGitMainBranch != nil {
			qrAppImageGitMainBranch = *o.AppImageGitMainBranch
		}
		qAppImageGitMainBranch := qrAppImageGitMainBranch
		if qAppImageGitMainBranch != "" {

			if err := r.SetQueryParam("appImageGitMainBranch", qAppImageGitMainBranch); err != nil {
				return err
			}
		}
	}

	if o.AppImageGitRepo != nil {

		// query param appImageGitRepo
		var qrAppImageGitRepo string

		if o.AppImageGitRepo != nil {
			qrAppImageGitRepo = *o.AppImageGitRepo
		}
		qAppImageGitRepo := qrAppImageGitRepo
		if qAppImageGitRepo != "" {

			if err := r.SetQueryParam("appImageGitRepo", qAppImageGitRepo); err != nil {
				return err
			}
		}
	}

	if o.ChartExposesEndpoint != nil {

		// query param chartExposesEndpoint
		var qrChartExposesEndpoint bool

		if o.ChartExposesEndpoint != nil {
			qrChartExposesEndpoint = *o.ChartExposesEndpoint
		}
		qChartExposesEndpoint := swag.FormatBool(qrChartExposesEndpoint)
		if qChartExposesEndpoint != "" {

			if err := r.SetQueryParam("chartExposesEndpoint", qChartExposesEndpoint); err != nil {
				return err
			}
		}
	}

	if o.ChartRepo != nil {

		// query param chartRepo
		var qrChartRepo string

		if o.ChartRepo != nil {
			qrChartRepo = *o.ChartRepo
		}
		qChartRepo := qrChartRepo
		if qChartRepo != "" {

			if err := r.SetQueryParam("chartRepo", qChartRepo); err != nil {
				return err
			}
		}
	}

	if o.CreatedAt != nil {

		// query param createdAt
		var qrCreatedAt strfmt.DateTime

		if o.CreatedAt != nil {
			qrCreatedAt = *o.CreatedAt
		}
		qCreatedAt := qrCreatedAt.String()
		if qCreatedAt != "" {

			if err := r.SetQueryParam("createdAt", qCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.DefaultPort != nil {

		// query param defaultPort
		var qrDefaultPort int64

		if o.DefaultPort != nil {
			qrDefaultPort = *o.DefaultPort
		}
		qDefaultPort := swag.FormatInt64(qrDefaultPort)
		if qDefaultPort != "" {

			if err := r.SetQueryParam("defaultPort", qDefaultPort); err != nil {
				return err
			}
		}
	}

	if o.DefaultProtocol != nil {

		// query param defaultProtocol
		var qrDefaultProtocol string

		if o.DefaultProtocol != nil {
			qrDefaultProtocol = *o.DefaultProtocol
		}
		qDefaultProtocol := qrDefaultProtocol
		if qDefaultProtocol != "" {

			if err := r.SetQueryParam("defaultProtocol", qDefaultProtocol); err != nil {
				return err
			}
		}
	}

	if o.DefaultSubdomain != nil {

		// query param defaultSubdomain
		var qrDefaultSubdomain string

		if o.DefaultSubdomain != nil {
			qrDefaultSubdomain = *o.DefaultSubdomain
		}
		qDefaultSubdomain := qrDefaultSubdomain
		if qDefaultSubdomain != "" {

			if err := r.SetQueryParam("defaultSubdomain", qDefaultSubdomain); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID int64

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := swag.FormatInt64(qrID)
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PactParticipant != nil {

		// query param pactParticipant
		var qrPactParticipant bool

		if o.PactParticipant != nil {
			qrPactParticipant = *o.PactParticipant
		}
		qPactParticipant := swag.FormatBool(qrPactParticipant)
		if qPactParticipant != "" {

			if err := r.SetQueryParam("pactParticipant", qPactParticipant); err != nil {
				return err
			}
		}
	}

	if o.PlaybookURL != nil {

		// query param playbookURL
		var qrPlaybookURL string

		if o.PlaybookURL != nil {
			qrPlaybookURL = *o.PlaybookURL
		}
		qPlaybookURL := qrPlaybookURL
		if qPlaybookURL != "" {

			if err := r.SetQueryParam("playbookURL", qPlaybookURL); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAt != nil {

		// query param updatedAt
		var qrUpdatedAt strfmt.DateTime

		if o.UpdatedAt != nil {
			qrUpdatedAt = *o.UpdatedAt
		}
		qUpdatedAt := qrUpdatedAt.String()
		if qUpdatedAt != "" {

			if err := r.SetQueryParam("updatedAt", qUpdatedAt); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
